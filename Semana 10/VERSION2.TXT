#include <io.h>
#include <delay.h>
#include <display.h>
#include <stdio.h>
#include <ff.h>
     
bit xd=0;

#asm
    .equ __lcd_port=0x02
    .equ __lcd_EN=1
    .equ __lcd_RS=0
    .equ __lcd_D4=2
    .equ __lcd_D5=3
    .equ __lcd_D6=4
    .equ __lcd_D7=5
#endasm


interrupt [EXT_INT0] void ext_int0_isr(void)
{
    xd=~xd;
    if (xd==0)
       TCCR0B = 0x00;
    else
       TCCR0B = 0x01;
}

//Código base que reproduce A001.WAV que es un WAV, Mono, 8-bit, y frec de muestreo de 22050HZ
// T reproducción = 1/22050 = 45.35 useg

//Timer 0: Fast PWM se usa para la DAC (Digital to Analog Converter)
//Timer 1: Interrupción periódica cada 10mseg necesaria para la SD
//Timer 2: CTC. Interrupción periódica cada periodo de reproducción (T rep) 45.35 useg
 
char bufferL[256];
char bufferH[256]; 
char NombreArchivo[]  = "0:A000.wav";
unsigned int i=0;
unsigned int j=0;
unsigned int k;
unsigned int aux=0;
int acumulador = 0;
int acumuladorperron = 0;
bit LeerBufferH,LeerBufferL;
unsigned long muestras;
//unsigned int song=1;
bit stereo;

interrupt [TIM1_COMPA] void timer1_compa_isr(void){
disk_timerproc();
/* MMC/SD/SD HC card access low level timing function */
}
        
//Interrupción que se ejecuta cada T=1/Fmuestreo_Wav
interrupt [TIM2_COMPA] void timer2_compa_isr(void){
    if(stereo == 0){
        if (i<256)
          OCR0A=bufferL[i++];
        else{
          OCR0A=bufferH[i-256];
          i++;
        }   
        if (i==256)
           LeerBufferL=1;
        if (i==512){
           LeerBufferH=1;
           i=0;
        }
    }
    
    else{
        if (i<256){
          OCR0A=bufferL[i++];
          OCR0B=bufferL[i++];
        }
        else{
          OCR0A=bufferH[i-256]; 
          i++;
          OCR0B=bufferH[i-256];
          i++;
        }   
        if (i==256)
           LeerBufferL=1;
        if (i==512){
           LeerBufferH=1;
           i=0;
        }
    }   
}

void main(){
    unsigned int  br;
       
    /* FAT function result */
    FRESULT res;
                  
   
    /* will hold the information for logical drive 0: */
    FATFS drive;
    FIL archivo; // file objects 
                                  
    CLKPR=0x80;         
    CLKPR=0x01;         //Cambiar a 8MHz la frecuencia de operación del micro 
       
    // Código para hacer una interrupción periódica cada 10ms
    // Timer/Counter 1 initialization
    // Clock source: System Clock
    // Clock value: 1000.000 kHz
    // Mode: CTC top=OCR1A
    // Compare A Match Interrupt: On
    TCCR1B=0x0A;     //CK/8 10ms con oscilador de 8MHz
    OCR1AH=0x27;
    OCR1AL=0x10;
    TIMSK1=0x02; 
                                                    
    //PWM para conversión Digital Analógica WAV->Sonido
    // Timer/Counter 0 initialization
    // Clock source: System Clock
    // Clock value: 8000.000 kHz
    // Mode: Fast PWM top=0xFF
    // OC0A output: Non-Inverted PWM
    TCCR0A=0x83;         
    
    DDRB.7=1;  //Salida bocina (OC0A) 
    DDRG.4=1;  //Salida bocina (OC0B)
                                  
    // Timer/Counter 2 initialization
    // Clock source: System Clock
    // Clock value: 1000.000 kHz
    // Mode: CTC top=OCR2A
    ASSR=0x00;
    TCCR2A=0x02;
    TCCR2B=0x02;
    OCR2A=0x2C;         //Este valor va a cambiar por cada frecuencia de muestreo diferente que hay
        
    // Timer/Counter 2 Interrupt(s) initialization
    TIMSK2=0x02;

    DDRD.7=1; 
    SetupLCD();
    #asm("sei")   
    disk_initialize(0);  /* Inicia el puerto SPI para la SD */
    delay_ms(500);  
    
    
    //Interrupciones
    // External Interrupt(s) initialization
    // INT0: On
    // INT0 Mode: Falling Edge
    // INT1: On
    // INT1 Mode: Falling Edge
    // INT2: On
    // INT2 Mode: Falling Edge
    // INT3: Off
    // INT4: Off
    // INT5: Off
    // INT6: Off
    // INT7: Off
    EICRA=(0<<ISC31) | (0<<ISC30) | (1<<ISC21) | (0<<ISC20) | (1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
    EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
    EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (1<<INT2) | (1<<INT1) | (1<<INT0);
    EIFR=(0<<INTF7) | (0<<INTF6) | (0<<INTF5) | (0<<INTF4) | (0<<INTF3) | (1<<INTF2) | (1<<INTF1) | (1<<INTF0);
    #asm("sei")

    //DDRD=0x7;
    PORTD=0x07;                                     //pull ups en PD0, PD1, PD2   
    
    PORTC.0 = 1; 
    

       
    /* mount logical drive 0: */
    if ((res=f_mount(0,&drive))==FR_OK){  
        while(1){ 
             if(PIND.0 == 0){                                //Boton presionado  
                acumulador = acumulador + 1;
                delay_ms(250);
                }
             
             
            
            //NombreArchivo[6]=song+'0';
            //Lectura de Archivo
            res = f_open(&archivo, NombreArchivo, FA_OPEN_EXISTING | FA_READ);
            if (res==FR_OK){ 
                PORTD.7=1;
                
                //Leer propiedades de la canción
                f_lseek(&archivo, 0);
                f_read(&archivo, bufferL, 44,&br); //leer encabezado 
                
                //Procesar si es mono o estereo
                if(bufferL[22]==1)
                    stereo=0;
                else
                    stereo=1; 
                i=0;   
                //Obtenemos frecuencia de muestreo para calcular el valor de OCR2A
                //Comparar bufferL[24] y/o bufferL[25]   
                muestras = (long)bufferL[43]*16777216 + (long)bufferL[42]*65536 + (long)bufferL[41]*256 + (long)bufferL[40];
                f_lseek(&archivo, muestras+44);
                f_read(&archivo, bufferH, 100,&br); //En bufferH esta la info de la canción  
                
                //Imprime canción  
                aux=0; 
                for(j=20; j<100; j++){
                    MoveCursor(aux,0);
                    CharLCD(bufferH[j]);
                    if(bufferH[j] == 0){ 
                        k=j;
                        break;
                    }
                    aux++;
                }  
                MoveCursor(aux,0); 
                CharLCD(' ');
                
                for(j=k; j<100; j++){
                    if(bufferH[j] == 0x54){ 
                        k=j+5;
                        break; 
                    }
                }
                
                aux=0;
                for(j=k; j<100; j++){
                    MoveCursor(aux,1);  
                    CharLCD(bufferH[j]);
                    if(bufferH[j] == 0) 
                        break;
                    aux++;
                }
                MoveCursor(aux,1); 
                CharLCD(' ');
                                     
                f_lseek(&archivo, 44);   
                f_read(&archivo, bufferL, 256,&br); //leer los primeros 512 bytes del WAV
                f_read(&archivo, bufferH, 256,&br);    
                LeerBufferL=0;     
                LeerBufferH=0;
                TCCR0B=0x01;    //Prende sonido 

                do{   
                     while((LeerBufferH==0)&&(LeerBufferL==0)){ 
                     }
                     if (LeerBufferL){                       
                         f_read(&archivo, bufferL, 256,&br); //leer encabezado  
                         LeerBufferL=0;  
                     }
                     else{ 
                         f_read(&archivo, bufferH, 256,&br); //leer encabezado
                         LeerBufferH=0;
                        
                     }       
                        
                       if(PIND.1 == 0){
                            acumuladorperron = acumuladorperron + 1; 
                            delay_ms(250);
                       }
                         
                       if(acumuladorperron == 1){
                            NombreArchivo[5] = '1';
                            f_lseek(&archivo, 44);   
                            f_read(&archivo, bufferL, 256,&br); //leer los primeros 512 bytes del WAV
                            f_read(&archivo, bufferH, 256,&br);    
                            LeerBufferL=0;     
                            LeerBufferH=0;
                       }     
                        
                        /*MoveCursor(0,0);
                        CharLCD(NombreArchivo[0]);
                        MoveCursor(1,0);
                        CharLCD(NombreArchivo[1]);
                        MoveCursor(2,0);
                        CharLCD(NombreArchivo[2]);
                        MoveCursor(3,0);
                        CharLCD(NombreArchivo[3]);
                        MoveCursor(4,0);
                        CharLCD(NombreArchivo[4]);
                        MoveCursor(5,0);
                        CharLCD(NombreArchivo[5]);
                        MoveCursor(6,0);
                        CharLCD(NombreArchivo[6]); */               
                              
                }while(br==256); 
                TCCR0B=0x00;   //Apaga sonido  
                EraseLCD();
                f_close(&archivo); 
                
            }              
        }
    }
    f_mount(0, 0); //Cerrar drive de SD
    while(1);
}