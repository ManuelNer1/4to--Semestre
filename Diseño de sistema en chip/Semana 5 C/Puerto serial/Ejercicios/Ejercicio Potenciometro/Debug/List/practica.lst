
AVRASM ver. 2.1.30  C:\Users\ManuelNeri\Desktop\Puerto serial\Ejercicios\Ejercicio Potenciometro\Debug\List\practica.asm Wed Apr 28 12:47:57 2021

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega2560
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 2048 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega2560
                 	#pragma AVRPART MEMORY PROG_FLASH 262144
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU RAMPZ=0x3B
                 	.EQU EIND=0x3C
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x74
                 	.EQU XMCRB=0x75
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0200
                 	.EQU __SRAM_END=0x21FF
                 	.EQU __DSTACK_SIZE=0x0800
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0087 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0000 	JMP  0x00
00004a 940c 0000 	JMP  0x00
00004c 940c 0000 	JMP  0x00
00004e 940c 0000 	JMP  0x00
000050 940c 0000 	JMP  0x00
000052 940c 0000 	JMP  0x00
000054 940c 0000 	JMP  0x00
000056 940c 0000 	JMP  0x00
000058 940c 0000 	JMP  0x00
00005a 940c 0000 	JMP  0x00
00005c 940c 0000 	JMP  0x00
00005e 940c 0000 	JMP  0x00
000060 940c 0000 	JMP  0x00
000062 940c 0000 	JMP  0x00
000064 940c 0000 	JMP  0x00
000066 940c 0000 	JMP  0x00
000068 940c 0000 	JMP  0x00
00006a 940c 0000 	JMP  0x00
00006c 940c 0000 	JMP  0x00
00006e 940c 0000 	JMP  0x00
000070 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000072 2710
000073 03e8
000074 0064
000075 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000076 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000077 1000
000078 0100
000079 0010
00007a 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
00007b 6f50
00007c 6372
00007d 6e65
00007e 6174      	.DB  0x50,0x6F,0x72,0x63,0x65,0x6E,0x74,0x61
00007f 656a
000080 3a20
000081 000d
000082 7365      	.DB  0x6A,0x65,0x20,0x3A,0xD,0x0,0x65,0x73
000083 2520
000084 0069
000085 6325
C:\Users\ManuelNeri\Desktop\Puerto serial\Ejercicios\Ejercicio Potenciometro\Debug\List\practica.asm(1170): warning: .cseg .db misalignment - padding zero byte
000086 0000      	.DB  0x20,0x25,0x69,0x0,0x25,0x63,0x0
                 __RESET:
000087 94f8      	CLI
000088 27ee      	CLR  R30
000089 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00008a e0f1      	LDI  R31,1
00008b bff5      	OUT  MCUCR,R31
00008c bfe5      	OUT  MCUCR,R30
00008d 93e0 0074 	STS  XMCRA,R30
00008f 93e0 0075 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000091 e08d      	LDI  R24,(14-2)+1
000092 e0a2      	LDI  R26,2
000093 27bb      	CLR  R27
                 __CLEAR_REG:
000094 93ed      	ST   X+,R30
000095 958a      	DEC  R24
000096 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000097 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000098 e290      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000099 e0a0      	LDI  R26,LOW(__SRAM_START)
00009a e0b2      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00009b 93ed      	ST   X+,R30
00009c 9701      	SBIW R24,1
00009d f7e9      	BRNE __CLEAR_SRAM
                 
00009e bf8b      	OUT  RAMPZ,R24
                 
00009f bf8c      	OUT  EIND,R24
                 
                 ;GPIOR0 INITIALIZATION
0000a0 e0e0      	LDI  R30,__GPIOR0_INIT
0000a1 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a2 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a3 bfed      	OUT  SPL,R30
0000a4 e2e1      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a5 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a6 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a7 e0da      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a8 940c 00d0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0xA00
                 
                 	.CSEG
                 ;/*
                 ; * practica.c
                 ; *
                 ; * Created: 28/04/2021 12:01:37 p. m.
                 ; * Author: ManuelNeri
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (1<<ADLAR))
                 ;
                 ;int DCEnt, lectura;
                 ;
                 ;// Read the 8 most significant bits
                 ;// of the AD conversion result
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0014 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0015 ADMUX=(adc_input & 0x1f) | ADC_VREF_TYPE;
0000aa 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000ab 81e8      	LD   R30,Y
0000ac 71ef      	ANDI R30,LOW(0x1F)
0000ad 66e0      	ORI  R30,LOW(0x60)
0000ae 93e0 007c 	STS  124,R30
                 ; 0000 0016 if (adc_input & 0x20) ADCSRB|=(1<<MUX5);
0000b0 81e8      	LD   R30,Y
0000b1 72e0      	ANDI R30,LOW(0x20)
0000b2 f021      	BREQ _0x3
0000b3 91e0 007b 	LDS  R30,123
0000b5 60e8      	ORI  R30,8
0000b6 c003      	RJMP _0xC
                 ; 0000 0017 else ADCSRB&= ~(1<<MUX5);
                 _0x3:
0000b7 91e0 007b 	LDS  R30,123
0000b9 7fe7      	ANDI R30,0XF7
                 _0xC:
0000ba 93e0 007b 	STS  123,R30
                 ; 0000 0018 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0019 delay_us(10);
                +
0000bc e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
0000bd 958a     +DEC R24
0000be f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ; 0000 001A // Start the AD conversion
                 ; 0000 001B ADCSRA|=(1<<ADSC);
0000bf 91e0 007a 	LDS  R30,122
0000c1 64e0      	ORI  R30,0x40
0000c2 93e0 007a 	STS  122,R30
                 ; 0000 001C // Wait for the AD conversion to complete
                 ; 0000 001D while ((ADCSRA & (1<<ADIF))==0);
                 _0x5:
0000c4 91e0 007a 	LDS  R30,122
0000c6 71e0      	ANDI R30,LOW(0x10)
0000c7 f3e1      	BREQ _0x5
                 ; 0000 001E ADCSRA|=(1<<ADIF);
0000c8 91e0 007a 	LDS  R30,122
0000ca 61e0      	ORI  R30,0x10
0000cb 93e0 007a 	STS  122,R30
                 ; 0000 001F return ADCH;
0000cd 91e0 0079 	LDS  R30,121
0000cf c068      	RJMP _0x2060001
                 ; 0000 0020 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0023 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0024     CLKPR = 0x80;
0000d0 e8e0      	LDI  R30,LOW(128)
0000d1 93e0 0061 	STS  97,R30
                 ; 0000 0025     CLKPR = 0x04;
0000d3 e0e4      	LDI  R30,LOW(4)
0000d4 93e0 0061 	STS  97,R30
                 ; 0000 0026 
                 ; 0000 0027     TCCR0A = 0x81;
0000d6 e8e1      	LDI  R30,LOW(129)
0000d7 bde4      	OUT  0x24,R30
                 ; 0000 0028     TCCR0B = 0x01;
0000d8 e0e1      	LDI  R30,LOW(1)
0000d9 bde5      	OUT  0x25,R30
                 ; 0000 0029 
                 ; 0000 002A     // USART initialization
                 ; 0000 002B     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 002C     // USART Receiver: On
                 ; 0000 002D     // USART Transmitter: On
                 ; 0000 002E     // USART0 Mode: Asynchronous
                 ; 0000 002F     // USART Baud Rate: 9600 (Double Speed Mode)
                 ; 0000 0030     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (1<<U2X0) | (0<<MPCM0);
0000da e0e2      	LDI  R30,LOW(2)
0000db 93e0 00c0 	STS  192,R30
                 ; 0000 0031     UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0000dd e1e8      	LDI  R30,LOW(24)
0000de 93e0 00c1 	STS  193,R30
                 ; 0000 0032     UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
0000e0 e0e6      	LDI  R30,LOW(6)
0000e1 93e0 00c2 	STS  194,R30
                 ; 0000 0033     UBRR0H=0x00;
0000e3 e0e0      	LDI  R30,LOW(0)
0000e4 93e0 00c5 	STS  197,R30
                 ; 0000 0034     UBRR0L=0x0C;
0000e6 e0ec      	LDI  R30,LOW(12)
0000e7 93e0 00c4 	STS  196,R30
                 ; 0000 0035 
                 ; 0000 0036     // ADC initialization
                 ; 0000 0037     // ADC Clock frequency: 500.000 kHz
                 ; 0000 0038     // ADC Voltage Reference: AVCC pin
                 ; 0000 0039     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 003A     // Only the 8 most significant bits of
                 ; 0000 003B     // the AD conversion result are used
                 ; 0000 003C     // Digital input buffers on ADC0: Off, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 003D     // ADC4: On, ADC5: On, ADC6: On, ADC7: On
                 ; 0000 003E     DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
0000e9 e0e1      	LDI  R30,LOW(1)
0000ea 93e0 007e 	STS  126,R30
                 ; 0000 003F     // Digital input buffers on ADC8: On, ADC9: On, ADC10: On, ADC11: On
                 ; 0000 0040     // ADC12: On, ADC13: On, ADC14: On, ADC15: On
                 ; 0000 0041     DIDR2=(0<<ADC15D) | (0<<ADC14D) | (0<<ADC13D) | (0<<ADC12D) | (0<<ADC11D) | (0<<ADC10D) | (0<<ADC9D) | (0<<ADC8D);
0000ec e0e0      	LDI  R30,LOW(0)
0000ed 93e0 007d 	STS  125,R30
                 ; 0000 0042     ADMUX=ADC_VREF_TYPE;
0000ef e6e0      	LDI  R30,LOW(96)
0000f0 93e0 007c 	STS  124,R30
                 ; 0000 0043     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000f2 e8e4      	LDI  R30,LOW(132)
0000f3 93e0 007a 	STS  122,R30
                 ; 0000 0044     ADCSRB=(0<<MUX5) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000f5 e0e0      	LDI  R30,LOW(0)
0000f6 93e0 007b 	STS  123,R30
                 ; 0000 0045 
                 ; 0000 0046     printf("Porcentaje :\r");
                +
0000f8 efe6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000f9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000fa 940e 02b9 	CALL SUBOPT_0x0
                 ; 0000 0047 
                 ; 0000 0048     while (1)
                 _0x8:
                 ; 0000 0049     {
                 ; 0000 004A         lectura = read_adc(0);
0000fc e0a0      	LDI  R26,LOW(0)
0000fd dfac      	RCALL _read_adc
0000fe e0f0      	LDI  R31,0
0000ff 93e0 0a02 	STS  _lectura,R30
000101 93f0 0a03 	STS  _lectura+1,R31
                 ; 0000 004B         DCEnt = (lectura*100)/255;
000103 e6a4      	LDI  R26,LOW(100)
000104 e0b0      	LDI  R27,HIGH(100)
000105 940e 030b 	CALL __MULW12
000107 01df      	MOVW R26,R30
000108 efef      	LDI  R30,LOW(255)
000109 e0f0      	LDI  R31,HIGH(255)
00010a 940e 0323 	CALL __DIVW21
00010c 93e0 0a00 	STS  _DCEnt,R30
00010e 93f0 0a01 	STS  _DCEnt+1,R31
                 ; 0000 004C         printf("es %i",DCEnt);
                +
000110 e0e4     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
000111 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
000112 93fa      	ST   -Y,R31
000113 93ea      	ST   -Y,R30
000114 91e0 0a00 	LDS  R30,_DCEnt
000116 91f0 0a01 	LDS  R31,_DCEnt+1
000118 940e 02fe 	CALL __CWD1
00011a 940e 02c0 	CALL SUBOPT_0x1
                 ; 0000 004D         printf("%c",37);
                +
00011c e0ea     +LDI R30 , LOW ( 2 * _0x0 + ( 20 ) )
00011d e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 20 ) )
                 	__POINTW1FN _0x0,20
00011e 93fa      	ST   -Y,R31
00011f 93ea      	ST   -Y,R30
                +
000120 e2e5     +LDI R30 , LOW ( 0x25 )
000121 e0f0     +LDI R31 , HIGH ( 0x25 )
000122 e060     +LDI R22 , BYTE3 ( 0x25 )
000123 e070     +LDI R23 , BYTE4 ( 0x25 )
                 	__GETD1N 0x25
000124 940e 02c0 	CALL SUBOPT_0x1
                 ; 0000 004E         printf("\r");
                +
000126 e0e2     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
000127 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
000128 940e 02b9 	CALL SUBOPT_0x0
                 ; 0000 004F         delay_ms(100);
00012a e6a4      	LDI  R26,LOW(100)
00012b e0b0      	LDI  R27,0
00012c 940e 02ec 	CALL _delay_ms
                 ; 0000 0050     }
00012e cfcd      	RJMP _0x8
                 ; 0000 0051 
                 ; 0000 0052 }
                 _0xB:
00012f cfff      	RJMP _0xB
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000130 93aa      	ST   -Y,R26
                 _0x2000006:
000131 91e0 00c0 	LDS  R30,192
000133 72e0      	ANDI R30,LOW(0x20)
000134 f3e1      	BREQ _0x2000006
000135 81e8      	LD   R30,Y
000136 93e0 00c6 	STS  198,R30
                 _0x2060001:
000138 9621      	ADIW R28,1
000139 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
00013a 93ba      	ST   -Y,R27
00013b 93aa      	ST   -Y,R26
00013c 81aa      	LDD  R26,Y+2
00013d dff2      	RCALL _putchar
00013e 81a8      	LD   R26,Y
00013f 81b9      	LDD  R27,Y+1
000140 91ed      	LD   R30,X+
000141 91fd      	LD   R31,X+
000142 9631      	ADIW R30,1
000143 93fe      	ST   -X,R31
000144 93ee      	ST   -X,R30
000145 9623      	ADIW R28,3
000146 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000147 93ba      	ST   -Y,R27
000148 93aa      	ST   -Y,R26
000149 9726      	SBIW R28,6
00014a 940e 0343 	CALL __SAVELOCR6
00014c e000      	LDI  R16,0
00014d 85ac      	LDD  R26,Y+12
00014e 85bd      	LDD  R27,Y+12+1
00014f e0e0      	LDI  R30,LOW(0)
000150 e0f0      	LDI  R31,HIGH(0)
000151 93ed      	ST   X+,R30
000152 93fc      	ST   X,R31
                 _0x200001C:
000153 89ea      	LDD  R30,Y+18
000154 89fb      	LDD  R31,Y+18+1
000155 9631      	ADIW R30,1
000156 8bea      	STD  Y+18,R30
000157 8bfb      	STD  Y+18+1,R31
000158 9731      	SBIW R30,1
000159 91e4      	LPM  R30,Z
00015a 2f3e      	MOV  R19,R30
00015b 30e0      	CPI  R30,0
00015c f409      	BRNE PC+2
00015d c115      	RJMP _0x200001E
00015e 2fe0      	MOV  R30,R16
00015f 30e0      	CPI  R30,0
000160 f439      	BRNE _0x2000022
000161 3235      	CPI  R19,37
000162 f411      	BRNE _0x2000023
000163 e001      	LDI  R16,LOW(1)
000164 c002      	RJMP _0x2000024
                 _0x2000023:
000165 940e 02c7 	CALL SUBOPT_0x2
                 _0x2000024:
000167 c10a      	RJMP _0x2000021
                 _0x2000022:
000168 30e1      	CPI  R30,LOW(0x1)
000169 f4a9      	BRNE _0x2000025
00016a 3235      	CPI  R19,37
00016b f419      	BRNE _0x2000026
00016c 940e 02c7 	CALL SUBOPT_0x2
00016e c102      	RJMP _0x20000D2
                 _0x2000026:
00016f e002      	LDI  R16,LOW(2)
000170 e050      	LDI  R21,LOW(0)
000171 e010      	LDI  R17,LOW(0)
000172 323d      	CPI  R19,45
000173 f411      	BRNE _0x2000027
000174 e011      	LDI  R17,LOW(1)
000175 c0fc      	RJMP _0x2000021
                 _0x2000027:
000176 323b      	CPI  R19,43
000177 f411      	BRNE _0x2000028
000178 e25b      	LDI  R21,LOW(43)
000179 c0f8      	RJMP _0x2000021
                 _0x2000028:
00017a 3230      	CPI  R19,32
00017b f411      	BRNE _0x2000029
00017c e250      	LDI  R21,LOW(32)
00017d c0f4      	RJMP _0x2000021
                 _0x2000029:
00017e c002      	RJMP _0x200002A
                 _0x2000025:
00017f 30e2      	CPI  R30,LOW(0x2)
000180 f439      	BRNE _0x200002B
                 _0x200002A:
000181 e040      	LDI  R20,LOW(0)
000182 e003      	LDI  R16,LOW(3)
000183 3330      	CPI  R19,48
000184 f411      	BRNE _0x200002C
000185 6810      	ORI  R17,LOW(128)
000186 c0eb      	RJMP _0x2000021
                 _0x200002C:
000187 c003      	RJMP _0x200002D
                 _0x200002B:
000188 30e3      	CPI  R30,LOW(0x3)
000189 f009      	BREQ PC+2
00018a c0e7      	RJMP _0x2000021
                 _0x200002D:
00018b 3330      	CPI  R19,48
00018c f010      	BRLO _0x2000030
00018d 333a      	CPI  R19,58
00018e f008      	BRLO _0x2000031
                 _0x2000030:
00018f c007      	RJMP _0x200002F
                 _0x2000031:
000190 e0aa      	LDI  R26,LOW(10)
000191 9f4a      	MUL  R20,R26
000192 2d40      	MOV  R20,R0
000193 2fe3      	MOV  R30,R19
000194 53e0      	SUBI R30,LOW(48)
000195 0f4e      	ADD  R20,R30
000196 c0db      	RJMP _0x2000021
                 _0x200002F:
000197 2fe3      	MOV  R30,R19
000198 36e3      	CPI  R30,LOW(0x63)
000199 f449      	BRNE _0x2000035
00019a 940e 02ce 	CALL SUBOPT_0x3
00019c 89e8      	LDD  R30,Y+16
00019d 89f9      	LDD  R31,Y+16+1
00019e 81a4      	LDD  R26,Z+4
00019f 93aa      	ST   -Y,R26
0001a0 940e 02d4 	CALL SUBOPT_0x4
0001a2 c0ce      	RJMP _0x2000036
                 _0x2000035:
0001a3 37e3      	CPI  R30,LOW(0x73)
0001a4 f441      	BRNE _0x2000038
0001a5 940e 02ce 	CALL SUBOPT_0x3
0001a7 940e 02da 	CALL SUBOPT_0x5
0001a9 940e 02a0 	CALL _strlen
0001ab 2f0e      	MOV  R16,R30
0001ac c00a      	RJMP _0x2000039
                 _0x2000038:
0001ad 37e0      	CPI  R30,LOW(0x70)
0001ae f461      	BRNE _0x200003B
0001af 940e 02ce 	CALL SUBOPT_0x3
0001b1 940e 02da 	CALL SUBOPT_0x5
0001b3 940e 02ac 	CALL _strlenf
0001b5 2f0e      	MOV  R16,R30
0001b6 6018      	ORI  R17,LOW(8)
                 _0x2000039:
0001b7 6012      	ORI  R17,LOW(2)
0001b8 771f      	ANDI R17,LOW(127)
0001b9 e020      	LDI  R18,LOW(0)
0001ba c034      	RJMP _0x200003C
                 _0x200003B:
0001bb 36e4      	CPI  R30,LOW(0x64)
0001bc f011      	BREQ _0x200003F
0001bd 36e9      	CPI  R30,LOW(0x69)
0001be f411      	BRNE _0x2000040
                 _0x200003F:
0001bf 6014      	ORI  R17,LOW(4)
0001c0 c002      	RJMP _0x2000041
                 _0x2000040:
0001c1 37e5      	CPI  R30,LOW(0x75)
0001c2 f431      	BRNE _0x2000042
                 _0x2000041:
0001c3 eee4      	LDI  R30,LOW(_tbl10_G100*2)
0001c4 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001c5 83ee      	STD  Y+6,R30
0001c6 83ff      	STD  Y+6+1,R31
0001c7 e005      	LDI  R16,LOW(5)
0001c8 c00c      	RJMP _0x2000043
                 _0x2000042:
0001c9 35e8      	CPI  R30,LOW(0x58)
0001ca f411      	BRNE _0x2000045
0001cb 6018      	ORI  R17,LOW(8)
0001cc c003      	RJMP _0x2000046
                 _0x2000045:
0001cd 37e8      	CPI  R30,LOW(0x78)
0001ce f009      	BREQ PC+2
0001cf c0a1      	RJMP _0x2000077
                 _0x2000046:
0001d0 eeee      	LDI  R30,LOW(_tbl16_G100*2)
0001d1 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001d2 83ee      	STD  Y+6,R30
0001d3 83ff      	STD  Y+6+1,R31
0001d4 e004      	LDI  R16,LOW(4)
                 _0x2000043:
0001d5 ff12      	SBRS R17,2
0001d6 c014      	RJMP _0x2000048
0001d7 940e 02ce 	CALL SUBOPT_0x3
0001d9 940e 02e4 	CALL SUBOPT_0x6
0001db 85ab      	LDD  R26,Y+11
0001dc 23aa      	TST  R26
0001dd f43a      	BRPL _0x2000049
0001de 85ea      	LDD  R30,Y+10
0001df 85fb      	LDD  R31,Y+10+1
0001e0 940e 02fa 	CALL __ANEGW1
0001e2 87ea      	STD  Y+10,R30
0001e3 87fb      	STD  Y+10+1,R31
0001e4 e25d      	LDI  R21,LOW(45)
                 _0x2000049:
0001e5 3050      	CPI  R21,0
0001e6 f011      	BREQ _0x200004A
0001e7 5f0f      	SUBI R16,-LOW(1)
0001e8 c001      	RJMP _0x200004B
                 _0x200004A:
0001e9 7f1b      	ANDI R17,LOW(251)
                 _0x200004B:
0001ea c004      	RJMP _0x200004C
                 _0x2000048:
0001eb 940e 02ce 	CALL SUBOPT_0x3
0001ed 940e 02e4 	CALL SUBOPT_0x6
                 _0x200004C:
                 _0x200003C:
0001ef fd10      	SBRC R17,0
0001f0 c011      	RJMP _0x200004D
                 _0x200004E:
0001f1 1704      	CP   R16,R20
0001f2 f478      	BRSH _0x2000050
0001f3 ff17      	SBRS R17,7
0001f4 c008      	RJMP _0x2000051
0001f5 ff12      	SBRS R17,2
0001f6 c004      	RJMP _0x2000052
0001f7 7f1b      	ANDI R17,LOW(251)
0001f8 2f35      	MOV  R19,R21
0001f9 5001      	SUBI R16,LOW(1)
0001fa c001      	RJMP _0x2000053
                 _0x2000052:
0001fb e330      	LDI  R19,LOW(48)
                 _0x2000053:
0001fc c001      	RJMP _0x2000054
                 _0x2000051:
0001fd e230      	LDI  R19,LOW(32)
                 _0x2000054:
0001fe 940e 02c7 	CALL SUBOPT_0x2
000200 5041      	SUBI R20,LOW(1)
000201 cfef      	RJMP _0x200004E
                 _0x2000050:
                 _0x200004D:
000202 2f20      	MOV  R18,R16
000203 ff11      	SBRS R17,1
000204 c017      	RJMP _0x2000055
                 _0x2000056:
000205 3020      	CPI  R18,0
000206 f0a1      	BREQ _0x2000058
000207 ff13      	SBRS R17,3
000208 c006      	RJMP _0x2000059
000209 81ee      	LDD  R30,Y+6
00020a 81ff      	LDD  R31,Y+6+1
00020b 9135      	LPM  R19,Z+
00020c 83ee      	STD  Y+6,R30
00020d 83ff      	STD  Y+6+1,R31
00020e c005      	RJMP _0x200005A
                 _0x2000059:
00020f 81ae      	LDD  R26,Y+6
000210 81bf      	LDD  R27,Y+6+1
000211 913d      	LD   R19,X+
000212 83ae      	STD  Y+6,R26
000213 83bf      	STD  Y+6+1,R27
                 _0x200005A:
000214 940e 02c7 	CALL SUBOPT_0x2
000216 3040      	CPI  R20,0
000217 f009      	BREQ _0x200005B
000218 5041      	SUBI R20,LOW(1)
                 _0x200005B:
000219 5021      	SUBI R18,LOW(1)
00021a cfea      	RJMP _0x2000056
                 _0x2000058:
00021b c04b      	RJMP _0x200005C
                 _0x2000055:
                 _0x200005E:
00021c e330      	LDI  R19,LOW(48)
00021d 81ee      	LDD  R30,Y+6
00021e 81ff      	LDD  R31,Y+6+1
00021f 940e 033a 	CALL __GETW1PF
000221 87e8      	STD  Y+8,R30
000222 87f9      	STD  Y+8+1,R31
000223 81ee      	LDD  R30,Y+6
000224 81ff      	LDD  R31,Y+6+1
000225 9632      	ADIW R30,2
000226 83ee      	STD  Y+6,R30
000227 83ff      	STD  Y+6+1,R31
                 _0x2000060:
000228 85e8      	LDD  R30,Y+8
000229 85f9      	LDD  R31,Y+8+1
00022a 85aa      	LDD  R26,Y+10
00022b 85bb      	LDD  R27,Y+10+1
00022c 17ae      	CP   R26,R30
00022d 07bf      	CPC  R27,R31
00022e f050      	BRLO _0x2000062
00022f 5f3f      	SUBI R19,-LOW(1)
000230 85a8      	LDD  R26,Y+8
000231 85b9      	LDD  R27,Y+8+1
000232 85ea      	LDD  R30,Y+10
000233 85fb      	LDD  R31,Y+10+1
000234 1bea      	SUB  R30,R26
000235 0bfb      	SBC  R31,R27
000236 87ea      	STD  Y+10,R30
000237 87fb      	STD  Y+10+1,R31
000238 cfef      	RJMP _0x2000060
                 _0x2000062:
000239 333a      	CPI  R19,58
00023a f028      	BRLO _0x2000063
00023b ff13      	SBRS R17,3
00023c c002      	RJMP _0x2000064
00023d 5f39      	SUBI R19,-LOW(7)
00023e c001      	RJMP _0x2000065
                 _0x2000064:
00023f 5d39      	SUBI R19,-LOW(39)
                 _0x2000065:
                 _0x2000063:
000240 fd14      	SBRC R17,4
000241 c01a      	RJMP _0x2000067
000242 3331      	CPI  R19,49
000243 f420      	BRSH _0x2000069
000244 85a8      	LDD  R26,Y+8
000245 85b9      	LDD  R27,Y+8+1
000246 9711      	SBIW R26,1
000247 f409      	BRNE _0x2000068
                 _0x2000069:
000248 c009      	RJMP _0x20000D3
                 _0x2000068:
000249 1742      	CP   R20,R18
00024a f010      	BRLO _0x200006D
00024b ff10      	SBRS R17,0
00024c c001      	RJMP _0x200006E
                 _0x200006D:
00024d c013      	RJMP _0x200006C
                 _0x200006E:
00024e e230      	LDI  R19,LOW(32)
00024f ff17      	SBRS R17,7
000250 c00b      	RJMP _0x200006F
000251 e330      	LDI  R19,LOW(48)
                 _0x20000D3:
000252 6110      	ORI  R17,LOW(16)
000253 ff12      	SBRS R17,2
000254 c007      	RJMP _0x2000070
000255 7f1b      	ANDI R17,LOW(251)
000256 935a      	ST   -Y,R21
000257 940e 02d4 	CALL SUBOPT_0x4
000259 3040      	CPI  R20,0
00025a f009      	BREQ _0x2000071
00025b 5041      	SUBI R20,LOW(1)
                 _0x2000071:
                 _0x2000070:
                 _0x200006F:
                 _0x2000067:
00025c 940e 02c7 	CALL SUBOPT_0x2
00025e 3040      	CPI  R20,0
00025f f009      	BREQ _0x2000072
000260 5041      	SUBI R20,LOW(1)
                 _0x2000072:
                 _0x200006C:
000261 5021      	SUBI R18,LOW(1)
000262 85a8      	LDD  R26,Y+8
000263 85b9      	LDD  R27,Y+8+1
000264 9712      	SBIW R26,2
000265 f008      	BRLO _0x200005F
000266 cfb5      	RJMP _0x200005E
                 _0x200005F:
                 _0x200005C:
000267 ff10      	SBRS R17,0
000268 c008      	RJMP _0x2000073
                 _0x2000074:
000269 3040      	CPI  R20,0
00026a f031      	BREQ _0x2000076
00026b 5041      	SUBI R20,LOW(1)
00026c e2e0      	LDI  R30,LOW(32)
00026d 93ea      	ST   -Y,R30
00026e 940e 02d4 	CALL SUBOPT_0x4
000270 cff8      	RJMP _0x2000074
                 _0x2000076:
                 _0x2000073:
                 _0x2000077:
                 _0x2000036:
                 _0x20000D2:
000271 e000      	LDI  R16,LOW(0)
                 _0x2000021:
000272 cee0      	RJMP _0x200001C
                 _0x200001E:
000273 85ac      	LDD  R26,Y+12
000274 85bd      	LDD  R27,Y+12+1
000275 940e 0336 	CALL __GETW1P
000277 940e 034a 	CALL __LOADLOCR6
000279 9664      	ADIW R28,20
00027a 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
00027b 92ff      	PUSH R15
00027c 2ef8      	MOV  R15,R24
00027d 9726      	SBIW R28,6
00027e 931a      	ST   -Y,R17
00027f 930a      	ST   -Y,R16
000280 01de      	MOVW R26,R28
000281 9614      	ADIW R26,4
000282 940e 02f6 	CALL __ADDW2R15
000284 018d      	MOVW R16,R26
000285 e0e0      	LDI  R30,LOW(0)
000286 83ec      	STD  Y+4,R30
000287 83ed      	STD  Y+4+1,R30
000288 83ee      	STD  Y+6,R30
000289 83ef      	STD  Y+6+1,R30
00028a 01de      	MOVW R26,R28
00028b 9618      	ADIW R26,8
00028c 940e 02f6 	CALL __ADDW2R15
00028e 940e 0336 	CALL __GETW1P
000290 93fa      	ST   -Y,R31
000291 93ea      	ST   -Y,R30
000292 931a      	ST   -Y,R17
000293 930a      	ST   -Y,R16
000294 e3ea      	LDI  R30,LOW(_put_usart_G100)
000295 e0f1      	LDI  R31,HIGH(_put_usart_G100)
000296 93fa      	ST   -Y,R31
000297 93ea      	ST   -Y,R30
000298 01de      	MOVW R26,R28
000299 9618      	ADIW R26,8
00029a deac      	RCALL __print_G100
00029b 8119      	LDD  R17,Y+1
00029c 8108      	LDD  R16,Y+0
00029d 9628      	ADIW R28,8
00029e 90ff      	POP  R15
00029f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002a0 93ba      	ST   -Y,R27
0002a1 93aa      	ST   -Y,R26
0002a2 91a9          ld   r26,y+
0002a3 91b9          ld   r27,y+
0002a4 27ee          clr  r30
0002a5 27ff          clr  r31
                 strlen0:
0002a6 916d          ld   r22,x+
0002a7 2366          tst  r22
0002a8 f011          breq strlen1
0002a9 9631          adiw r30,1
0002aa cffb          rjmp strlen0
                 strlen1:
0002ab 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0002ac 93ba      	ST   -Y,R27
0002ad 93aa      	ST   -Y,R26
0002ae 27aa          clr  r26
0002af 27bb          clr  r27
0002b0 91e9          ld   r30,y+
0002b1 91f9          ld   r31,y+
                 strlenf0:
0002b2 9005      	lpm  r0,z+
0002b3 2000          tst  r0
0002b4 f011          breq strlenf1
0002b5 9611          adiw r26,1
0002b6 cffb          rjmp strlenf0
                 strlenf1:
0002b7 01fd          movw r30,r26
0002b8 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _DCEnt:
000a00           	.BYTE 0x2
                 _lectura:
000a02           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0002b9 93fa      	ST   -Y,R31
0002ba 93ea      	ST   -Y,R30
0002bb e080      	LDI  R24,0
0002bc 940e 027b 	CALL _printf
0002be 9622      	ADIW R28,2
0002bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0002c0 940e 033e 	CALL __PUTPARD1
0002c2 e084      	LDI  R24,4
0002c3 940e 027b 	CALL _printf
0002c5 9626      	ADIW R28,6
0002c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
0002c7 933a      	ST   -Y,R19
0002c8 85ad      	LDD  R26,Y+13
0002c9 85be      	LDD  R27,Y+13+1
0002ca 85ef      	LDD  R30,Y+15
0002cb 89f8      	LDD  R31,Y+15+1
0002cc 9509      	ICALL
0002cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0002ce 89e8      	LDD  R30,Y+16
0002cf 89f9      	LDD  R31,Y+16+1
0002d0 9734      	SBIW R30,4
0002d1 8be8      	STD  Y+16,R30
0002d2 8bf9      	STD  Y+16+1,R31
0002d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0002d4 85ad      	LDD  R26,Y+13
0002d5 85be      	LDD  R27,Y+13+1
0002d6 85ef      	LDD  R30,Y+15
0002d7 89f8      	LDD  R31,Y+15+1
0002d8 9509      	ICALL
0002d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0002da 89a8      	LDD  R26,Y+16
0002db 89b9      	LDD  R27,Y+16+1
0002dc 9614      	ADIW R26,4
0002dd 940e 0336 	CALL __GETW1P
0002df 83ee      	STD  Y+6,R30
0002e0 83ff      	STD  Y+6+1,R31
0002e1 81ae      	LDD  R26,Y+6
0002e2 81bf      	LDD  R27,Y+6+1
0002e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
0002e4 89a8      	LDD  R26,Y+16
0002e5 89b9      	LDD  R27,Y+16+1
0002e6 9614      	ADIW R26,4
0002e7 940e 0336 	CALL __GETW1P
0002e9 87ea      	STD  Y+10,R30
0002ea 87fb      	STD  Y+10+1,R31
0002eb 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002ec 9610      	adiw r26,0
0002ed f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002ee ea80     +LDI R24 , LOW ( 0xFA0 )
0002ef e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0002f0 9701     +SBIW R24 , 1
0002f1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0002f2 95a8      	wdr
0002f3 9711      	sbiw r26,1
0002f4 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002f5 9508      	ret
                 
                 __ADDW2R15:
0002f6 2400      	CLR  R0
0002f7 0daf      	ADD  R26,R15
0002f8 1db0      	ADC  R27,R0
0002f9 9508      	RET
                 
                 __ANEGW1:
0002fa 95f1      	NEG  R31
0002fb 95e1      	NEG  R30
0002fc 40f0      	SBCI R31,0
0002fd 9508      	RET
                 
                 __CWD1:
0002fe 2f6f      	MOV  R22,R31
0002ff 0f66      	ADD  R22,R22
000300 0b66      	SBC  R22,R22
000301 2f76      	MOV  R23,R22
000302 9508      	RET
                 
                 __MULW12U:
000303 9ffa      	MUL  R31,R26
000304 2df0      	MOV  R31,R0
000305 9feb      	MUL  R30,R27
000306 0df0      	ADD  R31,R0
000307 9fea      	MUL  R30,R26
000308 2de0      	MOV  R30,R0
000309 0df1      	ADD  R31,R1
00030a 9508      	RET
                 
                 __MULW12:
00030b d01c      	RCALL __CHKSIGNW
00030c dff6      	RCALL __MULW12U
00030d f40e      	BRTC __MULW121
00030e dfeb      	RCALL __ANEGW1
                 __MULW121:
00030f 9508      	RET
                 
                 __DIVW21U:
000310 2400      	CLR  R0
000311 2411      	CLR  R1
000312 e190      	LDI  R25,16
                 __DIVW21U1:
000313 0faa      	LSL  R26
000314 1fbb      	ROL  R27
000315 1c00      	ROL  R0
000316 1c11      	ROL  R1
000317 1a0e      	SUB  R0,R30
000318 0a1f      	SBC  R1,R31
000319 f418      	BRCC __DIVW21U2
00031a 0e0e      	ADD  R0,R30
00031b 1e1f      	ADC  R1,R31
00031c c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00031d 60a1      	SBR  R26,1
                 __DIVW21U3:
00031e 959a      	DEC  R25
00031f f799      	BRNE __DIVW21U1
000320 01fd      	MOVW R30,R26
000321 01d0      	MOVW R26,R0
000322 9508      	RET
                 
                 __DIVW21:
000323 d004      	RCALL __CHKSIGNW
000324 dfeb      	RCALL __DIVW21U
000325 f40e      	BRTC __DIVW211
000326 dfd3      	RCALL __ANEGW1
                 __DIVW211:
000327 9508      	RET
                 
                 __CHKSIGNW:
000328 94e8      	CLT
000329 fff7      	SBRS R31,7
00032a c002      	RJMP __CHKSW1
00032b dfce      	RCALL __ANEGW1
00032c 9468      	SET
                 __CHKSW1:
00032d ffb7      	SBRS R27,7
00032e c006      	RJMP __CHKSW2
00032f 95a0      	COM  R26
000330 95b0      	COM  R27
000331 9611      	ADIW R26,1
000332 f800      	BLD  R0,0
000333 9403      	INC  R0
000334 fa00      	BST  R0,0
                 __CHKSW2:
000335 9508      	RET
                 
                 __GETW1P:
000336 91ed      	LD   R30,X+
000337 91fc      	LD   R31,X
000338 9711      	SBIW R26,1
000339 9508      	RET
                 
                 __GETW1PF:
00033a 9005      	LPM  R0,Z+
00033b 91f4      	LPM  R31,Z
00033c 2de0      	MOV  R30,R0
00033d 9508      	RET
                 
                 __PUTPARD1:
00033e 937a      	ST   -Y,R23
00033f 936a      	ST   -Y,R22
000340 93fa      	ST   -Y,R31
000341 93ea      	ST   -Y,R30
000342 9508      	RET
                 
                 __SAVELOCR6:
000343 935a      	ST   -Y,R21
                 __SAVELOCR5:
000344 934a      	ST   -Y,R20
                 __SAVELOCR4:
000345 933a      	ST   -Y,R19
                 __SAVELOCR3:
000346 932a      	ST   -Y,R18
                 __SAVELOCR2:
000347 931a      	ST   -Y,R17
000348 930a      	ST   -Y,R16
000349 9508      	RET
                 
                 __LOADLOCR6:
00034a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00034b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00034c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00034d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00034e 8119      	LDD  R17,Y+1
00034f 8108      	LD   R16,Y
000350 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega2560 register use summary:
r0 :  18 r1 :   5 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  20 r17:  29 r18:   8 r19:  27 r20:  17 r21:   9 r22:  10 r23:   3 
r24:  13 r25:   4 r26:  62 r27:  31 r28:  12 r29:   1 r30: 159 r31:  63 
x  :  12 y  : 131 z  :   6 
Registers used: 22 out of 35 (62.9%)

ATmega2560 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   6 
adiw  :  18 and   :   0 andi  :   9 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  15 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :  23 brpl  :   1 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  40 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   3 cpc   :   1 cpi   :  29 cpse  :   0 dec   :   3 des   :   0 
eicall:   0 eijmp :   0 elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   2 ijmp  :   0 in    :   0 inc   :   1 jmp   :  58 
ld    :  15 ldd   :  57 ldi   :  83 lds   :   9 lpm   :   7 lsl   :   1 
lsr   :   0 mov   :  15 movw  :   8 mul   :   4 muls  :   0 mulsu :   0 
neg   :   2 nop   :   0 or    :   0 ori   :  10 out   :  10 pop   :   1 
push  :   1 rcall :  10 ret   :  27 reti  :   0 rjmp  :  56 rol   :   3 
ror   :   0 sbc   :   3 sbci  :   1 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :  10 sbr   :   1 sbrc  :   2 sbrs  :  12 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   1 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  44 std   :  28 sts   :  23 
sub   :   2 subi  :  13 swap  :   0 tst   :   3 wdr   :   1 
Instructions used: 57 out of 119 (47.9%)

ATmega2560 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006a2   1656     42   1698  262144   0.6%
[.dseg] 0x000200 0x000a04      0      4      4    8192   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 1 warnings
