
AVRASM ver. 2.1.30  C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\Cronometro\Debug\List\cronometro.asm Tue Apr 13 12:47:26 2021

C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\Cronometro\Debug\List\cronometro.asm(1085): warning: Register r4 already defined by the .DEF directive
C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\Cronometro\Debug\List\cronometro.asm(1086): warning: Register r3 already defined by the .DEF directive
C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\Cronometro\Debug\List\cronometro.asm(1087): warning: Register r6 already defined by the .DEF directive
C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\Cronometro\Debug\List\cronometro.asm(1088): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.43 Evaluation
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _cursor=R4
                 	.DEF _decimas=R3
                 	.DEF _seg=R6
                 	.DEF _min=R5
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000034 2710
000035 03e8
000036 0064
000037 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000038 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000039 1000
00003a 0100
00003b 0010
00003c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00003d 0000
00003e 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
00003f 0303
000040 0203
000041 0c02
000042 0800      	.DB  0x3,0x3,0x3,0x2,0x2,0xC,0x0,0x8
000043 0100
000044 0600      	.DB  0x0,0x1,0x0,0x6
                 _0x22:
000045 0e0e
000046 050e
000047 0406
000048 110a      	.DB  0xE,0xE,0xE,0x5,0x6,0x4,0xA,0x11
                 _0x23:
000049 0e0e
00004a 050e
00004b 0406
00004c 140a      	.DB  0xE,0xE,0xE,0x5,0x6,0x4,0xA,0x14
                 _0x24:
00004d 0000
00004e 1c02
00004f 0800
C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\Cronometro\Debug\List\cronometro.asm(1145): warning: .cseg .db misalignment - padding zero byte
000050 0014      	.DB  0x0,0x0,0x2,0x1C,0x0,0x8,0x14
                 _0x25:
000051 0000
000052 1e00
000053 0400
C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\Cronometro\Debug\List\cronometro.asm(1147): warning: .cseg .db misalignment - padding zero byte
000054 001a      	.DB  0x0,0x0,0x0,0x1E,0x0,0x4,0x1A
                 _0x0:
000055 3025
000056 6932
000057 253a
000058 3230      	.DB  0x25,0x30,0x32,0x69,0x3A,0x25,0x30,0x32
000059 2e69
00005a 6925
C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\Cronometro\Debug\List\cronometro.asm(1150): warning: .cseg .db misalignment - padding zero byte
00005b 0000      	.DB  0x69,0x2E,0x25,0x69,0x0
                 
                 __GLOBAL_INI_TBL:
00005c 0004      	.DW  0x04
00005d 0003      	.DW  0x03
00005e 007a      	.DW  __REG_VARS*2
                 
00005f 0008      	.DW  0x08
000060 0308      	.DW  _mono0
000061 008a      	.DW  _0x22*2
                 
000062 0008      	.DW  0x08
000063 0310      	.DW  _mono1
000064 0092      	.DW  _0x23*2
                 
000065 0007      	.DW  0x07
000066 0318      	.DW  _aire0
000067 009a      	.DW  _0x24*2
                 
000068 0007      	.DW  0x07
000069 0320      	.DW  _aire1
00006a 00a2      	.DW  _0x25*2
                 
                 _0xFFFFFFFF:
00006b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006c 94f8      	CLI
00006d 27ee      	CLR  R30
00006e bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006f e0f1      	LDI  R31,1
000070 bff5      	OUT  MCUCR,R31
000071 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000072 e08d      	LDI  R24,(14-2)+1
000073 e0a2      	LDI  R26,2
000074 27bb      	CLR  R27
                 __CLEAR_REG:
000075 93ed      	ST   X+,R30
000076 958a      	DEC  R24
000077 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000078 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000079 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007a e0a0      	LDI  R26,LOW(__SRAM_START)
00007b e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00007c 93ed      	ST   X+,R30
00007d 9701      	SBIW R24,1
00007e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007f ebe8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000080 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000081 9185      	LPM  R24,Z+
000082 9195      	LPM  R25,Z+
000083 9700      	SBIW R24,0
000084 f061      	BREQ __GLOBAL_INI_END
000085 91a5      	LPM  R26,Z+
000086 91b5      	LPM  R27,Z+
000087 9005      	LPM  R0,Z+
000088 9015      	LPM  R1,Z+
000089 01bf      	MOVW R22,R30
00008a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00008b 9005      	LPM  R0,Z+
00008c 920d      	ST   X+,R0
00008d 9701      	SBIW R24,1
00008e f7e1      	BRNE __GLOBAL_INI_LOOP
00008f 01fb      	MOVW R30,R22
000090 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000091 e0e0      	LDI  R30,__GPIOR0_INIT
000092 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000093 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000094 bfed      	OUT  SPL,R30
000095 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000096 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000097 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000098 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000099 940c 014b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                     .equ __lcd_port=0x05
                     .equ __lcd_EN=1
                     .equ __lcd_RS=0
                     .equ __lcd_D4=2
                     .equ __lcd_D5=3
                     .equ __lcd_D6=4
                     .equ __lcd_D7=5
                 ; 0000 000F    #endasm
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.CSEG
                 _SetupLCD:
                 ; .FSTART _SetupLCD
00009b 972c      	SBIW R28,12
00009c e08c      	LDI  R24,12
                +
00009d e060     +LDI R22 , LOW ( 0 )
00009e e070     +LDI R23 , HIGH ( 0 )
                 	__GETWRN 22,23,0
00009f e7ee      	LDI  R30,LOW(_0x3*2)
0000a0 e0f0      	LDI  R31,HIGH(_0x3*2)
0000a1 d2e6      	RCALL __INITLOCB
0000a2 931a      	ST   -Y,R17
                 ;	TableSetup -> Y+1
                 ;	i -> R17
                 ; 0000 0013     SBI __lcd_port-1,__lcd_EN
0000a3 9a21          SBI __lcd_port-1,__lcd_EN
0000a4 9a20          SBI __lcd_port-1,__lcd_RS
0000a5 9a22          SBI __lcd_port-1,__lcd_D4
0000a6 9a23          SBI __lcd_port-1,__lcd_D5
0000a7 9a24          SBI __lcd_port-1,__lcd_D6
0000a8 9a25          SBI __lcd_port-1,__lcd_D7
0000a9 e3a2      	LDI  R26,LOW(50)
0000aa e0b0      	LDI  R27,0
0000ab d301      	RCALL _delay_ms
0000ac e010      	LDI  R17,LOW(0)
                 _0x5:
0000ad 301c      	CPI  R17,12
0000ae f470      	BRSH _0x6
0000af e0a2      	LDI  R26,LOW(2)
0000b0 e0b0      	LDI  R27,0
0000b1 d2fb      	RCALL _delay_ms
0000b2 2fe1      	MOV  R30,R17
0000b3 e0f0      	LDI  R31,0
0000b4 01de      	MOVW R26,R28
0000b5 9611      	ADIW R26,1
0000b6 0fae      	ADD  R26,R30
0000b7 1fbf      	ADC  R27,R31
0000b8 91ac      	LD   R26,X
0000b9 d00d      	RCALL _SendDataBitsLCD
0000ba d009      	RCALL _PulseEn
0000bb 5f1f      	SUBI R17,-1
0000bc cff0      	RJMP _0x5
                 _0x6:
0000bd e0ec      	LDI  R30,LOW(12)
0000be 2e4e      	MOV  R4,R30
0000bf 2da4      	MOV  R26,R4
0000c0 d01e      	RCALL _WriteComandLCD
0000c1 8118      	LDD  R17,Y+0
0000c2 962d      	ADIW R28,13
0000c3 9508      	RET
                 ; .FEND
                 _PulseEn:
                 ; .FSTART _PulseEn
0000c4 9a29          SBI __lcd_port,__lcd_EN  // EN=1;
0000c5 9829          CBI __lcd_port,__lcd_EN // EN=0;
0000c6 9508      	RET
                 ; .FEND
                 _SendDataBitsLCD:
                 ; .FSTART _SendDataBitsLCD
0000c7 931a      	ST   -Y,R17
0000c8 2f1a      	MOV  R17,R26
                 ;	dato -> R17
0000c9 ff13      	SBRS R17,3
0000ca c002      	RJMP _0x7
0000cb 9a2d      	SBI __lcd_port,__lcd_D7
0000cc c001      	RJMP _0x8
                 _0x7:
0000cd 982d      	CBI __lcd_port,__lcd_D7
                 _0x8:
0000ce ff12      	SBRS R17,2
0000cf c002      	RJMP _0x9
0000d0 9a2c      	SBI __lcd_port,__lcd_D6
0000d1 c001      	RJMP _0xA
                 _0x9:
0000d2 982c      	CBI __lcd_port,__lcd_D6
                 _0xA:
0000d3 ff11      	SBRS R17,1
0000d4 c002      	RJMP _0xB
0000d5 9a2b      	SBI __lcd_port,__lcd_D5
0000d6 c001      	RJMP _0xC
                 _0xB:
0000d7 982b      	CBI __lcd_port,__lcd_D5
                 _0xC:
0000d8 ff10      	SBRS R17,0
0000d9 c002      	RJMP _0xD
0000da 9a2a      	SBI __lcd_port,__lcd_D4
0000db c001      	RJMP _0xE
                 _0xD:
0000dc 982a      	CBI __lcd_port,__lcd_D4
                 _0xE:
0000dd 9119      	LD   R17,Y+
0000de 9508      	RET
                 ; .FEND
                 _WriteComandLCD:
                 ; .FSTART _WriteComandLCD
0000df 931a      	ST   -Y,R17
0000e0 930a      	ST   -Y,R16
0000e1 2f0a      	MOV  R16,R26
                 ;	Comando -> R16
                 ;	tempComando -> R17
0000e2 9828      	CBI __lcd_port,__lcd_RS
0000e3 c004      	RJMP _0x2060002
                 ; .FEND
                 _CharLCD:
                 ; .FSTART _CharLCD
0000e4 931a      	ST   -Y,R17
0000e5 930a      	ST   -Y,R16
0000e6 2f0a      	MOV  R16,R26
                 ;	dato -> R16
                 ;	tempdato -> R17
0000e7 9a28      	SBI __lcd_port,__lcd_RS
                 _0x2060002:
0000e8 e0a2      	LDI  R26,LOW(2)
0000e9 e0b0      	LDI  R27,0
0000ea d2c2      	RCALL _delay_ms
0000eb 2fe0      	MOV  R30,R16
0000ec 7fe0      	ANDI R30,LOW(0xF0)
0000ed 2f1e      	MOV  R17,R30
0000ee 9512      	SWAP R17
0000ef 701f      	ANDI R17,0xF
0000f0 2fa1      	MOV  R26,R17
0000f1 dfd5      	RCALL _SendDataBitsLCD
0000f2 dfd1      	RCALL _PulseEn
0000f3 2fe0      	MOV  R30,R16
0000f4 70ef      	ANDI R30,LOW(0xF)
0000f5 2f1e      	MOV  R17,R30
0000f6 2fa1      	MOV  R26,R17
0000f7 dfcf      	RCALL _SendDataBitsLCD
0000f8 e0a2      	LDI  R26,LOW(2)
0000f9 e0b0      	LDI  R27,0
0000fa d2b2      	RCALL _delay_ms
0000fb dfc8      	RCALL _PulseEn
0000fc 9109      	LD   R16,Y+
0000fd 9119      	LD   R17,Y+
0000fe 9508      	RET
                 ; .FEND
                 ;	Mensaje -> R18,R19
                 ;	i -> R17
                 ;	Mensaje -> R20,R21
                 ;	tiempo -> R18,R19
                 ;	i -> R17
                 _StringLCDVar:
                 ; .FSTART _StringLCDVar
0000ff d27c      	RCALL __SAVELOCR4
000100 019d      	MOVW R18,R26
                 ;	Mensaje -> R18,R19
                 ;	i -> R17
000101 e010      	LDI  R17,LOW(0)
                 _0x16:
000102 2fe1      	MOV  R30,R17
000103 5f1f      	SUBI R17,-1
000104 e0f0      	LDI  R31,0
000105 0fe2      	ADD  R30,R18
000106 1ff3      	ADC  R31,R19
000107 81a0      	LD   R26,Z
000108 dfdb      	RCALL _CharLCD
000109 d23a      	RCALL SUBOPT_0x0
00010a 91ec      	LD   R30,X
00010b 30e0      	CPI  R30,0
00010c f7a9      	BRNE _0x16
00010d d275      	RCALL __LOADLOCR4
00010e 9624      	ADIW R28,4
00010f 9508      	RET
                 ; .FEND
                 _MoveCursor:
                 ; .FSTART _MoveCursor
000110 931a      	ST   -Y,R17
000111 930a      	ST   -Y,R16
000112 2f1a      	MOV  R17,R26
000113 810a      	LDD  R16,Y+2
                 ;	x -> R16
                 ;	y -> R17
000114 2fe1      	MOV  R30,R17
000115 e0f0      	LDI  R31,0
000116 9730      	SBIW R30,0
000117 f419      	BRNE _0x1B
000118 2fa0      	MOV  R26,R16
000119 58a0      	SUBI R26,-LOW(128)
00011a c014      	RJMP _0x37
                 _0x1B:
00011b 30e1      	CPI  R30,LOW(0x1)
00011c e0a0      	LDI  R26,HIGH(0x1)
00011d 07fa      	CPC  R31,R26
00011e f419      	BRNE _0x1C
00011f 2fa0      	MOV  R26,R16
000120 54a0      	SUBI R26,-LOW(192)
000121 c00d      	RJMP _0x37
                 _0x1C:
000122 30e2      	CPI  R30,LOW(0x2)
000123 e0a0      	LDI  R26,HIGH(0x2)
000124 07fa      	CPC  R31,R26
000125 f419      	BRNE _0x1D
000126 2fa0      	MOV  R26,R16
000127 56ac      	SUBI R26,-LOW(148)
000128 c006      	RJMP _0x37
                 _0x1D:
000129 30e3      	CPI  R30,LOW(0x3)
00012a e0a0      	LDI  R26,HIGH(0x3)
00012b 07fa      	CPC  R31,R26
00012c f419      	BRNE _0x1A
00012d 2fa0      	MOV  R26,R16
00012e 52ac      	SUBI R26,-LOW(212)
                 _0x37:
00012f dfaf      	RCALL _WriteComandLCD
                 _0x1A:
000130 8119      	LDD  R17,Y+1
000131 8108      	LDD  R16,Y+0
000132 9623      	ADIW R28,3
000133 9508      	RET
                 ; .FEND
                 _CreateChar:
                 ; .FSTART _CreateChar
000134 d247      	RCALL __SAVELOCR4
000135 019d      	MOVW R18,R26
000136 810c      	LDD  R16,Y+4
                 ;	NoCaracter -> R16
                 ;	datos -> R18,R19
                 ;	i -> R17
000137 2fe0      	MOV  R30,R16
000138 0fee      	LSL  R30
000139 0fee      	LSL  R30
00013a 0fee      	LSL  R30
00013b 5ce0      	SUBI R30,-LOW(64)
00013c 2fae      	MOV  R26,R30
00013d dfa1      	RCALL _WriteComandLCD
00013e e010      	LDI  R17,LOW(0)
                 _0x20:
00013f 3018      	CPI  R17,8
000140 f428      	BRSH _0x21
000141 d202      	RCALL SUBOPT_0x0
000142 91ac      	LD   R26,X
000143 dfa0      	RCALL _CharLCD
000144 5f1f      	SUBI R17,-1
000145 cff9      	RJMP _0x20
                 _0x21:
000146 e8a0      	LDI  R26,LOW(128)
000147 df97      	RCALL _WriteComandLCD
000148 d23a      	RCALL __LOADLOCR4
000149 9625      	ADIW R28,5
00014a 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 ;void main(void)
                 ; 0000 0021 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0022 //Pull ups en PDO y PD1
                 ; 0000 0023 PORTD.0 = 1;
00014b 9a58      	SBI  0xB,0
                 ; 0000 0024 PORTD.1 = 1;
00014c 9a59      	SBI  0xB,1
                 ; 0000 0025 //Necesario para iniciar en el LCD
                 ; 0000 0026 SetupLCD();
00014d df4d      	RCALL _SetupLCD
                 ; 0000 0027 CreateChar(0,mono0);
00014e e0e0      	LDI  R30,LOW(0)
00014f 93ea      	ST   -Y,R30
000150 e0a8      	LDI  R26,LOW(_mono0)
000151 e0b3      	LDI  R27,HIGH(_mono0)
000152 dfe1      	RCALL _CreateChar
                 ; 0000 0028 CreateChar(1,mono1);
000153 e0e1      	LDI  R30,LOW(1)
000154 93ea      	ST   -Y,R30
000155 e1a0      	LDI  R26,LOW(_mono1)
000156 e0b3      	LDI  R27,HIGH(_mono1)
000157 dfdc      	RCALL _CreateChar
                 ; 0000 0029 CreateChar(2,aire0);
000158 e0e2      	LDI  R30,LOW(2)
000159 93ea      	ST   -Y,R30
00015a e1a8      	LDI  R26,LOW(_aire0)
00015b e0b3      	LDI  R27,HIGH(_aire0)
00015c dfd7      	RCALL _CreateChar
                 ; 0000 002A CreateChar(3,aire1);
00015d e0e3      	LDI  R30,LOW(3)
00015e 93ea      	ST   -Y,R30
00015f e2a0      	LDI  R26,LOW(_aire1)
000160 e0b3      	LDI  R27,HIGH(_aire1)
000161 dfd2      	RCALL _CreateChar
                 ; 0000 002B 
                 ; 0000 002C while (1)
                 _0x2A:
                 ; 0000 002D {
                 ; 0000 002E //Desplegar tiempo en el LCD
                 ; 0000 002F sprintf(Cadena,"%02i:%02i.%i",min, seg, decimas);
000162 e0e0      	LDI  R30,LOW(_Cadena)
000163 e0f3      	LDI  R31,HIGH(_Cadena)
000164 93fa      	ST   -Y,R31
000165 93ea      	ST   -Y,R30
                +
000166 eaea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000167 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000168 93fa      	ST   -Y,R31
000169 93ea      	ST   -Y,R30
00016a 2de5      	MOV  R30,R5
00016b d1dd      	RCALL SUBOPT_0x1
00016c 2de6      	MOV  R30,R6
00016d d1db      	RCALL SUBOPT_0x1
00016e 2de3      	MOV  R30,R3
00016f d1d9      	RCALL SUBOPT_0x1
000170 e08c      	LDI  R24,12
000171 d188      	RCALL _sprintf
000172 9660      	ADIW R28,16
                 ; 0000 0030 MoveCursor(4,0);
000173 e0e4      	LDI  R30,LOW(4)
000174 93ea      	ST   -Y,R30
000175 e0a0      	LDI  R26,LOW(0)
000176 df99      	RCALL _MoveCursor
                 ; 0000 0031 StringLCDVar(Cadena);
000177 e0a0      	LDI  R26,LOW(_Cadena)
000178 e0b3      	LDI  R27,HIGH(_Cadena)
000179 df85      	RCALL _StringLCDVar
                 ; 0000 0032 
                 ; 0000 0033 //Retardo de 1 decima de seg (0.1 seg)
                 ; 0000 0034 delay_ms(62);
00017a e3ae      	LDI  R26,LOW(62)
00017b e0b0      	LDI  R27,0
00017c d230      	RCALL _delay_ms
                 ; 0000 0035 delay_us(350);
                +
00017d e785     +LDI R24 , LOW ( 117 )
                +__DELAY_USB_LOOP :
00017e 958a     +DEC R24
00017f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 117
                 ; 0000 0036 
                 ; 0000 0037 //Actualizar tiempo
                 ; 0000 0038 if (PIND.0 == 0)
000180 9b48      	SBIS 0x9,0
                 ; 0000 0039 decimas++;
000181 9433      	INC  R3
                 ; 0000 003A if (decimas == 10)
000182 e0ea      	LDI  R30,LOW(10)
000183 15e3      	CP   R30,R3
000184 f451      	BRNE _0x2E
                 ; 0000 003B {
                 ; 0000 003C decimas = 0;
000185 2433      	CLR  R3
                 ; 0000 003D seg++;
000186 9463      	INC  R6
                 ; 0000 003E if (seg == 60)
000187 e3ec      	LDI  R30,LOW(60)
000188 15e6      	CP   R30,R6
000189 f429      	BRNE _0x2F
                 ; 0000 003F {
                 ; 0000 0040 seg = 0;
00018a 2466      	CLR  R6
                 ; 0000 0041 min++;
00018b 9453      	INC  R5
                 ; 0000 0042 if (min == 60)
00018c 15e5      	CP   R30,R5
00018d f409      	BRNE _0x30
                 ; 0000 0043 min = 0;
00018e 2455      	CLR  R5
                 ; 0000 0044 }
                 _0x30:
                 ; 0000 0045 }
                 _0x2F:
                 ; 0000 0046 
                 ; 0000 0047 //Boton reset regresa todo a 0
                 ; 0000 0048 if (PIND.1 == 0)
                 _0x2E:
00018f 9949      	SBIC 0x9,1
000190 c003      	RJMP _0x31
                 ; 0000 0049 {
                 ; 0000 004A decimas = 0;
000191 2433      	CLR  R3
                 ; 0000 004B seg = 0;
000192 2466      	CLR  R6
                 ; 0000 004C min = 0;
000193 2455      	CLR  R5
                 ; 0000 004D }
                 ; 0000 004E 
                 ; 0000 004F //Animacion NO DELAYS
                 ; 0000 0050 
                 ; 0000 0051 if (decimas == 5)
                 _0x31:
000194 e0e5      	LDI  R30,LOW(5)
000195 15e3      	CP   R30,R3
000196 f429      	BRNE _0x32
                 ; 0000 0052 {
                 ; 0000 0053 MoveCursor(7,1);
000197 d1b6      	RCALL SUBOPT_0x2
                 ; 0000 0054 CharLCD(0);
000198 e0a0      	LDI  R26,LOW(0)
000199 d1b8      	RCALL SUBOPT_0x3
                 ; 0000 0055 MoveCursor(6,1);
                 ; 0000 0056 CharLCD(2);
00019a e0a2      	LDI  R26,LOW(2)
00019b df48      	RCALL _CharLCD
                 ; 0000 0057 }
                 ; 0000 0058 
                 ; 0000 0059 if (decimas == 0 && 10)
                 _0x32:
00019c 2033      	TST  R3
00019d f419      	BRNE _0x34
00019e e0ea      	LDI  R30,LOW(10)
00019f 30e0      	CPI  R30,0
0001a0 f409      	BRNE _0x35
                 _0x34:
0001a1 c005      	RJMP _0x33
                 _0x35:
                 ; 0000 005A {
                 ; 0000 005B MoveCursor(7,1);
0001a2 d1ab      	RCALL SUBOPT_0x2
                 ; 0000 005C CharLCD(1);
0001a3 e0a1      	LDI  R26,LOW(1)
0001a4 d1ad      	RCALL SUBOPT_0x3
                 ; 0000 005D MoveCursor(6,1);
                 ; 0000 005E CharLCD(3);
0001a5 e0a3      	LDI  R26,LOW(3)
0001a6 df3d      	RCALL _CharLCD
                 ; 0000 005F 
                 ; 0000 0060 }
                 ; 0000 0061 
                 ; 0000 0062 }
                 _0x33:
0001a7 cfba      	RJMP _0x2A
                 ; 0000 0063 }
                 _0x36:
0001a8 cfff      	RJMP _0x36
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0001a9 d1d0      	RCALL __SAVELOCR6
0001aa 019d      	MOVW R18,R26
0001ab 815e      	LDD  R21,Y+6
0001ac 9612      	ADIW R26,2
0001ad d1f2      	RCALL __GETW1P
0001ae 9730      	SBIW R30,0
0001af f0e1      	BREQ _0x2000016
0001b0 01d9      	MOVW R26,R18
0001b1 9614      	ADIW R26,4
0001b2 d1ed      	RCALL __GETW1P
0001b3 018f      	MOVW R16,R30
0001b4 9730      	SBIW R30,0
0001b5 f059      	BREQ _0x2000018
                +
0001b6 3002     +CPI R16 , LOW ( 2 )
0001b7 e0e0     +LDI R30 , HIGH ( 2 )
0001b8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001b9 f060      	BRLO _0x2000019
0001ba 01f8      	MOVW R30,R16
0001bb 9731      	SBIW R30,1
0001bc 018f      	MOVW R16,R30
                +
0001bd 01d9     +MOVW R26 , R18
0001be 9614     +ADIW R26 , 4
0001bf 93ed     +ST X + , R30
0001c0 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2000018:
0001c1 01d9      	MOVW R26,R18
0001c2 9612      	ADIW R26,2
0001c3 d193      	RCALL SUBOPT_0x4
0001c4 9731      	SBIW R30,1
0001c5 8350      	ST   Z,R21
                 _0x2000019:
0001c6 01d9      	MOVW R26,R18
0001c7 d1d8      	RCALL __GETW1P
0001c8 23ff      	TST  R31
0001c9 f00a      	BRMI _0x200001A
0001ca d18c      	RCALL SUBOPT_0x4
                 _0x200001A:
0001cb c005      	RJMP _0x200001B
                 _0x2000016:
0001cc 01d9      	MOVW R26,R18
0001cd efef      	LDI  R30,LOW(65535)
0001ce efff      	LDI  R31,HIGH(65535)
0001cf 93ed      	ST   X+,R30
0001d0 93fc      	ST   X,R31
                 _0x200001B:
0001d1 d1af      	RCALL __LOADLOCR6
0001d2 9627      	ADIW R28,7
0001d3 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0001d4 93ba      	ST   -Y,R27
0001d5 93aa      	ST   -Y,R26
0001d6 9726      	SBIW R28,6
0001d7 d1a2      	RCALL __SAVELOCR6
0001d8 e010      	LDI  R17,0
0001d9 85ac      	LDD  R26,Y+12
0001da 85bd      	LDD  R27,Y+12+1
0001db e0e0      	LDI  R30,LOW(0)
0001dc e0f0      	LDI  R31,HIGH(0)
0001dd 93ed      	ST   X+,R30
0001de 93fc      	ST   X,R31
                 _0x200001C:
0001df 89ea      	LDD  R30,Y+18
0001e0 89fb      	LDD  R31,Y+18+1
0001e1 9631      	ADIW R30,1
0001e2 8bea      	STD  Y+18,R30
0001e3 8bfb      	STD  Y+18+1,R31
0001e4 9731      	SBIW R30,1
0001e5 91e4      	LPM  R30,Z
0001e6 2f2e      	MOV  R18,R30
0001e7 30e0      	CPI  R30,0
0001e8 f409      	BRNE PC+2
0001e9 c109      	RJMP _0x200001E
0001ea 2fe1      	MOV  R30,R17
0001eb 30e0      	CPI  R30,0
0001ec f431      	BRNE _0x2000022
0001ed 3225      	CPI  R18,37
0001ee f411      	BRNE _0x2000023
0001ef e011      	LDI  R17,LOW(1)
0001f0 c001      	RJMP _0x2000024
                 _0x2000023:
0001f1 d16b      	RCALL SUBOPT_0x5
                 _0x2000024:
0001f2 c0ff      	RJMP _0x2000021
                 _0x2000022:
0001f3 30e1      	CPI  R30,LOW(0x1)
0001f4 f4a1      	BRNE _0x2000025
0001f5 3225      	CPI  R18,37
0001f6 f411      	BRNE _0x2000026
0001f7 d165      	RCALL SUBOPT_0x5
0001f8 c0f8      	RJMP _0x20000D2
                 _0x2000026:
0001f9 e012      	LDI  R17,LOW(2)
0001fa e040      	LDI  R20,LOW(0)
0001fb e000      	LDI  R16,LOW(0)
0001fc 322d      	CPI  R18,45
0001fd f411      	BRNE _0x2000027
0001fe e001      	LDI  R16,LOW(1)
0001ff c0f2      	RJMP _0x2000021
                 _0x2000027:
000200 322b      	CPI  R18,43
000201 f411      	BRNE _0x2000028
000202 e24b      	LDI  R20,LOW(43)
000203 c0ee      	RJMP _0x2000021
                 _0x2000028:
000204 3220      	CPI  R18,32
000205 f411      	BRNE _0x2000029
000206 e240      	LDI  R20,LOW(32)
000207 c0ea      	RJMP _0x2000021
                 _0x2000029:
000208 c002      	RJMP _0x200002A
                 _0x2000025:
000209 30e2      	CPI  R30,LOW(0x2)
00020a f439      	BRNE _0x200002B
                 _0x200002A:
00020b e050      	LDI  R21,LOW(0)
00020c e013      	LDI  R17,LOW(3)
00020d 3320      	CPI  R18,48
00020e f411      	BRNE _0x200002C
00020f 6800      	ORI  R16,LOW(128)
000210 c0e1      	RJMP _0x2000021
                 _0x200002C:
000211 c003      	RJMP _0x200002D
                 _0x200002B:
000212 30e3      	CPI  R30,LOW(0x3)
000213 f009      	BREQ PC+2
000214 c0dd      	RJMP _0x2000021
                 _0x200002D:
000215 3320      	CPI  R18,48
000216 f010      	BRLO _0x2000030
000217 332a      	CPI  R18,58
000218 f008      	BRLO _0x2000031
                 _0x2000030:
000219 c007      	RJMP _0x200002F
                 _0x2000031:
00021a e0aa      	LDI  R26,LOW(10)
00021b 9f5a      	MUL  R21,R26
00021c 2d50      	MOV  R21,R0
00021d 2fe2      	MOV  R30,R18
00021e 53e0      	SUBI R30,LOW(48)
00021f 0f5e      	ADD  R21,R30
000220 c0d1      	RJMP _0x2000021
                 _0x200002F:
000221 2fe2      	MOV  R30,R18
000222 36e3      	CPI  R30,LOW(0x63)
000223 f439      	BRNE _0x2000035
000224 d13f      	RCALL SUBOPT_0x6
000225 89e8      	LDD  R30,Y+16
000226 89f9      	LDD  R31,Y+16+1
000227 81a4      	LDD  R26,Z+4
000228 93aa      	ST   -Y,R26
000229 d140      	RCALL SUBOPT_0x7
00022a c0c6      	RJMP _0x2000036
                 _0x2000035:
00022b 37e3      	CPI  R30,LOW(0x73)
00022c f429      	BRNE _0x2000038
00022d d136      	RCALL SUBOPT_0x6
00022e d141      	RCALL SUBOPT_0x8
00022f d0fb      	RCALL _strlen
000230 2f1e      	MOV  R17,R30
000231 c007      	RJMP _0x2000039
                 _0x2000038:
000232 37e0      	CPI  R30,LOW(0x70)
000233 f449      	BRNE _0x200003B
000234 d12f      	RCALL SUBOPT_0x6
000235 d13a      	RCALL SUBOPT_0x8
000236 d100      	RCALL _strlenf
000237 2f1e      	MOV  R17,R30
000238 6008      	ORI  R16,LOW(8)
                 _0x2000039:
000239 6002      	ORI  R16,LOW(2)
00023a 770f      	ANDI R16,LOW(127)
00023b e030      	LDI  R19,LOW(0)
00023c c038      	RJMP _0x200003C
                 _0x200003B:
00023d 36e4      	CPI  R30,LOW(0x64)
00023e f011      	BREQ _0x200003F
00023f 36e9      	CPI  R30,LOW(0x69)
000240 f411      	BRNE _0x2000040
                 _0x200003F:
000241 6004      	ORI  R16,LOW(4)
000242 c002      	RJMP _0x2000041
                 _0x2000040:
000243 37e5      	CPI  R30,LOW(0x75)
000244 f431      	BRNE _0x2000042
                 _0x2000041:
000245 e6e8      	LDI  R30,LOW(_tbl10_G100*2)
000246 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000247 83ee      	STD  Y+6,R30
000248 83ff      	STD  Y+6+1,R31
000249 e015      	LDI  R17,LOW(5)
00024a c00c      	RJMP _0x2000043
                 _0x2000042:
00024b 35e8      	CPI  R30,LOW(0x58)
00024c f411      	BRNE _0x2000045
00024d 6008      	ORI  R16,LOW(8)
00024e c003      	RJMP _0x2000046
                 _0x2000045:
00024f 37e8      	CPI  R30,LOW(0x78)
000250 f009      	BREQ PC+2
000251 c09f      	RJMP _0x2000077
                 _0x2000046:
000252 e7e2      	LDI  R30,LOW(_tbl16_G100*2)
000253 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000254 83ee      	STD  Y+6,R30
000255 83ff      	STD  Y+6+1,R31
000256 e014      	LDI  R17,LOW(4)
                 _0x2000043:
000257 ff02      	SBRS R16,2
000258 c015      	RJMP _0x2000048
000259 d10a      	RCALL SUBOPT_0x6
00025a 89a8      	LDD  R26,Y+16
00025b 89b9      	LDD  R27,Y+16+1
00025c 9614      	ADIW R26,4
00025d 91ed      	LD   R30,X+
00025e 91fd      	LD   R31,X+
00025f 87ea      	STD  Y+10,R30
000260 87fb      	STD  Y+10+1,R31
000261 85ab      	LDD  R26,Y+11
000262 23aa      	TST  R26
000263 f422      	BRPL _0x2000049
000264 d137      	RCALL __ANEGW1
000265 87ea      	STD  Y+10,R30
000266 87fb      	STD  Y+10+1,R31
000267 e24d      	LDI  R20,LOW(45)
                 _0x2000049:
000268 3040      	CPI  R20,0
000269 f011      	BREQ _0x200004A
00026a 5f1f      	SUBI R17,-LOW(1)
00026b c001      	RJMP _0x200004B
                 _0x200004A:
00026c 7f0b      	ANDI R16,LOW(251)
                 _0x200004B:
00026d c007      	RJMP _0x200004C
                 _0x2000048:
00026e d0f5      	RCALL SUBOPT_0x6
00026f 89a8      	LDD  R26,Y+16
000270 89b9      	LDD  R27,Y+16+1
000271 9614      	ADIW R26,4
000272 d12d      	RCALL __GETW1P
000273 87ea      	STD  Y+10,R30
000274 87fb      	STD  Y+10+1,R31
                 _0x200004C:
                 _0x200003C:
000275 fd00      	SBRC R16,0
000276 c010      	RJMP _0x200004D
                 _0x200004E:
000277 1715      	CP   R17,R21
000278 f470      	BRSH _0x2000050
000279 ff07      	SBRS R16,7
00027a c008      	RJMP _0x2000051
00027b ff02      	SBRS R16,2
00027c c004      	RJMP _0x2000052
00027d 7f0b      	ANDI R16,LOW(251)
00027e 2f24      	MOV  R18,R20
00027f 5011      	SUBI R17,LOW(1)
000280 c001      	RJMP _0x2000053
                 _0x2000052:
000281 e320      	LDI  R18,LOW(48)
                 _0x2000053:
000282 c001      	RJMP _0x2000054
                 _0x2000051:
000283 e220      	LDI  R18,LOW(32)
                 _0x2000054:
000284 d0d8      	RCALL SUBOPT_0x5
000285 5051      	SUBI R21,LOW(1)
000286 cff0      	RJMP _0x200004E
                 _0x2000050:
                 _0x200004D:
000287 2f31      	MOV  R19,R17
000288 ff01      	SBRS R16,1
000289 c016      	RJMP _0x2000055
                 _0x2000056:
00028a 3030      	CPI  R19,0
00028b f099      	BREQ _0x2000058
00028c ff03      	SBRS R16,3
00028d c006      	RJMP _0x2000059
00028e 81ee      	LDD  R30,Y+6
00028f 81ff      	LDD  R31,Y+6+1
000290 9125      	LPM  R18,Z+
000291 83ee      	STD  Y+6,R30
000292 83ff      	STD  Y+6+1,R31
000293 c005      	RJMP _0x200005A
                 _0x2000059:
000294 81ae      	LDD  R26,Y+6
000295 81bf      	LDD  R27,Y+6+1
000296 912d      	LD   R18,X+
000297 83ae      	STD  Y+6,R26
000298 83bf      	STD  Y+6+1,R27
                 _0x200005A:
000299 d0c3      	RCALL SUBOPT_0x5
00029a 3050      	CPI  R21,0
00029b f009      	BREQ _0x200005B
00029c 5051      	SUBI R21,LOW(1)
                 _0x200005B:
00029d 5031      	SUBI R19,LOW(1)
00029e cfeb      	RJMP _0x2000056
                 _0x2000058:
00029f c048      	RJMP _0x200005C
                 _0x2000055:
                 _0x200005E:
0002a0 e320      	LDI  R18,LOW(48)
0002a1 81ee      	LDD  R30,Y+6
0002a2 81ff      	LDD  R31,Y+6+1
0002a3 d100      	RCALL __GETW1PF
0002a4 87e8      	STD  Y+8,R30
0002a5 87f9      	STD  Y+8+1,R31
0002a6 81ee      	LDD  R30,Y+6
0002a7 81ff      	LDD  R31,Y+6+1
0002a8 9632      	ADIW R30,2
0002a9 83ee      	STD  Y+6,R30
0002aa 83ff      	STD  Y+6+1,R31
                 _0x2000060:
0002ab 85e8      	LDD  R30,Y+8
0002ac 85f9      	LDD  R31,Y+8+1
0002ad 85aa      	LDD  R26,Y+10
0002ae 85bb      	LDD  R27,Y+10+1
0002af 17ae      	CP   R26,R30
0002b0 07bf      	CPC  R27,R31
0002b1 f050      	BRLO _0x2000062
0002b2 5f2f      	SUBI R18,-LOW(1)
0002b3 85a8      	LDD  R26,Y+8
0002b4 85b9      	LDD  R27,Y+8+1
0002b5 85ea      	LDD  R30,Y+10
0002b6 85fb      	LDD  R31,Y+10+1
0002b7 1bea      	SUB  R30,R26
0002b8 0bfb      	SBC  R31,R27
0002b9 87ea      	STD  Y+10,R30
0002ba 87fb      	STD  Y+10+1,R31
0002bb cfef      	RJMP _0x2000060
                 _0x2000062:
0002bc 332a      	CPI  R18,58
0002bd f028      	BRLO _0x2000063
0002be ff03      	SBRS R16,3
0002bf c002      	RJMP _0x2000064
0002c0 5f29      	SUBI R18,-LOW(7)
0002c1 c001      	RJMP _0x2000065
                 _0x2000064:
0002c2 5d29      	SUBI R18,-LOW(39)
                 _0x2000065:
                 _0x2000063:
0002c3 fd04      	SBRC R16,4
0002c4 c019      	RJMP _0x2000067
0002c5 3321      	CPI  R18,49
0002c6 f420      	BRSH _0x2000069
0002c7 85a8      	LDD  R26,Y+8
0002c8 85b9      	LDD  R27,Y+8+1
0002c9 9711      	SBIW R26,1
0002ca f409      	BRNE _0x2000068
                 _0x2000069:
0002cb c009      	RJMP _0x20000D3
                 _0x2000068:
0002cc 1753      	CP   R21,R19
0002cd f010      	BRLO _0x200006D
0002ce ff00      	SBRS R16,0
0002cf c001      	RJMP _0x200006E
                 _0x200006D:
0002d0 c011      	RJMP _0x200006C
                 _0x200006E:
0002d1 e220      	LDI  R18,LOW(32)
0002d2 ff07      	SBRS R16,7
0002d3 c00a      	RJMP _0x200006F
0002d4 e320      	LDI  R18,LOW(48)
                 _0x20000D3:
0002d5 6100      	ORI  R16,LOW(16)
0002d6 ff02      	SBRS R16,2
0002d7 c006      	RJMP _0x2000070
0002d8 7f0b      	ANDI R16,LOW(251)
0002d9 934a      	ST   -Y,R20
0002da d08f      	RCALL SUBOPT_0x7
0002db 3050      	CPI  R21,0
0002dc f009      	BREQ _0x2000071
0002dd 5051      	SUBI R21,LOW(1)
                 _0x2000071:
                 _0x2000070:
                 _0x200006F:
                 _0x2000067:
0002de d07e      	RCALL SUBOPT_0x5
0002df 3050      	CPI  R21,0
0002e0 f009      	BREQ _0x2000072
0002e1 5051      	SUBI R21,LOW(1)
                 _0x2000072:
                 _0x200006C:
0002e2 5031      	SUBI R19,LOW(1)
0002e3 85a8      	LDD  R26,Y+8
0002e4 85b9      	LDD  R27,Y+8+1
0002e5 9712      	SBIW R26,2
0002e6 f008      	BRLO _0x200005F
0002e7 cfb8      	RJMP _0x200005E
                 _0x200005F:
                 _0x200005C:
0002e8 ff00      	SBRS R16,0
0002e9 c007      	RJMP _0x2000073
                 _0x2000074:
0002ea 3050      	CPI  R21,0
0002eb f029      	BREQ _0x2000076
0002ec 5051      	SUBI R21,LOW(1)
0002ed e2e0      	LDI  R30,LOW(32)
0002ee 93ea      	ST   -Y,R30
0002ef d07a      	RCALL SUBOPT_0x7
0002f0 cff9      	RJMP _0x2000074
                 _0x2000076:
                 _0x2000073:
                 _0x2000077:
                 _0x2000036:
                 _0x20000D2:
0002f1 e010      	LDI  R17,LOW(0)
                 _0x2000021:
0002f2 ceec      	RJMP _0x200001C
                 _0x200001E:
0002f3 85ac      	LDD  R26,Y+12
0002f4 85bd      	LDD  R27,Y+12+1
0002f5 91ed      	LD   R30,X+
0002f6 91fd      	LD   R31,X+
0002f7 d089      	RCALL __LOADLOCR6
0002f8 9664      	ADIW R28,20
0002f9 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002fa 92ff      	PUSH R15
0002fb 2ef8      	MOV  R15,R24
0002fc 9726      	SBIW R28,6
0002fd d07c      	RCALL __SAVELOCR6
0002fe 01fe      	MOVW R30,R28
0002ff d094      	RCALL __ADDW1R15
                +
000300 8546     +LDD R20 , Z + 14
000301 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
000302 2e04      	MOV  R0,R20
000303 2a05      	OR   R0,R21
000304 f419      	BRNE _0x2000078
000305 efef      	LDI  R30,LOW(65535)
000306 efff      	LDI  R31,HIGH(65535)
000307 c01f      	RJMP _0x2060001
                 _0x2000078:
000308 01de      	MOVW R26,R28
000309 9618      	ADIW R26,8
00030a d08d      	RCALL __ADDW2R15
00030b 018d      	MOVW R16,R26
                +
00030c 8748     +STD Y + 8 , R20
00030d 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
00030e e0e0      	LDI  R30,LOW(0)
00030f 87ea      	STD  Y+10,R30
000310 87eb      	STD  Y+10+1,R30
000311 01de      	MOVW R26,R28
000312 961c      	ADIW R26,12
000313 d084      	RCALL __ADDW2R15
000314 91ed      	LD   R30,X+
000315 91fd      	LD   R31,X+
000316 93fa      	ST   -Y,R31
000317 93ea      	ST   -Y,R30
000318 931a      	ST   -Y,R17
000319 930a      	ST   -Y,R16
00031a eae9      	LDI  R30,LOW(_put_buff_G100)
00031b e0f1      	LDI  R31,HIGH(_put_buff_G100)
00031c 93fa      	ST   -Y,R31
00031d 93ea      	ST   -Y,R30
00031e 01de      	MOVW R26,R28
00031f 961c      	ADIW R26,12
000320 deb3      	RCALL __print_G100
000321 019f      	MOVW R18,R30
000322 85a8      	LDD  R26,Y+8
000323 85b9      	LDD  R27,Y+8+1
000324 e0e0      	LDI  R30,LOW(0)
000325 93ec      	ST   X,R30
000326 01f9      	MOVW R30,R18
                 _0x2060001:
000327 d059      	RCALL __LOADLOCR6
000328 962c      	ADIW R28,12
000329 90ff      	POP  R15
00032a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00032b 93ba      	ST   -Y,R27
00032c 93aa      	ST   -Y,R26
00032d 91a9          ld   r26,y+
00032e 91b9          ld   r27,y+
00032f 27ee          clr  r30
000330 27ff          clr  r31
                 strlen0:
000331 916d          ld   r22,x+
000332 2366          tst  r22
000333 f011          breq strlen1
000334 9631          adiw r30,1
000335 cffb          rjmp strlen0
                 strlen1:
000336 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000337 93ba      	ST   -Y,R27
000338 93aa      	ST   -Y,R26
000339 27aa          clr  r26
00033a 27bb          clr  r27
00033b 91e9          ld   r30,y+
00033c 91f9          ld   r31,y+
                 strlenf0:
00033d 9005      	lpm  r0,z+
00033e 2000          tst  r0
00033f f011          breq strlenf1
000340 9611          adiw r26,1
000341 cffb          rjmp strlenf0
                 strlenf1:
000342 01fd          movw r30,r26
000343 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _Cadena:
000300           	.BYTE 0x8
                 _mono0:
000308           	.BYTE 0x8
                 _mono1:
000310           	.BYTE 0x8
                 _aire0:
000318           	.BYTE 0x8
                 _aire1:
000320           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000344 01d9      	MOVW R26,R18
000345 27ee      	CLR  R30
000346 0fa1      	ADD  R26,R17
000347 1fbe      	ADC  R27,R30
000348 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
000349 27ff      	CLR  R31
00034a 2766      	CLR  R22
00034b 2777      	CLR  R23
00034c d05b      	RCALL __PUTPARD1
00034d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00034e e0e7      	LDI  R30,LOW(7)
00034f 93ea      	ST   -Y,R30
000350 e0a1      	LDI  R26,LOW(1)
000351 cdbe      	RJMP _MoveCursor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000352 dd91      	RCALL _CharLCD
000353 e0e6      	LDI  R30,LOW(6)
000354 93ea      	ST   -Y,R30
000355 e0a1      	LDI  R26,LOW(1)
000356 cdb9      	RJMP _MoveCursor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000357 91ed      	LD   R30,X+
000358 91fd      	LD   R31,X+
000359 9631      	ADIW R30,1
00035a 93fe      	ST   -X,R31
00035b 93ee      	ST   -X,R30
00035c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x5:
00035d 932a      	ST   -Y,R18
00035e 85ad      	LDD  R26,Y+13
00035f 85be      	LDD  R27,Y+13+1
000360 85ef      	LDD  R30,Y+15
000361 89f8      	LDD  R31,Y+15+1
000362 9509      	ICALL
000363 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x6:
000364 89e8      	LDD  R30,Y+16
000365 89f9      	LDD  R31,Y+16+1
000366 9734      	SBIW R30,4
000367 8be8      	STD  Y+16,R30
000368 8bf9      	STD  Y+16+1,R31
000369 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
00036a 85ad      	LDD  R26,Y+13
00036b 85be      	LDD  R27,Y+13+1
00036c 85ef      	LDD  R30,Y+15
00036d 89f8      	LDD  R31,Y+15+1
00036e 9509      	ICALL
00036f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
000370 89a8      	LDD  R26,Y+16
000371 89b9      	LDD  R27,Y+16+1
000372 9614      	ADIW R26,4
000373 91ed      	LD   R30,X+
000374 91fd      	LD   R31,X+
000375 83ee      	STD  Y+6,R30
000376 83ff      	STD  Y+6+1,R31
000377 81ae      	LDD  R26,Y+6
000378 81bf      	LDD  R27,Y+6+1
000379 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
00037a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00037b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00037c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00037d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00037e 931a      	ST   -Y,R17
00037f 930a      	ST   -Y,R16
000380 9508      	RET
                 
                 __LOADLOCR6:
000381 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000382 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000383 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000384 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000385 8119      	LDD  R17,Y+1
000386 8108      	LD   R16,Y
000387 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000388 93af      	PUSH R26
000389 93bf      	PUSH R27
00038a 01db      	MOVW R26,R22
00038b 0fac      	ADD  R26,R28
00038c 1fbd      	ADC  R27,R29
                 __INITLOC0:
00038d 9005      	LPM  R0,Z+
00038e 920d      	ST   X+,R0
00038f 958a      	DEC  R24
000390 f7e1      	BRNE __INITLOC0
000391 91bf      	POP  R27
000392 91af      	POP  R26
000393 9508      	RET
                 
                 __ADDW1R15:
000394 2400      	CLR  R0
000395 0def      	ADD  R30,R15
000396 1df0      	ADC  R31,R0
000397 9508      	RET
                 
                 __ADDW2R15:
000398 2400      	CLR  R0
000399 0daf      	ADD  R26,R15
00039a 1db0      	ADC  R27,R0
00039b 9508      	RET
                 
                 __ANEGW1:
00039c 95f1      	NEG  R31
00039d 95e1      	NEG  R30
00039e 40f0      	SBCI R31,0
00039f 9508      	RET
                 
                 __GETW1P:
0003a0 91ed      	LD   R30,X+
0003a1 91fc      	LD   R31,X
0003a2 9711      	SBIW R26,1
0003a3 9508      	RET
                 
                 __GETW1PF:
0003a4 9005      	LPM  R0,Z+
0003a5 91f4      	LPM  R31,Z
0003a6 2de0      	MOV  R30,R0
0003a7 9508      	RET
                 
                 __PUTPARD1:
0003a8 937a      	ST   -Y,R23
0003a9 936a      	ST   -Y,R22
0003aa 93fa      	ST   -Y,R31
0003ab 93ea      	ST   -Y,R30
0003ac 9508      	RET
                 
                 _delay_ms:
0003ad 9610      	adiw r26,0
0003ae f039      	breq __delay_ms1
                 __delay_ms0:
0003af 95a8      	wdr
                +
0003b0 ef8a     +LDI R24 , LOW ( 0xFA )
0003b1 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0003b2 9701     +SBIW R24 , 1
0003b3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0003b4 9711      	sbiw r26,1
0003b5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003b6 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  17 r1 :   1 r2 :   0 r3 :   7 r4 :   2 r5 :   5 r6 :   5 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   5 
r16:  48 r17:  51 r18:  39 r19:   9 r20:  12 r21:  22 r22:   8 r23:   3 
r24:  15 r25:   3 r26: 113 r27:  41 r28:  18 r29:   2 r30: 169 r31:  67 
x  :  30 y  : 143 z  :  18 
Registers used: 26 out of 35 (74.3%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   7 
adiw  :  25 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  15 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   1 brne  :  36 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  18 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   5 cpi   :  37 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   0 inc   :   3 jmp   :  27 ld    :  26 ldd   :  63 ldi   : 113 
lds   :   0 lpm   :  15 lsl   :   3 lsr   :   0 mov   :  36 movw  :  25 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   6 out   :   6 pop   :   3 push  :   3 rcall :  78 ret   :  29 
reti  :   0 rjmp  :  72 rol   :   0 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :  14 sbic  :   1 sbis  :   1 sbiw  :  18 sbr   :   0 sbrc  :   2 
sbrs  :  14 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  59 std   :  30 sts   :   0 sub   :   1 subi  :  21 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 52 out of 116 (44.8%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00076e   1790    112   1902   32768   5.8%
[.dseg] 0x000100 0x000328      0     40     40    2048   2.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
