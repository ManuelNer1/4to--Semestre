
AVRASM ver. 2.1.30  C:\Users\nerij\OneDrive\Escritorio\Piedra o Tijera\Debug\List\papel.asm Wed Apr 14 17:22:43 2021

C:\Users\nerij\OneDrive\Escritorio\Piedra o Tijera\Debug\List\papel.asm(1085): warning: Register r4 already defined by the .DEF directive
C:\Users\nerij\OneDrive\Escritorio\Piedra o Tijera\Debug\List\papel.asm(1086): warning: Register r3 already defined by the .DEF directive
C:\Users\nerij\OneDrive\Escritorio\Piedra o Tijera\Debug\List\papel.asm(1087): warning: Register r6 already defined by the .DEF directive
C:\Users\nerij\OneDrive\Escritorio\Piedra o Tijera\Debug\List\papel.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\nerij\OneDrive\Escritorio\Piedra o Tijera\Debug\List\papel.asm(1089): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.43 
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _cursor=R4
                 	.DEF _A=R3
                 	.DEF _B=R6
                 	.DEF _TiroA=R5
                 	.DEF _TiroB=R8
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0081 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000036 0303
000037 0203
000038 0c02
000039 0800      	.DB  0x3,0x3,0x3,0x2,0x2,0xC,0x0,0x8
00003a 0100
00003b 0600      	.DB  0x0,0x1,0x0,0x6
                 _0x0:
00003c 6950
00003d 6465
00003e 6172
00003f 0020      	.DB  0x50,0x69,0x65,0x64,0x72,0x61,0x20,0x0
000040 6150
000041 6570
000042 206c
000043 0020      	.DB  0x50,0x61,0x70,0x65,0x6C,0x20,0x20,0x0
000044 6954
000045 656a
000046 6172
000047 0073      	.DB  0x54,0x69,0x6A,0x65,0x72,0x61,0x73,0x0
000048 5020
000049 6569
00004a 7264
00004b 0061      	.DB  0x20,0x50,0x69,0x65,0x64,0x72,0x61,0x0
00004c 2020
00004d 6150
00004e 6570
00004f 006c      	.DB  0x20,0x20,0x50,0x61,0x70,0x65,0x6C,0x0
000050 2041
000051 4954
000052 4152
000053 0052      	.DB  0x41,0x20,0x54,0x49,0x52,0x41,0x52,0x0
000054 6146
000055 746c
000056 2061
000057 0020      	.DB  0x46,0x61,0x6C,0x74,0x61,0x20,0x20,0x0
000058 4b4f
000059 2020
00005a 2020
00005b 0020      	.DB  0x4F,0x4B,0x20,0x20,0x20,0x20,0x20,0x0
00005c 2020
00005d 6146
00005e 746c
00005f 0061      	.DB  0x20,0x20,0x46,0x61,0x6C,0x74,0x61,0x0
000060 2020
000061 2020
000062 4f20
000063 004b      	.DB  0x20,0x20,0x20,0x20,0x20,0x4F,0x4B,0x0
000064 4d45
000065 4150
000066 4554
000067 0020      	.DB  0x45,0x4D,0x50,0x41,0x54,0x45,0x20,0x0
000068 4147
000069 414e
00006a 4120
00006b 0020      	.DB  0x47,0x41,0x4E,0x41,0x20,0x41,0x20,0x0
00006c 6147
00006d 616e
00006e 4220
00006f 0020      	.DB  0x47,0x61,0x6E,0x61,0x20,0x42,0x20,0x0
000070 4147
000071 4f4e
000072 4120
000073 0020      	.DB  0x47,0x41,0x4E,0x4F,0x20,0x41,0x20,0x0
000074 4147
000075 4f4e
000076 4220
000077 0020      	.DB  0x47,0x41,0x4E,0x4F,0x20,0x42,0x20,0x0
000078 2020
000079 2020
00007a 2020
00007b 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
C:\Users\nerij\OneDrive\Escritorio\Piedra o Tijera\Debug\List\papel.asm(1152): warning: .cseg .db misalignment - padding zero byte
00007c 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00007d 0004      	.DW  0x04
00007e 0003      	.DW  0x03
00007f 0068      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000080 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000081 94f8      	CLI
000082 27ee      	CLR  R30
000083 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000084 e0f1      	LDI  R31,1
000085 bff5      	OUT  MCUCR,R31
000086 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000087 e08d      	LDI  R24,(14-2)+1
000088 e0a2      	LDI  R26,2
000089 27bb      	CLR  R27
                 __CLEAR_REG:
00008a 93ed      	ST   X+,R30
00008b 958a      	DEC  R24
00008c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00008d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00008e e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00008f e0a0      	LDI  R26,LOW(__SRAM_START)
000090 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000091 93ed      	ST   X+,R30
000092 9701      	SBIW R24,1
000093 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000094 efea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000095 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000096 9185      	LPM  R24,Z+
000097 9195      	LPM  R25,Z+
000098 9700      	SBIW R24,0
000099 f061      	BREQ __GLOBAL_INI_END
00009a 91a5      	LPM  R26,Z+
00009b 91b5      	LPM  R27,Z+
00009c 9005      	LPM  R0,Z+
00009d 9015      	LPM  R1,Z+
00009e 01bf      	MOVW R22,R30
00009f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000a0 9005      	LPM  R0,Z+
0000a1 920d      	ST   X+,R0
0000a2 9701      	SBIW R24,1
0000a3 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a4 01fb      	MOVW R30,R22
0000a5 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0000a6 e0e0      	LDI  R30,__GPIOR0_INIT
0000a7 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a8 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a9 bfed      	OUT  SPL,R30
0000aa e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ab bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000ac e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000ad e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ae 940c 0186 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                     .equ __lcd_port=0x05
                     .equ __lcd_EN=1
                     .equ __lcd_RS=0
                     .equ __lcd_D4=2
                     .equ __lcd_D5=3
                     .equ __lcd_D6=4
                     .equ __lcd_D7=5
                 ; 0000 0010    #endasm
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.CSEG
                 _SetupLCD:
                 ; .FSTART _SetupLCD
0000b0 972c      	SBIW R28,12
0000b1 e08c      	LDI  R24,12
                +
0000b2 e060     +LDI R22 , LOW ( 0 )
0000b3 e070     +LDI R23 , HIGH ( 0 )
                 	__GETWRN 22,23,0
0000b4 e6ec      	LDI  R30,LOW(_0x3*2)
0000b5 e0f0      	LDI  R31,HIGH(_0x3*2)
0000b6 d170      	RCALL __INITLOCB
0000b7 931a      	ST   -Y,R17
                 ;	TableSetup -> Y+1
                 ;	i -> R17
                 ; 0000 0014     SBI __lcd_port-1,__lcd_EN
0000b8 9a21          SBI __lcd_port-1,__lcd_EN
0000b9 9a20          SBI __lcd_port-1,__lcd_RS
0000ba 9a22          SBI __lcd_port-1,__lcd_D4
0000bb 9a23          SBI __lcd_port-1,__lcd_D5
0000bc 9a24          SBI __lcd_port-1,__lcd_D6
0000bd 9a25          SBI __lcd_port-1,__lcd_D7
0000be e3a2      	LDI  R26,LOW(50)
0000bf e0b0      	LDI  R27,0
0000c0 d179      	RCALL _delay_ms
0000c1 e010      	LDI  R17,LOW(0)
                 _0x5:
0000c2 301c      	CPI  R17,12
0000c3 f470      	BRSH _0x6
0000c4 e0a2      	LDI  R26,LOW(2)
0000c5 e0b0      	LDI  R27,0
0000c6 d173      	RCALL _delay_ms
0000c7 2fe1      	MOV  R30,R17
0000c8 e0f0      	LDI  R31,0
0000c9 01de      	MOVW R26,R28
0000ca 9611      	ADIW R26,1
0000cb 0fae      	ADD  R26,R30
0000cc 1fbf      	ADC  R27,R31
0000cd 91ac      	LD   R26,X
0000ce d00d      	RCALL _SendDataBitsLCD
0000cf d009      	RCALL _PulseEn
0000d0 5f1f      	SUBI R17,-1
0000d1 cff0      	RJMP _0x5
                 _0x6:
0000d2 e0ec      	LDI  R30,LOW(12)
0000d3 2e4e      	MOV  R4,R30
0000d4 2da4      	MOV  R26,R4
0000d5 d01e      	RCALL _WriteComandLCD
0000d6 8118      	LDD  R17,Y+0
0000d7 962d      	ADIW R28,13
0000d8 9508      	RET
                 ; .FEND
                 _PulseEn:
                 ; .FSTART _PulseEn
0000d9 9a29          SBI __lcd_port,__lcd_EN  // EN=1;
0000da 9829          CBI __lcd_port,__lcd_EN // EN=0;
0000db 9508      	RET
                 ; .FEND
                 _SendDataBitsLCD:
                 ; .FSTART _SendDataBitsLCD
0000dc 931a      	ST   -Y,R17
0000dd 2f1a      	MOV  R17,R26
                 ;	dato -> R17
0000de ff13      	SBRS R17,3
0000df c002      	RJMP _0x7
0000e0 9a2d      	SBI __lcd_port,__lcd_D7
0000e1 c001      	RJMP _0x8
                 _0x7:
0000e2 982d      	CBI __lcd_port,__lcd_D7
                 _0x8:
0000e3 ff12      	SBRS R17,2
0000e4 c002      	RJMP _0x9
0000e5 9a2c      	SBI __lcd_port,__lcd_D6
0000e6 c001      	RJMP _0xA
                 _0x9:
0000e7 982c      	CBI __lcd_port,__lcd_D6
                 _0xA:
0000e8 ff11      	SBRS R17,1
0000e9 c002      	RJMP _0xB
0000ea 9a2b      	SBI __lcd_port,__lcd_D5
0000eb c001      	RJMP _0xC
                 _0xB:
0000ec 982b      	CBI __lcd_port,__lcd_D5
                 _0xC:
0000ed ff10      	SBRS R17,0
0000ee c002      	RJMP _0xD
0000ef 9a2a      	SBI __lcd_port,__lcd_D4
0000f0 c001      	RJMP _0xE
                 _0xD:
0000f1 982a      	CBI __lcd_port,__lcd_D4
                 _0xE:
0000f2 9119      	LD   R17,Y+
0000f3 9508      	RET
                 ; .FEND
                 _WriteComandLCD:
                 ; .FSTART _WriteComandLCD
0000f4 931a      	ST   -Y,R17
0000f5 930a      	ST   -Y,R16
0000f6 2f0a      	MOV  R16,R26
                 ;	Comando -> R16
                 ;	tempComando -> R17
0000f7 9828      	CBI __lcd_port,__lcd_RS
0000f8 c004      	RJMP _0x2000001
                 ; .FEND
                 _CharLCD:
                 ; .FSTART _CharLCD
0000f9 931a      	ST   -Y,R17
0000fa 930a      	ST   -Y,R16
0000fb 2f0a      	MOV  R16,R26
                 ;	dato -> R16
                 ;	tempdato -> R17
0000fc 9a28      	SBI __lcd_port,__lcd_RS
                 _0x2000001:
0000fd e0a2      	LDI  R26,LOW(2)
0000fe e0b0      	LDI  R27,0
0000ff d13a      	RCALL _delay_ms
000100 2fe0      	MOV  R30,R16
000101 7fe0      	ANDI R30,LOW(0xF0)
000102 2f1e      	MOV  R17,R30
000103 9512      	SWAP R17
000104 701f      	ANDI R17,0xF
000105 2fa1      	MOV  R26,R17
000106 dfd5      	RCALL _SendDataBitsLCD
000107 dfd1      	RCALL _PulseEn
000108 2fe0      	MOV  R30,R16
000109 70ef      	ANDI R30,LOW(0xF)
00010a 2f1e      	MOV  R17,R30
00010b 2fa1      	MOV  R26,R17
00010c dfcf      	RCALL _SendDataBitsLCD
00010d e0a2      	LDI  R26,LOW(2)
00010e e0b0      	LDI  R27,0
00010f d12a      	RCALL _delay_ms
000110 dfc8      	RCALL _PulseEn
000111 9109      	LD   R16,Y+
000112 9119      	LD   R17,Y+
000113 9508      	RET
                 ; .FEND
                 _StringLCD:
                 ; .FSTART _StringLCD
000114 d108      	RCALL __SAVELOCR4
000115 019d      	MOVW R18,R26
                 ;	Mensaje -> R18,R19
                 ;	i -> R17
000116 e010      	LDI  R17,LOW(0)
                 _0x10:
000117 2fe1      	MOV  R30,R17
000118 5f1f      	SUBI R17,-1
000119 e0f0      	LDI  R31,0
00011a 0fe2      	ADD  R30,R18
00011b 1ff3      	ADC  R31,R19
00011c 91a4      	LPM  R26,Z
00011d dfdb      	RCALL _CharLCD
00011e 2fe1      	MOV  R30,R17
00011f e0f0      	LDI  R31,0
000120 0fe2      	ADD  R30,R18
000121 1ff3      	ADC  R31,R19
000122 91e4      	LPM  R30,Z
000123 30e0      	CPI  R30,0
000124 f791      	BRNE _0x10
000125 d0fc      	RCALL __LOADLOCR4
000126 9624      	ADIW R28,4
000127 9508      	RET
                 ; .FEND
                 ;	Mensaje -> R20,R21
                 ;	tiempo -> R18,R19
                 ;	i -> R17
                 ;	Mensaje -> R18,R19
                 ;	i -> R17
                 _MoveCursor:
                 ; .FSTART _MoveCursor
000128 931a      	ST   -Y,R17
000129 930a      	ST   -Y,R16
00012a 2f1a      	MOV  R17,R26
00012b 810a      	LDD  R16,Y+2
                 ;	x -> R16
                 ;	y -> R17
00012c 2fe1      	MOV  R30,R17
00012d e0f0      	LDI  R31,0
00012e 9730      	SBIW R30,0
00012f f419      	BRNE _0x1B
000130 2fa0      	MOV  R26,R16
000131 58a0      	SUBI R26,-LOW(128)
000132 c014      	RJMP _0x53
                 _0x1B:
000133 30e1      	CPI  R30,LOW(0x1)
000134 e0a0      	LDI  R26,HIGH(0x1)
000135 07fa      	CPC  R31,R26
000136 f419      	BRNE _0x1C
000137 2fa0      	MOV  R26,R16
000138 54a0      	SUBI R26,-LOW(192)
000139 c00d      	RJMP _0x53
                 _0x1C:
00013a 30e2      	CPI  R30,LOW(0x2)
00013b e0a0      	LDI  R26,HIGH(0x2)
00013c 07fa      	CPC  R31,R26
00013d f419      	BRNE _0x1D
00013e 2fa0      	MOV  R26,R16
00013f 56ac      	SUBI R26,-LOW(148)
000140 c006      	RJMP _0x53
                 _0x1D:
000141 30e3      	CPI  R30,LOW(0x3)
000142 e0a0      	LDI  R26,HIGH(0x3)
000143 07fa      	CPC  R31,R26
000144 f419      	BRNE _0x1A
000145 2fa0      	MOV  R26,R16
000146 52ac      	SUBI R26,-LOW(212)
                 _0x53:
000147 dfac      	RCALL _WriteComandLCD
                 _0x1A:
000148 8119      	LDD  R17,Y+1
000149 8108      	LDD  R16,Y+0
00014a 9623      	ADIW R28,3
00014b 9508      	RET
                 ; .FEND
                 ;	NoCaracter -> R16
                 ;	datos -> R18,R19
                 ;	i -> R17
                 ;void ImprimeMarcador()
                 ; 0000 0021 {
                 _ImprimeMarcador:
                 ; .FSTART _ImprimeMarcador
                 ; 0000 0022 //Usuario A
                 ; 0000 0023 MoveCursor(0,0);
00014c e0e0      	LDI  R30,LOW(0)
00014d 93ea      	ST   -Y,R30
00014e e0a0      	LDI  R26,LOW(0)
00014f dfd8      	RCALL _MoveCursor
                 ; 0000 0024 CharLCD(A + '0');   //Esto para imprimir el caracter 0 ASCII
000150 2da3      	MOV  R26,R3
000151 5da0      	SUBI R26,-LOW(48)
000152 dfa6      	RCALL _CharLCD
                 ; 0000 0025 
                 ; 0000 0026 //Usuario B
                 ; 0000 0027 MoveCursor(15,0);
000153 e0ef      	LDI  R30,LOW(15)
000154 93ea      	ST   -Y,R30
000155 e0a0      	LDI  R26,LOW(0)
000156 dfd1      	RCALL _MoveCursor
                 ; 0000 0028 CharLCD(B + '0');
000157 2da6      	MOV  R26,R6
000158 5da0      	SUBI R26,-LOW(48)
000159 df9f      	RCALL _CharLCD
                 ; 0000 0029 }
00015a 9508      	RET
                 ; .FEND
                 ;void ImprimeTiro()
                 ; 0000 002C {
                 _ImprimeTiro:
                 ; .FSTART _ImprimeTiro
                 ; 0000 002D //Usuario A
                 ; 0000 002E MoveCursor(0,1);
00015b d0b0      	RCALL SUBOPT_0x0
                 ; 0000 002F switch  (TiroA)
00015c 2de5      	MOV  R30,R5
00015d d0b2      	RCALL SUBOPT_0x1
                 ; 0000 0030 {
                 ; 0000 0031 case Piedra:
00015e f419      	BRNE _0x25
                 ; 0000 0032 StringLCD("Piedra ");
                +
00015f e7a8     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000160 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000161 c00d      	RJMP _0x54
                 ; 0000 0033 break;
                 ; 0000 0034 case Papel:
                 _0x25:
000162 30e2      	CPI  R30,LOW(0x2)
000163 e0a0      	LDI  R26,HIGH(0x2)
000164 07fa      	CPC  R31,R26
000165 f419      	BRNE _0x26
                 ; 0000 0035 StringLCD("Papel  ");
                +
000166 e8a0     +LDI R26 , LOW ( 2 * _0x0 + ( 8 ) )
000167 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 8 ) )
                 	__POINTW2FN _0x0,8
000168 c006      	RJMP _0x54
                 ; 0000 0036 break;
                 ; 0000 0037 case Tijeras:
                 _0x26:
000169 30e3      	CPI  R30,LOW(0x3)
00016a e0a0      	LDI  R26,HIGH(0x3)
00016b 07fa      	CPC  R31,R26
00016c f419      	BRNE _0x24
                 ; 0000 0038 StringLCD("Tijeras");
                +
00016d e8a8     +LDI R26 , LOW ( 2 * _0x0 + ( 16 ) )
00016e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 16 ) )
                 	__POINTW2FN _0x0,16
                 _0x54:
00016f dfa4      	RCALL _StringLCD
                 ; 0000 0039 break;
                 ; 0000 003A }
                 _0x24:
                 ; 0000 003B 
                 ; 0000 003C //Usuario B
                 ; 0000 003D MoveCursor(9,1);
000170 d0a4      	RCALL SUBOPT_0x2
                 ; 0000 003E switch  (TiroB)
000171 2de8      	MOV  R30,R8
000172 d09d      	RCALL SUBOPT_0x1
                 ; 0000 003F {
                 ; 0000 0040 case Piedra:
000173 f419      	BRNE _0x2B
                 ; 0000 0041 StringLCD(" Piedra");
                +
000174 e9a0     +LDI R26 , LOW ( 2 * _0x0 + ( 24 ) )
000175 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW2FN _0x0,24
000176 c00d      	RJMP _0x55
                 ; 0000 0042 break;
                 ; 0000 0043 case Papel:
                 _0x2B:
000177 30e2      	CPI  R30,LOW(0x2)
000178 e0a0      	LDI  R26,HIGH(0x2)
000179 07fa      	CPC  R31,R26
00017a f419      	BRNE _0x2C
                 ; 0000 0044 StringLCD("  Papel");
                +
00017b e9a8     +LDI R26 , LOW ( 2 * _0x0 + ( 32 ) )
00017c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 32 ) )
                 	__POINTW2FN _0x0,32
00017d c006      	RJMP _0x55
                 ; 0000 0045 break;
                 ; 0000 0046 case Tijeras:
                 _0x2C:
00017e 30e3      	CPI  R30,LOW(0x3)
00017f e0a0      	LDI  R26,HIGH(0x3)
000180 07fa      	CPC  R31,R26
000181 f419      	BRNE _0x2A
                 ; 0000 0047 StringLCD("Tijeras");
                +
000182 e8a8     +LDI R26 , LOW ( 2 * _0x0 + ( 16 ) )
000183 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 16 ) )
                 	__POINTW2FN _0x0,16
                 _0x55:
000184 df8f      	RCALL _StringLCD
                 ; 0000 0048 break;
                 ; 0000 0049 }
                 _0x2A:
                 ; 0000 004A }
000185 9508      	RET
                 ; .FEND
                 ;void main(void)
                 ; 0000 004D {
                 _main:
                 ; .FSTART _main
                 ; 0000 004E SetupLCD();
000186 df29      	RCALL _SetupLCD
                 ; 0000 004F PORTD = 0xE1;  //Pull-ups en PD7, PD6, PD5 Y PD0
000187 eee1      	LDI  R30,LOW(225)
000188 b9eb      	OUT  0xB,R30
                 ; 0000 0050 PORTC = 0X07;  //Pull-ups en PC2, PC1 Y PC0
000189 e0e7      	LDI  R30,LOW(7)
00018a b9e8      	OUT  0x8,R30
                 ; 0000 0051 
                 ; 0000 0052 while (1)
                 _0x2E:
                 ; 0000 0053 {
                 ; 0000 0054 ImprimeMarcador();
00018b dfc0      	RCALL _ImprimeMarcador
                 ; 0000 0055 //Dezplega mensaje de tirar
                 ; 0000 0056 MoveCursor(4,0);
00018c d08c      	RCALL SUBOPT_0x3
                 ; 0000 0057 StringLCD("A TIRAR");
                +
00018d eaa0     +LDI R26 , LOW ( 2 * _0x0 + ( 40 ) )
00018e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 40 ) )
                 	__POINTW2FN _0x0,40
00018f df84      	RCALL _StringLCD
                 ; 0000 0058 //Asigno un valor constante al Tiro A y B en 0
                 ; 0000 0059 TiroA = SinTiro;
000190 2455      	CLR  R5
                 ; 0000 005A TiroB = SinTiro;
000191 2488      	CLR  R8
                 ; 0000 005B 
                 ; 0000 005C do{
                 _0x32:
                 ; 0000 005D //Usuario A
                 ; 0000 005E if (PIND.5 == 0)
000192 994d      	SBIC 0x9,5
000193 c002      	RJMP _0x34
                 ; 0000 005F TiroA = Piedra;
000194 e0e1      	LDI  R30,LOW(1)
000195 2e5e      	MOV  R5,R30
                 ; 0000 0060 if (PIND.6 == 0)
                 _0x34:
000196 994e      	SBIC 0x9,6
000197 c002      	RJMP _0x35
                 ; 0000 0061 TiroA = Papel;
000198 e0e2      	LDI  R30,LOW(2)
000199 2e5e      	MOV  R5,R30
                 ; 0000 0062 if (PIND.7 == 0)
                 _0x35:
00019a 994f      	SBIC 0x9,7
00019b c002      	RJMP _0x36
                 ; 0000 0063 TiroA = Tijeras;
00019c e0e3      	LDI  R30,LOW(3)
00019d 2e5e      	MOV  R5,R30
                 ; 0000 0064 
                 ; 0000 0065 //Usuario B
                 ; 0000 0066 if (PINC.0 == 0)
                 _0x36:
00019e 9930      	SBIC 0x6,0
00019f c002      	RJMP _0x37
                 ; 0000 0067 TiroB = Piedra;
0001a0 e0e1      	LDI  R30,LOW(1)
0001a1 2e8e      	MOV  R8,R30
                 ; 0000 0068 if (PINC.1 == 0)
                 _0x37:
0001a2 9931      	SBIC 0x6,1
0001a3 c002      	RJMP _0x38
                 ; 0000 0069 TiroB = Papel;
0001a4 e0e2      	LDI  R30,LOW(2)
0001a5 2e8e      	MOV  R8,R30
                 ; 0000 006A if (PINC.2 == 0)
                 _0x38:
0001a6 9932      	SBIC 0x6,2
0001a7 c002      	RJMP _0x39
                 ; 0000 006B TiroB = Tijeras;
0001a8 e0e3      	LDI  R30,LOW(3)
0001a9 2e8e      	MOV  R8,R30
                 ; 0000 006C 
                 ; 0000 006D //Usuario A
                 ; 0000 006E MoveCursor(0,1);
                 _0x39:
0001aa d061      	RCALL SUBOPT_0x0
                 ; 0000 006F if (TiroA == SinTiro)
0001ab 2055      	TST  R5
0001ac f419      	BRNE _0x3A
                 ; 0000 0070 StringLCD("Falta  ");
                +
0001ad eaa8     +LDI R26 , LOW ( 2 * _0x0 + ( 48 ) )
0001ae e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 48 ) )
                 	__POINTW2FN _0x0,48
0001af c002      	RJMP _0x56
                 ; 0000 0071 else
                 _0x3A:
                 ; 0000 0072 StringLCD("OK     ");
                +
0001b0 eba0     +LDI R26 , LOW ( 2 * _0x0 + ( 56 ) )
0001b1 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 56 ) )
                 	__POINTW2FN _0x0,56
                 _0x56:
0001b2 df61      	RCALL _StringLCD
                 ; 0000 0073 
                 ; 0000 0074 //Usuario B
                 ; 0000 0075 MoveCursor(9,1);
0001b3 d061      	RCALL SUBOPT_0x2
                 ; 0000 0076 if (TiroB == SinTiro)
0001b4 2088      	TST  R8
0001b5 f419      	BRNE _0x3C
                 ; 0000 0077 StringLCD("  Falta");
                +
0001b6 eba8     +LDI R26 , LOW ( 2 * _0x0 + ( 64 ) )
0001b7 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 64 ) )
                 	__POINTW2FN _0x0,64
0001b8 c002      	RJMP _0x57
                 ; 0000 0078 else
                 _0x3C:
                 ; 0000 0079 StringLCD("     OK");
                +
0001b9 eca0     +LDI R26 , LOW ( 2 * _0x0 + ( 72 ) )
0001ba e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 72 ) )
                 	__POINTW2FN _0x0,72
                 _0x57:
0001bb df58      	RCALL _StringLCD
                 ; 0000 007A }while((TiroA==SinTiro)||(TiroB==SinTiro));
0001bc 2055      	TST  R5
0001bd f011      	BREQ _0x3E
0001be 2088      	TST  R8
0001bf f409      	BRNE _0x33
                 _0x3E:
0001c0 cfd1      	RJMP _0x32
                 _0x33:
                 ; 0000 007B 
                 ; 0000 007C ImprimeTiro();
0001c1 df99      	RCALL _ImprimeTiro
                 ; 0000 007D MoveCursor(4,0);
0001c2 d056      	RCALL SUBOPT_0x3
                 ; 0000 007E switch (TiroA - TiroB)
0001c3 2da5      	MOV  R26,R5
0001c4 27bb      	CLR  R27
0001c5 2de8      	MOV  R30,R8
0001c6 e0f0      	LDI  R31,0
0001c7 d06b      	RCALL __SWAPW12
0001c8 1bea      	SUB  R30,R26
0001c9 0bfb      	SBC  R31,R27
                 ; 0000 007F {
                 ; 0000 0080 case 0:
0001ca 9730      	SBIW R30,0
0001cb f421      	BRNE _0x43
                 ; 0000 0081 StringLCD("EMPATE ");
                +
0001cc eca8     +LDI R26 , LOW ( 2 * _0x0 + ( 80 ) )
0001cd e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 80 ) )
                 	__POINTW2FN _0x0,80
0001ce df45      	RCALL _StringLCD
                 ; 0000 0082 break;
0001cf c019      	RJMP _0x42
                 ; 0000 0083 case 1:
                 _0x43:
0001d0 30e1      	CPI  R30,LOW(0x1)
0001d1 e0a0      	LDI  R26,HIGH(0x1)
0001d2 07fa      	CPC  R31,R26
0001d3 f021      	BREQ _0x45
                 ; 0000 0084 case -2:
0001d4 3fee      	CPI  R30,LOW(0xFFFFFFFE)
0001d5 efaf      	LDI  R26,HIGH(0xFFFFFFFE)
0001d6 07fa      	CPC  R31,R26
0001d7 f429      	BRNE _0x46
                 _0x45:
                 ; 0000 0085 StringLCD("GANA A ");
                +
0001d8 eda0     +LDI R26 , LOW ( 2 * _0x0 + ( 88 ) )
0001d9 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 88 ) )
                 	__POINTW2FN _0x0,88
0001da df39      	RCALL _StringLCD
                 ; 0000 0086 A++;
0001db 9433      	INC  R3
                 ; 0000 0087 break;
0001dc c00c      	RJMP _0x42
                 ; 0000 0088 case -1:
                 _0x46:
0001dd 3fef      	CPI  R30,LOW(0xFFFFFFFF)
0001de efaf      	LDI  R26,HIGH(0xFFFFFFFF)
0001df 07fa      	CPC  R31,R26
0001e0 f021      	BREQ _0x48
                 ; 0000 0089 case 2:
0001e1 30e2      	CPI  R30,LOW(0x2)
0001e2 e0a0      	LDI  R26,HIGH(0x2)
0001e3 07fa      	CPC  R31,R26
0001e4 f421      	BRNE _0x42
                 _0x48:
                 ; 0000 008A StringLCD("Gana B ");
                +
0001e5 eda8     +LDI R26 , LOW ( 2 * _0x0 + ( 96 ) )
0001e6 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 96 ) )
                 	__POINTW2FN _0x0,96
0001e7 df2c      	RCALL _StringLCD
                 ; 0000 008B B++;
0001e8 9463      	INC  R6
                 ; 0000 008C break;
                 ; 0000 008D 
                 ; 0000 008E }
                 _0x42:
                 ; 0000 008F 
                 ; 0000 0090 ImprimeMarcador();
0001e9 df62      	RCALL _ImprimeMarcador
                 ; 0000 0091 delay_ms(1500);
0001ea edac      	LDI  R26,LOW(1500)
0001eb e0b5      	LDI  R27,HIGH(1500)
0001ec d04d      	RCALL _delay_ms
                 ; 0000 0092 
                 ; 0000 0093 if ((A==5)||(B==5))
0001ed e0e5      	LDI  R30,LOW(5)
0001ee 15e3      	CP   R30,R3
0001ef f011      	BREQ _0x4B
0001f0 15e6      	CP   R30,R6
0001f1 f4c1      	BRNE _0x4A
                 _0x4B:
                 ; 0000 0094 {
                 ; 0000 0095 do{
                 _0x4E:
                 ; 0000 0096 MoveCursor(4,0);
0001f2 d026      	RCALL SUBOPT_0x3
                 ; 0000 0097 if(A==5)
0001f3 e0e5      	LDI  R30,LOW(5)
0001f4 15e3      	CP   R30,R3
0001f5 f419      	BRNE _0x50
                 ; 0000 0098 StringLCD("GANO A ");
                +
0001f6 eea0     +LDI R26 , LOW ( 2 * _0x0 + ( 104 ) )
0001f7 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 104 ) )
                 	__POINTW2FN _0x0,104
0001f8 c002      	RJMP _0x58
                 ; 0000 0099 else
                 _0x50:
                 ; 0000 009A StringLCD("GANO B ");
                +
0001f9 eea8     +LDI R26 , LOW ( 2 * _0x0 + ( 112 ) )
0001fa e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 112 ) )
                 	__POINTW2FN _0x0,112
                 _0x58:
0001fb df18      	RCALL _StringLCD
                 ; 0000 009B delay_ms(100);
0001fc e6a4      	LDI  R26,LOW(100)
0001fd e0b0      	LDI  R27,0
0001fe d03b      	RCALL _delay_ms
                 ; 0000 009C MoveCursor(4,0);
0001ff d019      	RCALL SUBOPT_0x3
                 ; 0000 009D StringLCD("        ");
                +
000200 efa0     +LDI R26 , LOW ( 2 * _0x0 + ( 120 ) )
000201 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 120 ) )
                 	__POINTW2FN _0x0,120
000202 df11      	RCALL _StringLCD
                 ; 0000 009E delay_ms(100);
000203 e6a4      	LDI  R26,LOW(100)
000204 e0b0      	LDI  R27,0
000205 d034      	RCALL _delay_ms
                 ; 0000 009F }while(PIND.0==1);
000206 9948      	SBIC 0x9,0
000207 cfea      	RJMP _0x4E
                 ; 0000 00A0 A = 0;
000208 2433      	CLR  R3
                 ; 0000 00A1 B = 0;
000209 2466      	CLR  R6
                 ; 0000 00A2 }
                 ; 0000 00A3 }
                 _0x4A:
00020a cf80      	RJMP _0x2E
                 ; 0000 00A4 }
                 _0x52:
00020b cfff      	RJMP _0x52
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00020c e0e0      	LDI  R30,LOW(0)
00020d 93ea      	ST   -Y,R30
00020e e0a1      	LDI  R26,LOW(1)
00020f cf18      	RJMP _MoveCursor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000210 e0f0      	LDI  R31,0
000211 30e1      	CPI  R30,LOW(0x1)
000212 e0a0      	LDI  R26,HIGH(0x1)
000213 07fa      	CPC  R31,R26
000214 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000215 e0e9      	LDI  R30,LOW(9)
000216 93ea      	ST   -Y,R30
000217 e0a1      	LDI  R26,LOW(1)
000218 cf0f      	RJMP _MoveCursor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
000219 e0e4      	LDI  R30,LOW(4)
00021a 93ea      	ST   -Y,R30
00021b e0a0      	LDI  R26,LOW(0)
00021c cf0b      	RJMP _MoveCursor
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
00021d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00021e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00021f 931a      	ST   -Y,R17
000220 930a      	ST   -Y,R16
000221 9508      	RET
                 
                 __LOADLOCR4:
000222 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000223 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000224 8119      	LDD  R17,Y+1
000225 8108      	LD   R16,Y
000226 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000227 93af      	PUSH R26
000228 93bf      	PUSH R27
000229 01db      	MOVW R26,R22
00022a 0fac      	ADD  R26,R28
00022b 1fbd      	ADC  R27,R29
                 __INITLOC0:
00022c 9005      	LPM  R0,Z+
00022d 920d      	ST   X+,R0
00022e 958a      	DEC  R24
00022f f7e1      	BRNE __INITLOC0
000230 91bf      	POP  R27
000231 91af      	POP  R26
000232 9508      	RET
                 
                 __SWAPW12:
000233 2e1b      	MOV  R1,R27
000234 2fbf      	MOV  R27,R31
000235 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000236 2e1a      	MOV  R1,R26
000237 2fae      	MOV  R26,R30
000238 2de1      	MOV  R30,R1
000239 9508      	RET
                 
                 _delay_ms:
00023a 9610      	adiw r26,0
00023b f039      	breq __delay_ms1
                 __delay_ms0:
00023c 95a8      	wdr
                +
00023d ef8a     +LDI R24 , LOW ( 0xFA )
00023e e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00023f 9701     +SBIW R24 , 1
000240 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000241 9711      	sbiw r26,1
000242 f7c9      	brne __delay_ms0
                 __delay_ms1:
000243 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   6 r1 :   5 r2 :   0 r3 :   5 r4 :   2 r5 :   8 r6 :   4 r7 :   0 
r8 :   8 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  16 r17:  32 r18:   5 r19:   4 r20:   0 r21:   0 r22:   4 r23:   1 
r24:  11 r25:   3 r26:  91 r27:  35 r28:   7 r29:   2 r30:  84 r31:  28 
x  :   5 y  :  28 z  :  10 
Registers used: 24 out of 35 (68.6%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   4 
adiw  :   5 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   6 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  25 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :  12 cpi   :  14 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   2 jmp   :  27 ld    :   5 ldd   :   7 ldi   : 110 
lds   :   0 lpm   :  12 lsl   :   0 lsr   :   0 mov   :  38 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :   8 pop   :   2 push  :   2 rcall :  48 ret   :  14 
reti  :   0 rjmp  :  36 rol   :   0 ror   :   0 sbc   :   1 sbci  :   0 
sbi   :  12 sbic  :   7 sbis  :   0 sbiw  :   8 sbr   :   0 sbrc  :   0 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  21 std   :   0 sts   :   0 sub   :   1 subi  :   8 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 39 out of 116 (33.6%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000488   1006    154   1160   32768   3.5%
[.dseg] 0x000100 0x000300      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
