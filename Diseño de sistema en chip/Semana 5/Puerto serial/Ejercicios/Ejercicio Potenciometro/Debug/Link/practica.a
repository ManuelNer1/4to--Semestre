;/*
; * practica.c
; *
; * Created: 28/04/2021 12:01:37 p. m.
; * Author: ManuelNeri
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (1<<ADLAR))
;
;int DCEnt, lectura;
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0014 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0015 ADMUX=(adc_input & 0x1f) | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0016 if (adc_input & 0x20) ADCSRB|=(1<<MUX5);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0017 else ADCSRB&= ~(1<<MUX5);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0018 // Delay needed for the stabilization of the ADC input voltage
; 0000 0019 delay_us(10);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 001A // Start the AD conversion
; 0000 001B ADCSRA|=(1<<ADSC);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001C // Wait for the AD conversion to complete
; 0000 001D while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 001E ADCSRA|=(1<<ADIF);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 001F return ADCH;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0020 }
;PCODE: $00000030 VOL: 0
;
;void main(void)
; 0000 0023 {
;PCODE: $00000031 VOL: 0
; 0000 0024     CLKPR = 0x80;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0025     CLKPR = 0x04;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0026 
; 0000 0027     TCCR0A = 0x81;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0028     TCCR0B = 0x01;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0029 
; 0000 002A     // USART initialization
; 0000 002B     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 002C     // USART Receiver: On
; 0000 002D     // USART Transmitter: On
; 0000 002E     // USART0 Mode: Asynchronous
; 0000 002F     // USART Baud Rate: 9600 (Double Speed Mode)
; 0000 0030     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (1<<U2X0) | (0<<MPCM0);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0031     UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0032     UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0033     UBRR0H=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0034     UBRR0L=0x0C;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0035 
; 0000 0036     // ADC initialization
; 0000 0037     // ADC Clock frequency: 500.000 kHz
; 0000 0038     // ADC Voltage Reference: AVCC pin
; 0000 0039     // ADC Auto Trigger Source: ADC Stopped
; 0000 003A     // Only the 8 most significant bits of
; 0000 003B     // the AD conversion result are used
; 0000 003C     // Digital input buffers on ADC0: Off, ADC1: On, ADC2: On, ADC3: On
; 0000 003D     // ADC4: On, ADC5: On, ADC6: On, ADC7: On
; 0000 003E     DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 003F     // Digital input buffers on ADC8: On, ADC9: On, ADC10: On, ADC11: On
; 0000 0040     // ADC12: On, ADC13: On, ADC14: On, ADC15: On
; 0000 0041     DIDR2=(0<<ADC15D) | (0<<ADC14D) | (0<<ADC13D) | (0<<ADC12D) | (0<<ADC11D) | (0<<ADC10D) | (0<<ADC9D) | (0<<ADC8D);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0042     ADMUX=ADC_VREF_TYPE;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0043     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0044     ADCSRB=(0<<MUX5) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0045 
; 0000 0046     printf("Porcentaje :\r");
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0047 
; 0000 0048     while (1)
;PCODE: $00000055 VOL: 0
; 0000 0049     {
; 0000 004A         lectura = read_adc(0);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 004B         DCEnt = (lectura*100)/255;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 004C         printf("es %i",DCEnt);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 004D         printf("%c",37);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 004E         printf("\r");
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 004F         delay_ms(100);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0050     }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0051 
; 0000 0052 }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
