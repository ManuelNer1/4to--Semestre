;/*
; * program.c
; *
; * Created: 30/04/2021 02:00:35 p. m.
; * Author: ManuelNeri
; */
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (1<<ADLAR))
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0012 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0013 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0014 // Delay needed for the stabilization of the ADC input voltage
; 0000 0015 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0016 // Start the AD conversion
; 0000 0017 ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0018 // Wait for the AD conversion to complete
; 0000 0019 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001A ADCSRA|=(1<<ADIF);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001B return ADCH;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 001C }
;PCODE: $00000023 VOL: 0
;
;void main(void)
; 0000 001F {
;PCODE: $00000024 VOL: 0
; 0000 0020     DDRB = 0x0E;    //Salidas en PB1, PB2, y PB3
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0021     DDRD = 0x68;    //Salidas en PD3, PD5 y PD6
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0022     TCCR0A = 0xA1;  //Timer 0 en Phase Correct PWM (8-bits)
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0023     TCCR0B = 1;     //Timer 0 sin Pre-escalador
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0024     TCCR1A = 0xA1;  //Timer 1 en Phase Correct PWM (8-bits)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0025     TCCR1B = 1;     //Timer 1 sin Pre-escalador
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0026     TCCR2A = 0xA1;  //Timer 2 en Phase Correct PWM (8-bits)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0027     TCCR2B = 1;     //Timer 2 sin Pre-escalador
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0028 
; 0000 0029     // ADC initialization
; 0000 002A // ADC Clock frequency: 500.000 kHz
; 0000 002B // ADC Voltage Reference: AVCC pin
; 0000 002C // ADC Auto Trigger Source: ADC Stopped
; 0000 002D // Only the 8 most significant bits of
; 0000 002E // the AD conversion result are used
; 0000 002F // Digital input buffers on ADC0: Off, ADC1: Off, ADC2: Off, ADC3: Off
; 0000 0030 // ADC4: Off, ADC5: Off
; 0000 0031 DIDR0=(1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (1<<ADC1D) | (1<<ADC0D);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0032 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0033 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0034 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0035 
; 0000 0036 // SPI initialization
; 0000 0037 // SPI disabled
; 0000 0038 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0039 
; 0000 003A // TWI initialization
; 0000 003B // TWI disabled
; 0000 003C TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 003D 
; 0000 003E     while (1)
;PCODE: $00000041 VOL: 0
; 0000 003F     {
; 0000 0040         OCR0A = read_adc(0);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0041         OCR0B = read_adc(1);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0042         OCR1AH = 0;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0043         OCR1AL = read_adc(2);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0044         OCR1BH = 0;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0045         OCR1BL = read_adc(3);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0046         OCR2A = read_adc(4);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0047         OCR2B = read_adc(5);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0048     }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0049 }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
