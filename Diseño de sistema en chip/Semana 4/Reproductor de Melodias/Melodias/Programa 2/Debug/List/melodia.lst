
AVRASM ver. 2.1.30  C:\Users\ManuelNeri\Desktop\Melodias\Programa 2\Debug\List\melodia.asm Sun Apr 25 12:19:06 2021

                 
                 
                 ;CodeVisionAVR C Compiler V3.43 Evaluation
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega2560
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega2560
                 	#pragma AVRPART MEMORY PROG_FLASH 262144
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU RAMPZ=0x3B
                 	.EQU EIND=0x3C
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x74
                 	.EQU XMCRB=0x75
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0200
                 	.EQU __SRAM_END=0x21FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00b9 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0000 	JMP  0x00
00004a 940c 0000 	JMP  0x00
00004c 940c 0000 	JMP  0x00
00004e 940c 0000 	JMP  0x00
000050 940c 0000 	JMP  0x00
000052 940c 0000 	JMP  0x00
000054 940c 0000 	JMP  0x00
000056 940c 0000 	JMP  0x00
000058 940c 0000 	JMP  0x00
00005a 940c 0000 	JMP  0x00
00005c 940c 0000 	JMP  0x00
00005e 940c 0000 	JMP  0x00
000060 940c 0000 	JMP  0x00
000062 940c 0000 	JMP  0x00
000064 940c 0000 	JMP  0x00
000066 940c 0000 	JMP  0x00
000068 940c 0000 	JMP  0x00
00006a 940c 0000 	JMP  0x00
00006c 940c 0000 	JMP  0x00
00006e 940c 0000 	JMP  0x00
000070 940c 0000 	JMP  0x00
                 
                 _melody:
000072 01ee
000073 0010
000074 03dc
000075 0010      	.DB  0xEE,0x1,0x10,0x0,0xDC,0x3,0x10,0x0
000076 02e4
000077 0010
000078 026e
000079 0010      	.DB  0xE4,0x2,0x10,0x0,0x6E,0x2,0x10,0x0
00007a 03dc
00007b 0020
00007c 02e4
00007d fff0      	.DB  0xDC,0x3,0x20,0x0,0xE4,0x2,0xF0,0xFF
00007e 026e
00007f 0008
000080 020b
000081 0010      	.DB  0x6E,0x2,0x8,0x0,0xB,0x2,0x10,0x0
000082 0417
000083 0010
000084 0620
000085 0010      	.DB  0x17,0x4,0x10,0x0,0x20,0x6,0x10,0x0
000086 0527
000087 0010
000088 0417
000089 0020      	.DB  0x27,0x5,0x10,0x0,0x17,0x4,0x20,0x0
00008a 0620
00008b fff0
00008c 0527
00008d 0008      	.DB  0x20,0x6,0xF0,0xFF,0x27,0x5,0x8,0x0
00008e 01ee
00008f 0010
000090 03dc
000091 0010      	.DB  0xEE,0x1,0x10,0x0,0xDC,0x3,0x10,0x0
000092 02e4
000093 0010
000094 026e
000095 0010      	.DB  0xE4,0x2,0x10,0x0,0x6E,0x2,0x10,0x0
000096 03dc
000097 0020
000098 02e4
000099 fff0      	.DB  0xDC,0x3,0x20,0x0,0xE4,0x2,0xF0,0xFF
00009a 026e
00009b 0008
00009c 026e
00009d 0020      	.DB  0x6E,0x2,0x8,0x0,0x6E,0x2,0x20,0x0
00009e 0293
00009f 0020
0000a0 02ba
0000a1 0020      	.DB  0x93,0x2,0x20,0x0,0xBA,0x2,0x20,0x0
0000a2 02ba
0000a3 0020
0000a4 02e4
0000a5 0020      	.DB  0xBA,0x2,0x20,0x0,0xE4,0x2,0x20,0x0
0000a6 0310
0000a7 0020
0000a8 0310
0000a9 0020      	.DB  0x10,0x3,0x20,0x0,0x10,0x3,0x20,0x0
0000aa 033f
0000ab 0020
0000ac 0370
0000ad 0010      	.DB  0x3F,0x3,0x20,0x0,0x70,0x3,0x10,0x0
0000ae 03dc
0000af 0008      	.DB  0xDC,0x3,0x8,0x0
                 
                 _0x3:
C:\Users\ManuelNeri\Desktop\Melodias\Programa 2\Debug\List\melodia.asm(1175): warning: .cseg .db misalignment - padding zero byte
0000b0 001f      	.DB  0x1F
                 _0x4:
C:\Users\ManuelNeri\Desktop\Melodias\Programa 2\Debug\List\melodia.asm(1177): warning: .cseg .db misalignment - padding zero byte
0000b1 00e4      	.DB  0xE4
                 
                 __GLOBAL_INI_TBL:
0000b2 0001      	.DW  0x01
0000b3 0400      	.DW  _notes
0000b4 0160      	.DW  _0x3*2
                 
0000b5 0001      	.DW  0x01
0000b6 0402      	.DW  _wholenote
0000b7 0162      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
0000b8 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000b9 94f8      	CLI
0000ba 27ee      	CLR  R30
0000bb bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000bc e0f1      	LDI  R31,1
0000bd bff5      	OUT  MCUCR,R31
0000be bfe5      	OUT  MCUCR,R30
0000bf 93e0 0074 	STS  XMCRA,R30
0000c1 93e0 0075 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
0000c3 e08d      	LDI  R24,(14-2)+1
0000c4 e0a2      	LDI  R26,2
0000c5 27bb      	CLR  R27
                 __CLEAR_REG:
0000c6 93ed      	ST   X+,R30
0000c7 958a      	DEC  R24
0000c8 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000c9 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000ca e290      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000cb e0a0      	LDI  R26,LOW(__SRAM_START)
0000cc e0b2      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000cd 93ed      	ST   X+,R30
0000ce 9701      	SBIW R24,1
0000cf f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000d0 e6e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000d1 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000d2 9185      	LPM  R24,Z+
0000d3 9195      	LPM  R25,Z+
0000d4 9700      	SBIW R24,0
0000d5 f061      	BREQ __GLOBAL_INI_END
0000d6 91a5      	LPM  R26,Z+
0000d7 91b5      	LPM  R27,Z+
0000d8 9005      	LPM  R0,Z+
0000d9 9015      	LPM  R1,Z+
0000da 01bf      	MOVW R22,R30
0000db 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000dc 9005      	LPM  R0,Z+
0000dd 920d      	ST   X+,R0
0000de 9701      	SBIW R24,1
0000df f7e1      	BRNE __GLOBAL_INI_LOOP
0000e0 01fb      	MOVW R30,R22
0000e1 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000e2 bf8b      	OUT  RAMPZ,R24
                 
0000e3 bf8c      	OUT  EIND,R24
                 
                 ;GPIOR0 INITIALIZATION
0000e4 e0e0      	LDI  R30,__GPIOR0_INIT
0000e5 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000e6 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000e7 bfed      	OUT  SPL,R30
0000e8 e2e1      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000e9 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000ea e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000eb e0d4      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ec 940c 012f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x400
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.DSEG
                 ;void tono(float frec){
                 ; 0000 007D void tono(float frec){
                 
                 	.CSEG
                 _tono:
                 ; .FSTART _tono
                 ; 0000 007E float Cuentas;
                 ; 0000 007F unsigned int CuentasEnt;
                 ; 0000 0080 DDRB.5=1;
0000ee d10c      	RCALL __PUTPARD2
0000ef 9724      	SBIW R28,4
0000f0 931a      	ST   -Y,R17
0000f1 930a      	ST   -Y,R16
                 ;	frec -> Y+6
                 ;	Cuentas -> Y+2
                 ;	CuentasEnt -> R16,R17
0000f2 9a25      	SBI  0x4,5
                 ; 0000 0081 Cuentas=500000.0/frec;//Ejemplo 1 frec=293.6 Cuentas=1702.997 Ejemplo2 frec=261.6 Cuentas=1911.31
                +
0000f3 81ee     +LDD R30 , Y + 6
0000f4 81ff     +LDD R31 , Y + 6 + 1
0000f5 8568     +LDD R22 , Y + 6 + 2
0000f6 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
0000f7 e0a0     +LDI R26 , LOW ( 0x48F42400 )
0000f8 e2b4     +LDI R27 , HIGH ( 0x48F42400 )
0000f9 ef84     +LDI R24 , BYTE3 ( 0x48F42400 )
0000fa e498     +LDI R25 , BYTE4 ( 0x48F42400 )
                 	__GETD2N 0x48F42400
0000fb d24d      	RCALL __DIVF21
                +
0000fc 83ea     +STD Y + 2 , R30
0000fd 83fb     +STD Y + 2 + 1 , R31
0000fe 836c     +STD Y + 2 + 2 , R22
0000ff 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 0082 CuentasEnt=Cuentas;
000100 d13d      	RCALL __CFD1U
000101 018f      	MOVW R16,R30
                 ; 0000 0083 if((Cuentas-CuentasEnt)>=0.5)
                +
000102 81aa     +LDD R26 , Y + 2
000103 81bb     +LDD R27 , Y + 2 + 1
000104 818c     +LDD R24 , Y + 2 + 2
000105 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000106 2766      	CLR  R22
000107 2777      	CLR  R23
000108 d16e      	RCALL __CDF1
000109 d0f6      	RCALL __SWAPD12
00010a d19f      	RCALL __SUBF12
00010b 01df      	MOVW R26,R30
00010c 01cb      	MOVW R24,R22
                +
00010d e0e0     +LDI R30 , LOW ( 0x3F000000 )
00010e e0f0     +LDI R31 , HIGH ( 0x3F000000 )
00010f e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000110 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000111 d27b      	RCALL __CMPF12
000112 f010      	BRLO _0x7
                 ; 0000 0084 CuentasEnt++;
                +
000113 5f0f     +SUBI R16 , LOW ( - 1 )
000114 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0085 TCCR1A=0x40; //Modo CTC
                 _0x7:
000115 e4e0      	LDI  R30,LOW(64)
000116 93e0 0080 	STS  128,R30
                 ; 0000 0086 TCCR1B=0x09; // SIn Pre-escalador (CK)
000118 e0e9      	LDI  R30,LOW(9)
000119 93e0 0081 	STS  129,R30
                 ; 0000 0087 OCR1AH=(CuentasEnt-1)/256;
00011b 01f8      	MOVW R30,R16
00011c 9731      	SBIW R30,1
00011d 2fef      	MOV  R30,R31
00011e e0f0      	LDI  R31,0
00011f 93e0 0089 	STS  137,R30
                 ; 0000 0088 OCR1AL=(CuentasEnt-1)%256;
000121 2fe0      	MOV  R30,R16
000122 50e1      	SUBI R30,LOW(1)
000123 93e0 0088 	STS  136,R30
                 ; 0000 0089 }
000125 8119      	LDD  R17,Y+1
000126 8108      	LDD  R16,Y+0
000127 962a      	ADIW R28,10
000128 9508      	RET
                 ; .FEND
                 ;void noTono(){
                 ; 0000 008B void noTono(){
                 _noTono:
                 ; .FSTART _noTono
                 ; 0000 008C TCCR1A=0;
000129 e0e0      	LDI  R30,LOW(0)
00012a 93e0 0080 	STS  128,R30
                 ; 0000 008D TCCR1B=0;  //Apaga timer (Stop)
00012c 93e0 0081 	STS  129,R30
                 ; 0000 008E }
00012e 9508      	RET
                 ; .FEND
                 ;void main(void)
                 ; 0000 0091 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0092 PORTC.0 = 1;
00012f 9a40      	SBI  0x8,0
                 ; 0000 0093 CLKPR=0x80;
000130 e8e0      	LDI  R30,LOW(128)
000131 93e0 0061 	STS  97,R30
                 ; 0000 0094 CLKPR=0x04;//Mega a 1Mhz  16Mhz/16=1MHz
000133 e0e4      	LDI  R30,LOW(4)
000134 93e0 0061 	STS  97,R30
                 ; 0000 0095 while (1)
                 _0xA:
                 ; 0000 0096 {
                 ; 0000 0097 unsigned int thisNote;
                 ; 0000 0098 for (thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
000136 9722      	SBIW R28,2
                 ;	thisNote -> Y+0
000137 e0e0      	LDI  R30,LOW(0)
000138 83e8      	STD  Y+0,R30
000139 83e9      	STD  Y+0+1,R30
                 _0xE:
00013a 91e0 0400 	LDS  R30,_notes
00013c 91f0 0401 	LDS  R31,_notes+1
00013e 0fee      	LSL  R30
00013f 1fff      	ROL  R31
000140 81a8      	LD   R26,Y
000141 81b9      	LDD  R27,Y+1
000142 17ae      	CP   R26,R30
000143 07bf      	CPC  R27,R31
000144 f008      	BRLO PC+2
000145 c04b      	RJMP _0xF
                 ; 0000 0099 divider = melody[thisNote + 1];
000146 81e8      	LD   R30,Y
000147 81f9      	LDD  R31,Y+1
000148 0fee      	LSL  R30
000149 1fff      	ROL  R31
                +
00014a 51ea     +SUBI R30 , LOW ( - 2 * _melody - ( 2 ) )
00014b 4fff     +SBCI R31 , HIGH ( - 2 * _melody - ( 2 ) )
                 	__ADDW1FN _melody,2
00014c d0aa      	RCALL __GETW1PF
00014d d046      	RCALL SUBOPT_0x0
                 ; 0000 009A if (divider > 0) {
00014e 91a0 0404 	LDS  R26,_divider
000150 91b0 0405 	LDS  R27,_divider+1
000152 d0ba      	RCALL __CPW02
000153 f41c      	BRGE _0x10
                 ; 0000 009B noteDuration = (wholenote) / divider;
000154 d044      	RCALL SUBOPT_0x1
000155 d048      	RCALL SUBOPT_0x2
                 ; 0000 009C } else if (divider < 0) {
000156 c016      	RJMP _0x11
                 _0x10:
000157 91a0 0405 	LDS  R26,_divider+1
000159 23aa      	TST  R26
00015a f492      	BRPL _0x12
                 ; 0000 009D divider=(-1)*divider;
00015b d03d      	RCALL SUBOPT_0x1
00015c efaf      	LDI  R26,LOW(65535)
00015d efbf      	LDI  R27,HIGH(65535)
00015e d06d      	RCALL __MULW12
00015f d034      	RCALL SUBOPT_0x0
                 ; 0000 009E noteDuration = (wholenote) /divider;
000160 d038      	RCALL SUBOPT_0x1
000161 d03c      	RCALL SUBOPT_0x2
                 ; 0000 009F noteDuration = noteDuration*1.5;
000162 d045      	RCALL SUBOPT_0x3
                +
000163 e0a0     +LDI R26 , LOW ( 0x3FC00000 )
000164 e0b0     +LDI R27 , HIGH ( 0x3FC00000 )
000165 ec80     +LDI R24 , BYTE3 ( 0x3FC00000 )
000166 e39f     +LDI R25 , BYTE4 ( 0x3FC00000 )
                 	__GETD2N 0x3FC00000
000167 d193      	RCALL __MULF12
000168 e0a6      	LDI  R26,LOW(_noteDuration)
000169 e0b4      	LDI  R27,HIGH(_noteDuration)
00016a d0d5      	RCALL __CFD1
00016b 93ed      	ST   X+,R30
00016c 93fc      	ST   X,R31
                 ; 0000 00A0 }
                 ; 0000 00A1 while (PORTC.0 == 0){
                 _0x12:
                 _0x11:
                 _0x13:
00016d 9940      	SBIC 0x8,0
00016e c01c      	RJMP _0x15
                 ; 0000 00A2 tono(melody[thisNote]);
00016f 81e8      	LD   R30,Y
000170 81f9      	LDD  R31,Y+1
000171 eea4      	LDI  R26,LOW(_melody*2)
000172 e0b0      	LDI  R27,HIGH(_melody*2)
000173 0fee      	LSL  R30
000174 1fff      	ROL  R31
000175 0fea      	ADD  R30,R26
000176 1ffb      	ADC  R31,R27
000177 d07f      	RCALL __GETW1PF
000178 d046      	RCALL __CWD1
000179 d0fd      	RCALL __CDF1
00017a 01df      	MOVW R26,R30
00017b 01cb      	MOVW R24,R22
00017c df71      	RCALL _tono
                 ; 0000 00A3 delay_ms(noteDuration*0.9);
00017d d02a      	RCALL SUBOPT_0x3
                +
00017e e6a6     +LDI R26 , LOW ( 0x3F666666 )
00017f e6b6     +LDI R27 , HIGH ( 0x3F666666 )
000180 e686     +LDI R24 , BYTE3 ( 0x3F666666 )
000181 e39f     +LDI R25 , BYTE4 ( 0x3F666666 )
                 	__GETD2N 0x3F666666
000182 d02c      	RCALL SUBOPT_0x4
                 ; 0000 00A4 noTono();
000183 dfa5      	RCALL _noTono
                 ; 0000 00A5 delay_ms(noteDuration*0.1);
000184 d023      	RCALL SUBOPT_0x3
                +
000185 ecad     +LDI R26 , LOW ( 0x3DCCCCCD )
000186 ecbc     +LDI R27 , HIGH ( 0x3DCCCCCD )
000187 ec8c     +LDI R24 , BYTE3 ( 0x3DCCCCCD )
000188 e39d     +LDI R25 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD2N 0x3DCCCCCD
000189 d025      	RCALL SUBOPT_0x4
                 ; 0000 00A6 }
00018a cfe2      	RJMP _0x13
                 _0x15:
                 ; 0000 00A7 }
00018b 81e8      	LD   R30,Y
00018c 81f9      	LDD  R31,Y+1
00018d 9632      	ADIW R30,2
00018e 83e8      	ST   Y,R30
00018f 83f9      	STD  Y+1,R31
000190 cfa9      	RJMP _0xE
                 _0xF:
                 ; 0000 00A8 }
000191 9622      	ADIW R28,2
000192 cfa3      	RJMP _0xA
                 ; 0000 00A9 }
                 _0x16:
000193 cfff      	RJMP _0x16
                 ; .FEND
                 
                 	.DSEG
                 _notes:
000400           	.BYTE 0x2
                 _wholenote:
000402           	.BYTE 0x2
                 _divider:
000404           	.BYTE 0x2
                 _noteDuration:
000406           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000194 93e0 0404 	STS  _divider,R30
000196 93f0 0405 	STS  _divider+1,R31
000198 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
000199 91e0 0404 	LDS  R30,_divider
00019b 91f0 0405 	LDS  R31,_divider+1
00019d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
00019e 91a0 0402 	LDS  R26,_wholenote
0001a0 91b0 0403 	LDS  R27,_wholenote+1
0001a2 d041      	RCALL __DIVW21
0001a3 93e0 0406 	STS  _noteDuration,R30
0001a5 93f0 0407 	STS  _noteDuration+1,R31
0001a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x3:
0001a8 91e0 0406 	LDS  R30,_noteDuration
0001aa 91f0 0407 	LDS  R31,_noteDuration+1
0001ac d012      	RCALL __CWD1
0001ad d0c9      	RCALL __CDF1
0001ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0001af d14b      	RCALL __MULF12
0001b0 d08d      	RCALL __CFD1U
0001b1 01df      	MOVW R26,R30
0001b2 c1fa      	RJMP _delay_ms
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __ANEGW1:
0001b3 95f1      	NEG  R31
0001b4 95e1      	NEG  R30
0001b5 40f0      	SBCI R31,0
0001b6 9508      	RET
                 
                 __ANEGD1:
0001b7 95f0      	COM  R31
0001b8 9560      	COM  R22
0001b9 9570      	COM  R23
0001ba 95e1      	NEG  R30
0001bb 4fff      	SBCI R31,-1
0001bc 4f6f      	SBCI R22,-1
0001bd 4f7f      	SBCI R23,-1
0001be 9508      	RET
                 
                 __CWD1:
0001bf 2f6f      	MOV  R22,R31
0001c0 0f66      	ADD  R22,R22
0001c1 0b66      	SBC  R22,R22
0001c2 2f76      	MOV  R23,R22
0001c3 9508      	RET
                 
                 __MULW12U:
0001c4 9ffa      	MUL  R31,R26
0001c5 2df0      	MOV  R31,R0
0001c6 9feb      	MUL  R30,R27
0001c7 0df0      	ADD  R31,R0
0001c8 9fea      	MUL  R30,R26
0001c9 2de0      	MOV  R30,R0
0001ca 0df1      	ADD  R31,R1
0001cb 9508      	RET
                 
                 __MULW12:
0001cc d01c      	RCALL __CHKSIGNW
0001cd dff6      	RCALL __MULW12U
0001ce f40e      	BRTC __MULW121
0001cf dfe3      	RCALL __ANEGW1
                 __MULW121:
0001d0 9508      	RET
                 
                 __DIVW21U:
0001d1 2400      	CLR  R0
0001d2 2411      	CLR  R1
0001d3 e190      	LDI  R25,16
                 __DIVW21U1:
0001d4 0faa      	LSL  R26
0001d5 1fbb      	ROL  R27
0001d6 1c00      	ROL  R0
0001d7 1c11      	ROL  R1
0001d8 1a0e      	SUB  R0,R30
0001d9 0a1f      	SBC  R1,R31
0001da f418      	BRCC __DIVW21U2
0001db 0e0e      	ADD  R0,R30
0001dc 1e1f      	ADC  R1,R31
0001dd c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001de 60a1      	SBR  R26,1
                 __DIVW21U3:
0001df 959a      	DEC  R25
0001e0 f799      	BRNE __DIVW21U1
0001e1 01fd      	MOVW R30,R26
0001e2 01d0      	MOVW R26,R0
0001e3 9508      	RET
                 
                 __DIVW21:
0001e4 d004      	RCALL __CHKSIGNW
0001e5 dfeb      	RCALL __DIVW21U
0001e6 f40e      	BRTC __DIVW211
0001e7 dfcb      	RCALL __ANEGW1
                 __DIVW211:
0001e8 9508      	RET
                 
                 __CHKSIGNW:
0001e9 94e8      	CLT
0001ea fff7      	SBRS R31,7
0001eb c002      	RJMP __CHKSW1
0001ec dfc6      	RCALL __ANEGW1
0001ed 9468      	SET
                 __CHKSW1:
0001ee ffb7      	SBRS R27,7
0001ef c006      	RJMP __CHKSW2
0001f0 95b1      	NEG  R27
0001f1 95a1      	NEG  R26
0001f2 40b0      	SBCI R27,0
0001f3 f800      	BLD  R0,0
0001f4 9403      	INC  R0
0001f5 fa00      	BST  R0,0
                 __CHKSW2:
0001f6 9508      	RET
                 
                 __GETW1PF:
0001f7 9005      	LPM  R0,Z+
0001f8 91f4      	LPM  R31,Z
0001f9 2de0      	MOV  R30,R0
0001fa 9508      	RET
                 
                 __PUTPARD2:
0001fb 939a      	ST   -Y,R25
0001fc 938a      	ST   -Y,R24
0001fd 93ba      	ST   -Y,R27
0001fe 93aa      	ST   -Y,R26
0001ff 9508      	RET
                 
                 __SWAPD12:
000200 2e18      	MOV  R1,R24
000201 2f86      	MOV  R24,R22
000202 2d61      	MOV  R22,R1
000203 2e19      	MOV  R1,R25
000204 2f97      	MOV  R25,R23
000205 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000206 2e1b      	MOV  R1,R27
000207 2fbf      	MOV  R27,R31
000208 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000209 2e1a      	MOV  R1,R26
00020a 2fae      	MOV  R26,R30
00020b 2de1      	MOV  R30,R1
00020c 9508      	RET
                 
                 __CPW02:
00020d 2400      	CLR  R0
00020e 160a      	CP   R0,R26
00020f 060b      	CPC  R0,R27
000210 9508      	RET
                 
                 __ROUND_REPACK:
000211 2355      	TST  R21
000212 f442      	BRPL __REPACK
000213 3850      	CPI  R21,0x80
000214 f411      	BRNE __ROUND_REPACK0
000215 ffe0      	SBRS R30,0
000216 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000217 9631      	ADIW R30,1
000218 1f69      	ADC  R22,R25
000219 1f79      	ADC  R23,R25
00021a f06b      	BRVS __REPACK1
                 
                 __REPACK:
00021b e850      	LDI  R21,0x80
00021c 2757      	EOR  R21,R23
00021d f411      	BRNE __REPACK0
00021e 935f      	PUSH R21
00021f c0ca      	RJMP __ZERORES
                 __REPACK0:
000220 3f5f      	CPI  R21,0xFF
000221 f031      	BREQ __REPACK1
000222 0f66      	LSL  R22
000223 0c00      	LSL  R0
000224 9557      	ROR  R21
000225 9567      	ROR  R22
000226 2f75      	MOV  R23,R21
000227 9508      	RET
                 __REPACK1:
000228 935f      	PUSH R21
000229 2000      	TST  R0
00022a f00a      	BRMI __REPACK2
00022b c0c9      	RJMP __MAXRES
                 __REPACK2:
00022c c0c2      	RJMP __MINRES
                 
                 __UNPACK:
00022d e850      	LDI  R21,0x80
00022e 2e19      	MOV  R1,R25
00022f 2215      	AND  R1,R21
000230 0f88      	LSL  R24
000231 1f99      	ROL  R25
000232 2795      	EOR  R25,R21
000233 0f55      	LSL  R21
000234 9587      	ROR  R24
                 
                 __UNPACK1:
000235 e850      	LDI  R21,0x80
000236 2e07      	MOV  R0,R23
000237 2205      	AND  R0,R21
000238 0f66      	LSL  R22
000239 1f77      	ROL  R23
00023a 2775      	EOR  R23,R21
00023b 0f55      	LSL  R21
00023c 9567      	ROR  R22
00023d 9508      	RET
                 
                 __CFD1U:
00023e 9468      	SET
00023f c001      	RJMP __CFD1U0
                 __CFD1:
000240 94e8      	CLT
                 __CFD1U0:
000241 935f      	PUSH R21
000242 dff2      	RCALL __UNPACK1
000243 3870      	CPI  R23,0x80
000244 f018      	BRLO __CFD10
000245 3f7f      	CPI  R23,0xFF
000246 f408      	BRCC __CFD10
000247 c0a2      	RJMP __ZERORES
                 __CFD10:
000248 e156      	LDI  R21,22
000249 1b57      	SUB  R21,R23
00024a f4aa      	BRPL __CFD11
00024b 9551      	NEG  R21
00024c 3058      	CPI  R21,8
00024d f40e      	BRTC __CFD19
00024e 3059      	CPI  R21,9
                 __CFD19:
00024f f030      	BRLO __CFD17
000250 efef      	SER  R30
000251 efff      	SER  R31
000252 ef6f      	SER  R22
000253 e77f      	LDI  R23,0x7F
000254 f977      	BLD  R23,7
000255 c01a      	RJMP __CFD15
                 __CFD17:
000256 2777      	CLR  R23
000257 2355      	TST  R21
000258 f0b9      	BREQ __CFD15
                 __CFD18:
000259 0fee      	LSL  R30
00025a 1fff      	ROL  R31
00025b 1f66      	ROL  R22
00025c 1f77      	ROL  R23
00025d 955a      	DEC  R21
00025e f7d1      	BRNE __CFD18
00025f c010      	RJMP __CFD15
                 __CFD11:
000260 2777      	CLR  R23
                 __CFD12:
000261 3058      	CPI  R21,8
000262 f028      	BRLO __CFD13
000263 2fef      	MOV  R30,R31
000264 2ff6      	MOV  R31,R22
000265 2f67      	MOV  R22,R23
000266 5058      	SUBI R21,8
000267 cff9      	RJMP __CFD12
                 __CFD13:
000268 2355      	TST  R21
000269 f031      	BREQ __CFD15
                 __CFD14:
00026a 9576      	LSR  R23
00026b 9567      	ROR  R22
00026c 95f7      	ROR  R31
00026d 95e7      	ROR  R30
00026e 955a      	DEC  R21
00026f f7d1      	BRNE __CFD14
                 __CFD15:
000270 2000      	TST  R0
000271 f40a      	BRPL __CFD16
000272 df44      	RCALL __ANEGD1
                 __CFD16:
000273 915f      	POP  R21
000274 9508      	RET
                 
                 __CDF1U:
000275 9468      	SET
000276 c001      	RJMP __CDF1U0
                 __CDF1:
000277 94e8      	CLT
                 __CDF1U0:
000278 9730      	SBIW R30,0
000279 4060      	SBCI R22,0
00027a 4070      	SBCI R23,0
00027b f0b1      	BREQ __CDF10
00027c 2400      	CLR  R0
00027d f026      	BRTS __CDF11
00027e 2377      	TST  R23
00027f f412      	BRPL __CDF11
000280 9400      	COM  R0
000281 df35      	RCALL __ANEGD1
                 __CDF11:
000282 2e17      	MOV  R1,R23
000283 e17e      	LDI  R23,30
000284 2011      	TST  R1
                 __CDF12:
000285 f032      	BRMI __CDF13
000286 957a      	DEC  R23
000287 0fee      	LSL  R30
000288 1fff      	ROL  R31
000289 1f66      	ROL  R22
00028a 1c11      	ROL  R1
00028b cff9      	RJMP __CDF12
                 __CDF13:
00028c 2fef      	MOV  R30,R31
00028d 2ff6      	MOV  R31,R22
00028e 2d61      	MOV  R22,R1
00028f 935f      	PUSH R21
000290 df8a      	RCALL __REPACK
000291 915f      	POP  R21
                 __CDF10:
000292 9508      	RET
                 
                 __SWAPACC:
000293 934f      	PUSH R20
000294 01af      	MOVW R20,R30
000295 01fd      	MOVW R30,R26
000296 01da      	MOVW R26,R20
000297 01ab      	MOVW R20,R22
000298 01bc      	MOVW R22,R24
000299 01ca      	MOVW R24,R20
00029a 2d40      	MOV  R20,R0
00029b 2c01      	MOV  R0,R1
00029c 2e14      	MOV  R1,R20
00029d 914f      	POP  R20
00029e 9508      	RET
                 
                 __UADD12:
00029f 0fea      	ADD  R30,R26
0002a0 1ffb      	ADC  R31,R27
0002a1 1f68      	ADC  R22,R24
0002a2 9508      	RET
                 
                 __NEGMAN1:
0002a3 95e0      	COM  R30
0002a4 95f0      	COM  R31
0002a5 9560      	COM  R22
0002a6 5fef      	SUBI R30,-1
0002a7 4fff      	SBCI R31,-1
0002a8 4f6f      	SBCI R22,-1
0002a9 9508      	RET
                 
                 __SUBF12:
0002aa 935f      	PUSH R21
0002ab df81      	RCALL __UNPACK
0002ac 3890      	CPI  R25,0x80
0002ad f149      	BREQ __ADDF129
0002ae e850      	LDI  R21,0x80
0002af 2615      	EOR  R1,R21
                 
                 __ADDF120:
0002b0 3870      	CPI  R23,0x80
0002b1 f121      	BREQ __ADDF128
                 __ADDF121:
0002b2 2f57      	MOV  R21,R23
0002b3 1b59      	SUB  R21,R25
0002b4 f12b      	BRVS __ADDF1211
0002b5 f412      	BRPL __ADDF122
0002b6 dfdc      	RCALL __SWAPACC
0002b7 cffa      	RJMP __ADDF121
                 __ADDF122:
0002b8 3158      	CPI  R21,24
0002b9 f018      	BRLO __ADDF123
0002ba 27aa      	CLR  R26
0002bb 27bb      	CLR  R27
0002bc 2788      	CLR  R24
                 __ADDF123:
0002bd 3058      	CPI  R21,8
0002be f028      	BRLO __ADDF124
0002bf 2fab      	MOV  R26,R27
0002c0 2fb8      	MOV  R27,R24
0002c1 2788      	CLR  R24
0002c2 5058      	SUBI R21,8
0002c3 cff9      	RJMP __ADDF123
                 __ADDF124:
0002c4 2355      	TST  R21
0002c5 f029      	BREQ __ADDF126
                 __ADDF125:
0002c6 9586      	LSR  R24
0002c7 95b7      	ROR  R27
0002c8 95a7      	ROR  R26
0002c9 955a      	DEC  R21
0002ca f7d9      	BRNE __ADDF125
                 __ADDF126:
0002cb 2d50      	MOV  R21,R0
0002cc 2551      	EOR  R21,R1
0002cd f072      	BRMI __ADDF127
0002ce dfd0      	RCALL __UADD12
0002cf f438      	BRCC __ADDF129
0002d0 9567      	ROR  R22
0002d1 95f7      	ROR  R31
0002d2 95e7      	ROR  R30
0002d3 9573      	INC  R23
0002d4 f413      	BRVC __ADDF129
0002d5 c01f      	RJMP __MAXRES
                 __ADDF128:
0002d6 dfbc      	RCALL __SWAPACC
                 __ADDF129:
0002d7 df43      	RCALL __REPACK
0002d8 915f      	POP  R21
0002d9 9508      	RET
                 __ADDF1211:
0002da f7d8      	BRCC __ADDF128
0002db cffb      	RJMP __ADDF129
                 __ADDF127:
0002dc 1bea      	SUB  R30,R26
0002dd 0bfb      	SBC  R31,R27
0002de 0b68      	SBC  R22,R24
0002df f051      	BREQ __ZERORES
0002e0 f410      	BRCC __ADDF1210
0002e1 9400      	COM  R0
0002e2 dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
0002e3 2366      	TST  R22
0002e4 f392      	BRMI __ADDF129
0002e5 0fee      	LSL  R30
0002e6 1fff      	ROL  R31
0002e7 1f66      	ROL  R22
0002e8 957a      	DEC  R23
0002e9 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0002ea 27ee      	CLR  R30
0002eb 27ff      	CLR  R31
0002ec 01bf      	MOVW R22,R30
0002ed 915f      	POP  R21
0002ee 9508      	RET
                 
                 __MINRES:
0002ef efef      	SER  R30
0002f0 efff      	SER  R31
0002f1 e76f      	LDI  R22,0x7F
0002f2 ef7f      	SER  R23
0002f3 915f      	POP  R21
0002f4 9508      	RET
                 
                 __MAXRES:
0002f5 efef      	SER  R30
0002f6 efff      	SER  R31
0002f7 e76f      	LDI  R22,0x7F
0002f8 e77f      	LDI  R23,0x7F
0002f9 915f      	POP  R21
0002fa 9508      	RET
                 
                 __MULF12:
0002fb 935f      	PUSH R21
0002fc df30      	RCALL __UNPACK
0002fd 3870      	CPI  R23,0x80
0002fe f359      	BREQ __ZERORES
0002ff 3890      	CPI  R25,0x80
000300 f349      	BREQ __ZERORES
000301 2401      	EOR  R0,R1
000302 9408      	SEC
000303 1f79      	ADC  R23,R25
000304 f423      	BRVC __MULF124
000305 f324      	BRLT __ZERORES
                 __MULF125:
000306 2000      	TST  R0
000307 f33a      	BRMI __MINRES
000308 cfec      	RJMP __MAXRES
                 __MULF124:
000309 920f      	PUSH R0
00030a 931f      	PUSH R17
00030b 932f      	PUSH R18
00030c 933f      	PUSH R19
00030d 934f      	PUSH R20
00030e 2711      	CLR  R17
00030f 2722      	CLR  R18
000310 2799      	CLR  R25
000311 9f68      	MUL  R22,R24
000312 01a0      	MOVW R20,R0
000313 9f8f      	MUL  R24,R31
000314 2d30      	MOV  R19,R0
000315 0d41      	ADD  R20,R1
000316 1f59      	ADC  R21,R25
000317 9f6b      	MUL  R22,R27
000318 0d30      	ADD  R19,R0
000319 1d41      	ADC  R20,R1
00031a 1f59      	ADC  R21,R25
00031b 9f8e      	MUL  R24,R30
00031c d027      	RCALL __MULF126
00031d 9fbf      	MUL  R27,R31
00031e d025      	RCALL __MULF126
00031f 9f6a      	MUL  R22,R26
000320 d023      	RCALL __MULF126
000321 9fbe      	MUL  R27,R30
000322 d01d      	RCALL __MULF127
000323 9faf      	MUL  R26,R31
000324 d01b      	RCALL __MULF127
000325 9fae      	MUL  R26,R30
000326 0d11      	ADD  R17,R1
000327 1f29      	ADC  R18,R25
000328 1f39      	ADC  R19,R25
000329 1f49      	ADC  R20,R25
00032a 1f59      	ADC  R21,R25
00032b 2fe3      	MOV  R30,R19
00032c 2ff4      	MOV  R31,R20
00032d 2f65      	MOV  R22,R21
00032e 2f52      	MOV  R21,R18
00032f 914f      	POP  R20
000330 913f      	POP  R19
000331 912f      	POP  R18
000332 911f      	POP  R17
000333 900f      	POP  R0
000334 2366      	TST  R22
000335 f02a      	BRMI __MULF122
000336 0f55      	LSL  R21
000337 1fee      	ROL  R30
000338 1fff      	ROL  R31
000339 1f66      	ROL  R22
00033a c002      	RJMP __MULF123
                 __MULF122:
00033b 9573      	INC  R23
00033c f24b      	BRVS __MULF125
                 __MULF123:
00033d ded3      	RCALL __ROUND_REPACK
00033e 915f      	POP  R21
00033f 9508      	RET
                 
                 __MULF127:
000340 0d10      	ADD  R17,R0
000341 1d21      	ADC  R18,R1
000342 1f39      	ADC  R19,R25
000343 c002      	RJMP __MULF128
                 __MULF126:
000344 0d20      	ADD  R18,R0
000345 1d31      	ADC  R19,R1
                 __MULF128:
000346 1f49      	ADC  R20,R25
000347 1f59      	ADC  R21,R25
000348 9508      	RET
                 
                 __DIVF21:
000349 935f      	PUSH R21
00034a dee2      	RCALL __UNPACK
00034b 3870      	CPI  R23,0x80
00034c f421      	BRNE __DIVF210
00034d 2011      	TST  R1
                 __DIVF211:
00034e f40a      	BRPL __DIVF219
00034f cf9f      	RJMP __MINRES
                 __DIVF219:
000350 cfa4      	RJMP __MAXRES
                 __DIVF210:
000351 3890      	CPI  R25,0x80
000352 f409      	BRNE __DIVF218
                 __DIVF217:
000353 cf96      	RJMP __ZERORES
                 __DIVF218:
000354 2401      	EOR  R0,R1
000355 9408      	SEC
000356 0b97      	SBC  R25,R23
000357 f41b      	BRVC __DIVF216
000358 f3d4      	BRLT __DIVF217
000359 2000      	TST  R0
00035a cff3      	RJMP __DIVF211
                 __DIVF216:
00035b 2f79      	MOV  R23,R25
00035c 931f      	PUSH R17
00035d 932f      	PUSH R18
00035e 933f      	PUSH R19
00035f 934f      	PUSH R20
000360 2411      	CLR  R1
000361 2711      	CLR  R17
000362 2722      	CLR  R18
000363 2733      	CLR  R19
000364 01a9      	MOVW R20,R18
000365 e290      	LDI  R25,32
                 __DIVF212:
000366 17ae      	CP   R26,R30
000367 07bf      	CPC  R27,R31
000368 0786      	CPC  R24,R22
000369 0741      	CPC  R20,R17
00036a f030      	BRLO __DIVF213
00036b 1bae      	SUB  R26,R30
00036c 0bbf      	SBC  R27,R31
00036d 0b86      	SBC  R24,R22
00036e 0b41      	SBC  R20,R17
00036f 9408      	SEC
000370 c001      	RJMP __DIVF214
                 __DIVF213:
000371 9488      	CLC
                 __DIVF214:
000372 1f55      	ROL  R21
000373 1f22      	ROL  R18
000374 1f33      	ROL  R19
000375 1c11      	ROL  R1
000376 1faa      	ROL  R26
000377 1fbb      	ROL  R27
000378 1f88      	ROL  R24
000379 1f44      	ROL  R20
00037a 959a      	DEC  R25
00037b f751      	BRNE __DIVF212
00037c 01f9      	MOVW R30,R18
00037d 2d61      	MOV  R22,R1
00037e 914f      	POP  R20
00037f 913f      	POP  R19
000380 912f      	POP  R18
000381 911f      	POP  R17
000382 2366      	TST  R22
000383 f032      	BRMI __DIVF215
000384 0f55      	LSL  R21
000385 1fee      	ROL  R30
000386 1fff      	ROL  R31
000387 1f66      	ROL  R22
000388 957a      	DEC  R23
000389 f24b      	BRVS __DIVF217
                 __DIVF215:
00038a de86      	RCALL __ROUND_REPACK
00038b 915f      	POP  R21
00038c 9508      	RET
                 
                 __CMPF12:
00038d 2399      	TST  R25
00038e f09a      	BRMI __CMPF120
00038f 2377      	TST  R23
000390 f042      	BRMI __CMPF121
000391 1797      	CP   R25,R23
000392 f048      	BRLO __CMPF122
000393 f429      	BRNE __CMPF121
000394 17ae      	CP   R26,R30
000395 07bf      	CPC  R27,R31
000396 0786      	CPC  R24,R22
000397 f020      	BRLO __CMPF122
000398 f031      	BREQ __CMPF123
                 __CMPF121:
000399 9498      	CLZ
00039a 9488      	CLC
00039b 9508      	RET
                 __CMPF122:
00039c 9498      	CLZ
00039d 9408      	SEC
00039e 9508      	RET
                 __CMPF123:
00039f 9418      	SEZ
0003a0 9488      	CLC
0003a1 9508      	RET
                 __CMPF120:
0003a2 2377      	TST  R23
0003a3 f7c2      	BRPL __CMPF122
0003a4 1797      	CP   R25,R23
0003a5 f398      	BRLO __CMPF121
0003a6 f7a9      	BRNE __CMPF122
0003a7 17ea      	CP   R30,R26
0003a8 07fb      	CPC  R31,R27
0003a9 0768      	CPC  R22,R24
0003aa f388      	BRLO __CMPF122
0003ab f399      	BREQ __CMPF123
0003ac cfec      	RJMP __CMPF121
                 
                 _delay_ms:
0003ad 9610      	adiw r26,0
0003ae f039      	breq __delay_ms1
                 __delay_ms0:
0003af 95a8      	wdr
                +
0003b0 ea80     +LDI R24 , LOW ( 0xFA0 )
0003b1 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0003b2 9701     +SBIW R24 , 1
0003b3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0003b4 9711      	sbiw r26,1
0003b5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003b6 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega2560 register use summary:
r0 :  42 r1 :  35 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   6 r17:  13 r18:  13 r19:  12 r20:  22 r21:  61 r22:  57 r23:  47 
r24:  39 r25:  40 r26:  49 r27:  39 r28:   5 r29:   1 r30: 105 r31:  66 
x  :   5 y  :  32 z  :   9 
Registers used: 21 out of 35 (60.0%)

ATmega2560 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  19 add   :  11 
adiw  :   5 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  14 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  12 
brlt  :   2 brmi  :   9 brne  :  16 brpl  :   8 brsh  :   0 brtc  :   3 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   1 call  :   0 
cbi   :   0 cbr   :   0 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  23 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 
cp    :   7 cpc   :   9 cpi   :  15 cpse  :   0 dec   :   9 des   :   0 
eicall:   0 eijmp :   0 elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   3 jmp   :  58 
ld    :   4 ldd   :  14 ldi   :  61 lds   :  11 lpm   :  10 lsl   :  15 
lsr   :   2 mov   :  43 movw  :  22 mul   :  12 muls  :   0 mulsu :   0 
neg   :   6 nop   :   0 or    :   0 ori   :   0 out   :   8 pop   :  18 
push  :  17 rcall :  60 ret   :  36 reti  :   0 rjmp  :  36 rol   :  30 
ror   :  12 sbc   :   8 sbci  :  11 sbi   :   2 sbic  :   1 sbis  :   0 
sbiw  :   9 sbr   :   1 sbrc  :   0 sbrs  :   3 sec   :   4 seh   :   0 
sei   :   0 sen   :   0 ser   :   8 ses   :   0 set   :   3 sev   :   0 
sez   :   1 sleep :   0 spm   :   0 st    :  12 std   :   7 sts   :  14 
sub   :   5 subi  :   6 swap  :   0 tst   :  18 wdr   :   1 
Instructions used: 68 out of 119 (57.1%)

ATmega2560 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00076e   1760    142   1902  262144   0.7%
[.dseg] 0x000200 0x000408      0      8      8    8192   0.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 2 warnings
