
AVRASM ver. 2.1.30  C:\Users\ManuelNeri\Desktop\PacManPractica\PacManPractica\Debug\List\PacMan.asm Mon Apr 19 17:48:07 2021

                 
                 
                 ;CodeVisionAVR C Compiler V3.43 
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega2560
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega2560
                 	#pragma AVRPART MEMORY PROG_FLASH 262144
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU RAMPZ=0x3B
                 	.EQU EIND=0x3C
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x74
                 	.EQU XMCRB=0x75
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0200
                 	.EQU __SRAM_END=0x21FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00a7 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0000 	JMP  0x00
00004a 940c 0000 	JMP  0x00
00004c 940c 0000 	JMP  0x00
00004e 940c 0000 	JMP  0x00
000050 940c 0000 	JMP  0x00
000052 940c 0000 	JMP  0x00
000054 940c 0000 	JMP  0x00
000056 940c 0000 	JMP  0x00
000058 940c 0000 	JMP  0x00
00005a 940c 0000 	JMP  0x00
00005c 940c 0000 	JMP  0x00
00005e 940c 0000 	JMP  0x00
000060 940c 0000 	JMP  0x00
000062 940c 0000 	JMP  0x00
000064 940c 0000 	JMP  0x00
000066 940c 0000 	JMP  0x00
000068 940c 0000 	JMP  0x00
00006a 940c 0000 	JMP  0x00
00006c 940c 0000 	JMP  0x00
00006e 940c 0000 	JMP  0x00
000070 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000072 2710
000073 03e8
000074 0064
000075 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000076 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000077 1000
000078 0100
000079 0010
00007a 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
00007b 0303
00007c 0203
00007d 0c02
00007e 0800      	.DB  0x3,0x3,0x3,0x2,0x2,0xC,0x0,0x8
00007f 0100
000080 0600      	.DB  0x0,0x1,0x0,0x6
                 _0x27:
000081 1d0e
000082 1c1e
000083 1f1e
C:\Users\ManuelNeri\Desktop\PacManPractica\PacManPractica\Debug\List\PacMan.asm(1166): warning: .cseg .db misalignment - padding zero byte
000084 000e      	.DB  0xE,0x1D,0x1E,0x1C,0x1E,0x1F,0xE
                 _0x28:
000085 1d0e
000086 1e1f
000087 1f1f
C:\Users\ManuelNeri\Desktop\PacManPractica\PacManPractica\Debug\List\PacMan.asm(1168): warning: .cseg .db misalignment - padding zero byte
000088 000e      	.DB  0xE,0x1D,0x1F,0x1E,0x1F,0x1F,0xE
                 _0x29:
000089 170e
00008a 070f
00008b 1f0f
C:\Users\ManuelNeri\Desktop\PacManPractica\PacManPractica\Debug\List\PacMan.asm(1170): warning: .cseg .db misalignment - padding zero byte
00008c 000e      	.DB  0xE,0x17,0xF,0x7,0xF,0x1F,0xE
                 _0x2A:
00008d 170e
00008e 0f1f
00008f 1f1f
C:\Users\ManuelNeri\Desktop\PacManPractica\PacManPractica\Debug\List\PacMan.asm(1172): warning: .cseg .db misalignment - padding zero byte
000090 000e      	.DB  0xE,0x17,0x1F,0xF,0x1F,0x1F,0xE
                 _0x0:
000091 6548
000092 6c6c
000093 006f
000094 724d      	.DB  0x48,0x65,0x6C,0x6C,0x6F,0x0,0x4D,0x72
000095 202e
000096 6150
000097 4d63
000098 6e61      	.DB  0x2E,0x20,0x50,0x61,0x63,0x4D,0x61,0x6E
C:\Users\ManuelNeri\Desktop\PacManPractica\PacManPractica\Debug\List\PacMan.asm(1176): warning: .cseg .db misalignment - padding zero byte
000099 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00009a 0007      	.DW  0x07
00009b 0601      	.DW  _PacMan1
00009c 0102      	.DW  _0x27*2
                 
00009d 0007      	.DW  0x07
00009e 0609      	.DW  _PacMan2
00009f 010a      	.DW  _0x28*2
                 
0000a0 0007      	.DW  0x07
0000a1 0611      	.DW  _PacMan3
0000a2 0112      	.DW  _0x29*2
                 
0000a3 0007      	.DW  0x07
0000a4 0619      	.DW  _PacMan4
0000a5 011a      	.DW  _0x2A*2
                 
                 _0xFFFFFFFF:
0000a6 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000a7 94f8      	CLI
0000a8 27ee      	CLR  R30
0000a9 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000aa e0f1      	LDI  R31,1
0000ab bff5      	OUT  MCUCR,R31
0000ac bfe5      	OUT  MCUCR,R30
0000ad 93e0 0074 	STS  XMCRA,R30
0000af 93e0 0075 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
0000b1 e08d      	LDI  R24,(14-2)+1
0000b2 e0a2      	LDI  R26,2
0000b3 27bb      	CLR  R27
                 __CLEAR_REG:
0000b4 93ed      	ST   X+,R30
0000b5 958a      	DEC  R24
0000b6 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000b7 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000b8 e290      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000b9 e0a0      	LDI  R26,LOW(__SRAM_START)
0000ba e0b2      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000bb 93ed      	ST   X+,R30
0000bc 9701      	SBIW R24,1
0000bd f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000be e3e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000bf e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000c0 9185      	LPM  R24,Z+
0000c1 9195      	LPM  R25,Z+
0000c2 9700      	SBIW R24,0
0000c3 f061      	BREQ __GLOBAL_INI_END
0000c4 91a5      	LPM  R26,Z+
0000c5 91b5      	LPM  R27,Z+
0000c6 9005      	LPM  R0,Z+
0000c7 9015      	LPM  R1,Z+
0000c8 01bf      	MOVW R22,R30
0000c9 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ca 9005      	LPM  R0,Z+
0000cb 920d      	ST   X+,R0
0000cc 9701      	SBIW R24,1
0000cd f7e1      	BRNE __GLOBAL_INI_LOOP
0000ce 01fb      	MOVW R30,R22
0000cf cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000d0 bf8b      	OUT  RAMPZ,R24
                 
0000d1 bf8c      	OUT  EIND,R24
                 
                 ;GPIOR0 INITIALIZATION
0000d2 e0e0      	LDI  R30,__GPIOR0_INIT
0000d3 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000d4 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000d5 bfed      	OUT  SPL,R30
0000d6 e2e1      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000d7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000d8 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000d9 e0d6      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000da 940c 01a7 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x600
                 
                 	.CSEG
                     .equ __lcd_port=0x02
                     .equ __lcd_EN=1
                     .equ __lcd_RS=0
                     .equ __lcd_D4=2
                     .equ __lcd_D5=3
                     .equ __lcd_D6=4
                     .equ __lcd_D7=5
                 ; 0000 0010 #endasm
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.CSEG
                 _SetupLCD:
                 ; .FSTART _SetupLCD
0000dc 972c      	SBIW R28,12
0000dd e08c      	LDI  R24,12
0000de e0a0      	LDI  R26,LOW(0)
0000df e0b0      	LDI  R27,HIGH(0)
0000e0 efe6      	LDI  R30,LOW(_0x3*2)
0000e1 e0f0      	LDI  R31,HIGH(_0x3*2)
0000e2 d167      	RCALL __INITLOCB
0000e3 930a      	ST   -Y,R16
                 ;	TableSetup -> Y+1
                 ;	i -> R16
                 ; 0000 0014     SBI __lcd_port-1,__lcd_EN
0000e4 9a09          SBI __lcd_port-1,__lcd_EN
0000e5 9a08          SBI __lcd_port-1,__lcd_RS
0000e6 9a0a          SBI __lcd_port-1,__lcd_D4
0000e7 9a0b          SBI __lcd_port-1,__lcd_D5
0000e8 9a0c          SBI __lcd_port-1,__lcd_D6
0000e9 9a0d          SBI __lcd_port-1,__lcd_D7
0000ea e3a2      	LDI  R26,LOW(50)
0000eb e0b0      	LDI  R27,0
0000ec d164      	RCALL _delay_ms
0000ed e000      	LDI  R16,LOW(0)
                 _0x5:
0000ee 300c      	CPI  R16,12
0000ef f470      	BRSH _0x6
0000f0 e0a2      	LDI  R26,LOW(2)
0000f1 e0b0      	LDI  R27,0
0000f2 d15e      	RCALL _delay_ms
0000f3 2fe0      	MOV  R30,R16
0000f4 e0f0      	LDI  R31,0
0000f5 01de      	MOVW R26,R28
0000f6 9611      	ADIW R26,1
0000f7 0fae      	ADD  R26,R30
0000f8 1fbf      	ADC  R27,R31
0000f9 91ac      	LD   R26,X
0000fa d00f      	RCALL _SendDataBitsLCD
0000fb d00b      	RCALL _PulseEn
0000fc 5f0f      	SUBI R16,-1
0000fd cff0      	RJMP _0x5
                 _0x6:
0000fe e0ec      	LDI  R30,LOW(12)
0000ff 93e0 0600 	STS  _cursor,R30
000101 91a0 0600 	LDS  R26,_cursor
000103 d020      	RCALL _WriteComandLCD
000104 8108      	LDD  R16,Y+0
000105 962d      	ADIW R28,13
000106 9508      	RET
                 ; .FEND
                 _PulseEn:
                 ; .FSTART _PulseEn
000107 9a11          SBI __lcd_port,__lcd_EN  // EN=1;
000108 9811          CBI __lcd_port,__lcd_EN // EN=0;
000109 9508      	RET
                 ; .FEND
                 _SendDataBitsLCD:
                 ; .FSTART _SendDataBitsLCD
00010a 93aa      	ST   -Y,R26
                 ;	dato -> Y+0
00010b 81e8      	LD   R30,Y
00010c 70e8      	ANDI R30,LOW(0x8)
00010d f011      	BREQ _0x7
00010e 9a15      	SBI __lcd_port,__lcd_D7
00010f c001      	RJMP _0x8
                 _0x7:
000110 9815      	CBI __lcd_port,__lcd_D7
                 _0x8:
000111 81e8      	LD   R30,Y
000112 70e4      	ANDI R30,LOW(0x4)
000113 f011      	BREQ _0x9
000114 9a14      	SBI __lcd_port,__lcd_D6
000115 c001      	RJMP _0xA
                 _0x9:
000116 9814      	CBI __lcd_port,__lcd_D6
                 _0xA:
000117 81e8      	LD   R30,Y
000118 70e2      	ANDI R30,LOW(0x2)
000119 f011      	BREQ _0xB
00011a 9a13      	SBI __lcd_port,__lcd_D5
00011b c001      	RJMP _0xC
                 _0xB:
00011c 9813      	CBI __lcd_port,__lcd_D5
                 _0xC:
00011d 81e8      	LD   R30,Y
00011e 70e1      	ANDI R30,LOW(0x1)
00011f f011      	BREQ _0xD
000120 9a12      	SBI __lcd_port,__lcd_D4
000121 c001      	RJMP _0xE
                 _0xD:
000122 9812      	CBI __lcd_port,__lcd_D4
                 _0xE:
000123 c07c      	RJMP _0x2060001
                 ; .FEND
                 _WriteComandLCD:
                 ; .FSTART _WriteComandLCD
000124 93aa      	ST   -Y,R26
000125 930a      	ST   -Y,R16
                 ;	Comando -> Y+1
                 ;	tempComando -> R16
000126 9810      	CBI __lcd_port,__lcd_RS
000127 d0f6      	RCALL SUBOPT_0x0
000128 c033      	RJMP _0x2060002
                 ; .FEND
                 _CharLCD:
                 ; .FSTART _CharLCD
000129 93aa      	ST   -Y,R26
00012a 930a      	ST   -Y,R16
                 ;	dato -> Y+1
                 ;	tempdato -> R16
00012b 9a10      	SBI __lcd_port,__lcd_RS
00012c d0f1      	RCALL SUBOPT_0x0
00012d c02e      	RJMP _0x2060002
                 ; .FEND
                 _StringLCD:
                 ; .FSTART _StringLCD
00012e 93ba      	ST   -Y,R27
00012f 93aa      	ST   -Y,R26
000130 930a      	ST   -Y,R16
                 ;	i -> R16
000131 e000      	LDI  R16,LOW(0)
                 _0x10:
000132 2fe0      	MOV  R30,R16
000133 5f0f      	SUBI R16,-1
000134 d0ff      	RCALL SUBOPT_0x1
000135 91a4      	LPM  R26,Z
000136 dff2      	RCALL _CharLCD
000137 2fe0      	MOV  R30,R16
000138 d0fb      	RCALL SUBOPT_0x1
000139 91e4      	LPM  R30,Z
00013a 30e0      	CPI  R30,0
00013b f7b1      	BRNE _0x10
00013c 8108      	LDD  R16,Y+0
00013d 9623      	ADIW R28,3
00013e 9508      	RET
                 ; .FEND
                 ;	tiempo -> Y+1
                 ;	i -> R16
                 ;	Mensaje -> Y+1
                 ;	i -> R16
                 _MoveCursor:
                 ; .FSTART _MoveCursor
00013f 93aa      	ST   -Y,R26
                 ;	x -> Y+1
                 ;	y -> Y+0
000140 81e8      	LD   R30,Y
000141 e0f0      	LDI  R31,0
000142 9730      	SBIW R30,0
000143 f419      	BRNE _0x1B
000144 81a9      	LDD  R26,Y+1
000145 58a0      	SUBI R26,-LOW(128)
000146 c014      	RJMP _0x39
                 _0x1B:
000147 30e1      	CPI  R30,LOW(0x1)
000148 e0a0      	LDI  R26,HIGH(0x1)
000149 07fa      	CPC  R31,R26
00014a f419      	BRNE _0x1C
00014b 81a9      	LDD  R26,Y+1
00014c 54a0      	SUBI R26,-LOW(192)
00014d c00d      	RJMP _0x39
                 _0x1C:
00014e 30e2      	CPI  R30,LOW(0x2)
00014f e0a0      	LDI  R26,HIGH(0x2)
000150 07fa      	CPC  R31,R26
000151 f419      	BRNE _0x1D
000152 81a9      	LDD  R26,Y+1
000153 56ac      	SUBI R26,-LOW(148)
000154 c006      	RJMP _0x39
                 _0x1D:
000155 30e3      	CPI  R30,LOW(0x3)
000156 e0a0      	LDI  R26,HIGH(0x3)
000157 07fa      	CPC  R31,R26
000158 f419      	BRNE _0x1A
000159 81a9      	LDD  R26,Y+1
00015a 52ac      	SUBI R26,-LOW(212)
                 _0x39:
00015b dfc8      	RCALL _WriteComandLCD
                 _0x1A:
                 _0x2060002:
00015c 9622      	ADIW R28,2
00015d 9508      	RET
                 ; .FEND
                 _CreateChar:
                 ; .FSTART _CreateChar
00015e 93ba      	ST   -Y,R27
00015f 93aa      	ST   -Y,R26
000160 930a      	ST   -Y,R16
                 ;	NoCaracter -> Y+3
                 ;	datos -> Y+1
                 ;	i -> R16
000161 81eb      	LDD  R30,Y+3
000162 0fee      	LSL  R30
000163 0fee      	LSL  R30
000164 0fee      	LSL  R30
000165 5ce0      	SUBI R30,-LOW(64)
000166 2fae      	MOV  R26,R30
000167 dfbc      	RCALL _WriteComandLCD
000168 e000      	LDI  R16,LOW(0)
                 _0x20:
000169 3008      	CPI  R16,8
00016a f448      	BRSH _0x21
00016b 81a9      	LDD  R26,Y+1
00016c 81ba      	LDD  R27,Y+1+1
00016d 27ee      	CLR  R30
00016e 0fa0      	ADD  R26,R16
00016f 1fbe      	ADC  R27,R30
000170 91ac      	LD   R26,X
000171 dfb7      	RCALL _CharLCD
000172 5f0f      	SUBI R16,-1
000173 cff5      	RJMP _0x20
                 _0x21:
000174 e8a0      	LDI  R26,LOW(128)
000175 dfae      	RCALL _WriteComandLCD
000176 8108      	LDD  R16,Y+0
000177 9624      	ADIW R28,4
000178 9508      	RET
                 ; .FEND
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 001C {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 001D ADMUX=(adc_input & 0x1f) | ADC_VREF_TYPE;
000179 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00017a 81e8      	LD   R30,Y
00017b 71ef      	ANDI R30,LOW(0x1F)
00017c 64e0      	ORI  R30,0x40
00017d 93e0 007c 	STS  124,R30
                 ; 0000 001E if (adc_input & 0x20) ADCSRB|=(1<<MUX5);
00017f 81e8      	LD   R30,Y
000180 72e0      	ANDI R30,LOW(0x20)
000181 f021      	BREQ _0x22
000182 91e0 007b 	LDS  R30,123
000184 60e8      	ORI  R30,8
000185 c003      	RJMP _0x3A
                 ; 0000 001F else ADCSRB&=~(1<<MUX5);
                 _0x22:
000186 91e0 007b 	LDS  R30,123
000188 7fe7      	ANDI R30,0XF7
                 _0x3A:
000189 93e0 007b 	STS  123,R30
                 ; 0000 0020 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0021 delay_us(10);
                +
00018b e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
00018c 958a     +DEC R24
00018d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ; 0000 0022 // Start the AD conversion
                 ; 0000 0023 ADCSRA|=(1<<ADSC);
00018e 91e0 007a 	LDS  R30,122
000190 64e0      	ORI  R30,0x40
000191 93e0 007a 	STS  122,R30
                 ; 0000 0024 // Wait for the AD conversion to complete
                 ; 0000 0025 while ((ADCSRA & (1<<ADIF))==0);
                 _0x24:
000193 91e0 007a 	LDS  R30,122
000195 71e0      	ANDI R30,LOW(0x10)
000196 f3e1      	BREQ _0x24
                 ; 0000 0026 ADCSRA|=(1<<ADIF);
000197 91e0 007a 	LDS  R30,122
000199 61e0      	ORI  R30,0x10
00019a 93e0 007a 	STS  122,R30
                 ; 0000 0027 return ADCW;
00019c 91e0 0078 	LDS  R30,120
00019e 91f0 0079 	LDS  R31,120+1
                 _0x2060001:
0001a0 9621      	ADIW R28,1
0001a1 9508      	RET
                 ; 0000 0028 }
                 ; .FEND
                 ;void DelayPacman()
                 ; 0000 002B {
                 _DelayPacman:
                 ; .FSTART _DelayPacman
                 ; 0000 002C delay_ms(read_adc(0));
0001a2 e0a0      	LDI  R26,LOW(0)
0001a3 dfd5      	RCALL _read_adc
0001a4 01df      	MOVW R26,R30
0001a5 d0ab      	RCALL _delay_ms
                 ; 0000 002D }
0001a6 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 ;void main(void)
                 ; 0000 0038 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0039 // ADC initialization
                 ; 0000 003A // ADC Clock frequency: 125.000 kHz
                 ; 0000 003B // ADC Voltage Reference: AVCC pin
                 ; 0000 003C // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 003D // Digital input buffers on ADC0: Off, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 003E // ADC4: On, ADC5: On, ADC6: On, ADC7: On
                 ; 0000 003F DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
0001a7 e0e1      	LDI  R30,LOW(1)
0001a8 93e0 007e 	STS  126,R30
                 ; 0000 0040 // Digital input buffers on ADC8: On, ADC9: On, ADC10: On, ADC11: On
                 ; 0000 0041 // ADC12: On, ADC13: On, ADC14: On, ADC15: On
                 ; 0000 0042 DIDR2=(0<<ADC15D) | (0<<ADC14D) | (0<<ADC13D) | (0<<ADC12D) | (0<<ADC11D) | (0<<ADC10D) | (0<<ADC9D) | (0<<ADC8D);
0001aa e0e0      	LDI  R30,LOW(0)
0001ab 93e0 007d 	STS  125,R30
                 ; 0000 0043 ADMUX=ADC_VREF_TYPE;
0001ad e4e0      	LDI  R30,LOW(64)
0001ae 93e0 007c 	STS  124,R30
                 ; 0000 0044 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0001b0 e8e7      	LDI  R30,LOW(135)
0001b1 93e0 007a 	STS  122,R30
                 ; 0000 0045 ADCSRB=(0<<MUX5) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0001b3 e0e0      	LDI  R30,LOW(0)
0001b4 93e0 007b 	STS  123,R30
                 ; 0000 0046 
                 ; 0000 0047 SetupLCD();
0001b6 df25      	RCALL _SetupLCD
                 ; 0000 0048 CreateChar(0,PacMan1);
0001b7 e0e0      	LDI  R30,LOW(0)
0001b8 93ea      	ST   -Y,R30
0001b9 e0a1      	LDI  R26,LOW(_PacMan1)
0001ba e0b6      	LDI  R27,HIGH(_PacMan1)
0001bb dfa2      	RCALL _CreateChar
                 ; 0000 0049 CreateChar(1,PacMan2);
0001bc e0e1      	LDI  R30,LOW(1)
0001bd 93ea      	ST   -Y,R30
0001be e0a9      	LDI  R26,LOW(_PacMan2)
0001bf e0b6      	LDI  R27,HIGH(_PacMan2)
0001c0 df9d      	RCALL _CreateChar
                 ; 0000 004A CreateChar(2,PacMan3);
0001c1 e0e2      	LDI  R30,LOW(2)
0001c2 93ea      	ST   -Y,R30
0001c3 e1a1      	LDI  R26,LOW(_PacMan3)
0001c4 e0b6      	LDI  R27,HIGH(_PacMan3)
0001c5 df98      	RCALL _CreateChar
                 ; 0000 004B CreateChar(3,PacMan4);
0001c6 e0e3      	LDI  R30,LOW(3)
0001c7 93ea      	ST   -Y,R30
0001c8 e1a9      	LDI  R26,LOW(_PacMan4)
0001c9 e0b6      	LDI  R27,HIGH(_PacMan4)
0001ca df93      	RCALL _CreateChar
                 ; 0000 004C 
                 ; 0000 004D PORTC.0 = 1;
0001cb 9a40      	SBI  0x8,0
                 ; 0000 004E 
                 ; 0000 004F while (1)
                 _0x2D:
                 ; 0000 0050 {
                 ; 0000 0051 MoveCursor(5,0);
0001cc e0e5      	LDI  R30,LOW(5)
0001cd 93ea      	ST   -Y,R30
0001ce e0a0      	LDI  R26,LOW(0)
0001cf df6f      	RCALL _MoveCursor
                 ; 0000 0052 StringLCD("Hello");
                +
0001d0 e2a2     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0001d1 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0001d2 df5b      	RCALL _StringLCD
                 ; 0000 0053 MoveCursor(3,1);
0001d3 e0e3      	LDI  R30,LOW(3)
0001d4 93ea      	ST   -Y,R30
0001d5 e0a1      	LDI  R26,LOW(1)
0001d6 df68      	RCALL _MoveCursor
                 ; 0000 0054 StringLCD("Mr. PacMan");
                +
0001d7 e2a8     +LDI R26 , LOW ( 2 * _0x0 + ( 6 ) )
0001d8 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW2FN _0x0,6
0001d9 df54      	RCALL _StringLCD
                 ; 0000 0055 
                 ; 0000 0056 for (i=0;i<16;i++)
0001da e0e0      	LDI  R30,LOW(0)
0001db 93e0 0621 	STS  _i,R30
                 _0x31:
0001dd 91a0 0621 	LDS  R26,_i
0001df 31a0      	CPI  R26,LOW(0x10)
0001e0 f51c      	BRGE _0x32
                 ; 0000 0057 {
                 ; 0000 0058 r = 0;
0001e1 e0e0      	LDI  R30,LOW(0)
0001e2 93e0 0622 	STS  _r,R30
                 ; 0000 0059 if (PINC.0 == 1)
0001e4 9b30      	SBIS 0x6,0
0001e5 c00b      	RJMP _0x33
                 ; 0000 005A {
                 ; 0000 005B MoveCursor(i,r);   //Paso 1
0001e6 d053      	RCALL SUBOPT_0x2
                 ; 0000 005C CharLCD(0);        //Paso 2
0001e7 e0a0      	LDI  R26,LOW(0)
0001e8 df40      	RCALL _CharLCD
                 ; 0000 005D DelayPacman();
0001e9 dfb8      	RCALL _DelayPacman
                 ; 0000 005E MoveCursor(i,r);   //Paso 3
0001ea d04f      	RCALL SUBOPT_0x2
                 ; 0000 005F CharLCD(1);        //Paso 4
0001eb e0a1      	LDI  R26,LOW(1)
0001ec df3c      	RCALL _CharLCD
                 ; 0000 0060 DelayPacman();
0001ed dfb4      	RCALL _DelayPacman
                 ; 0000 0061 MoveCursor(i,r);   //Paso 5
0001ee d04b      	RCALL SUBOPT_0x2
                 ; 0000 0062 CharLCD(' ');      //Paso 6
0001ef e2a0      	LDI  R26,LOW(32)
0001f0 df38      	RCALL _CharLCD
                 ; 0000 0063 }
                 ; 0000 0064 if (PINC.0 == 0)
                 _0x33:
0001f1 9930      	SBIC 0x6,0
0001f2 c00b      	RJMP _0x34
                 ; 0000 0065 {
                 ; 0000 0066 MoveCursor(i--,r);   //Paso 1
0001f3 d04c      	RCALL SUBOPT_0x3
                 ; 0000 0067 CharLCD(2);        //Paso 2
0001f4 e0a2      	LDI  R26,LOW(2)
0001f5 df33      	RCALL _CharLCD
                 ; 0000 0068 DelayPacman();
0001f6 dfab      	RCALL _DelayPacman
                 ; 0000 0069 MoveCursor(i--,r);   //Paso 3
0001f7 d048      	RCALL SUBOPT_0x3
                 ; 0000 006A CharLCD(3);        //Paso 4
0001f8 e0a3      	LDI  R26,LOW(3)
0001f9 df2f      	RCALL _CharLCD
                 ; 0000 006B DelayPacman();
0001fa dfa7      	RCALL _DelayPacman
                 ; 0000 006C MoveCursor(i--,r);   //Paso 5
0001fb d044      	RCALL SUBOPT_0x3
                 ; 0000 006D CharLCD('  ');      //Paso 6
0001fc e2a0      	LDI  R26,LOW(32)
0001fd df2b      	RCALL _CharLCD
                 ; 0000 006E }
                 ; 0000 006F }
                 _0x34:
0001fe 91e0 0621 	LDS  R30,_i
000200 5fef      	SUBI R30,-LOW(1)
000201 93e0 0621 	STS  _i,R30
000203 cfd9      	RJMP _0x31
                 _0x32:
                 ; 0000 0070 
                 ; 0000 0071 
                 ; 0000 0072 
                 ; 0000 0073 
                 ; 0000 0074 
                 ; 0000 0075 
                 ; 0000 0076 
                 ; 0000 0077 
                 ; 0000 0078 
                 ; 0000 0079 for (i=0;i>=0;i--)
000204 e0e0      	LDI  R30,LOW(0)
000205 93e0 0621 	STS  _i,R30
                 _0x36:
000207 91a0 0621 	LDS  R26,_i
000209 30a0      	CPI  R26,0
00020a f08c      	BRLT _0x37
                 ; 0000 007A {
                 ; 0000 007B MoveCursor(i,r);   //Paso 1
00020b d02e      	RCALL SUBOPT_0x2
                 ; 0000 007C CharLCD(2);        //Paso 2
00020c e0a2      	LDI  R26,LOW(2)
00020d df1b      	RCALL _CharLCD
                 ; 0000 007D DelayPacman();
00020e df93      	RCALL _DelayPacman
                 ; 0000 007E MoveCursor(i,r);   //Paso 3
00020f d02a      	RCALL SUBOPT_0x2
                 ; 0000 007F CharLCD(3);        //Paso 4
000210 e0a3      	LDI  R26,LOW(3)
000211 df17      	RCALL _CharLCD
                 ; 0000 0080 DelayPacman();
000212 df8f      	RCALL _DelayPacman
                 ; 0000 0081 MoveCursor(i,r);   //Paso 5
000213 d026      	RCALL SUBOPT_0x2
                 ; 0000 0082 CharLCD(' ');      //Paso 6
000214 e2a0      	LDI  R26,LOW(32)
000215 df13      	RCALL _CharLCD
                 ; 0000 0083 }
000216 91e0 0621 	LDS  R30,_i
000218 50e1      	SUBI R30,LOW(1)
000219 93e0 0621 	STS  _i,R30
00021b cfeb      	RJMP _0x36
                 _0x37:
                 ; 0000 0084 
                 ; 0000 0085 }
00021c cfaf      	RJMP _0x2D
                 ; 0000 0086 }
                 _0x38:
00021d cfff      	RJMP _0x38
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _cursor:
000600           	.BYTE 0x1
                 _PacMan1:
000601           	.BYTE 0x8
                 _PacMan2:
000609           	.BYTE 0x8
                 _PacMan3:
000611           	.BYTE 0x8
                 _PacMan4:
000619           	.BYTE 0x8
                 _i:
000621           	.BYTE 0x1
                 _r:
000622           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x0:
00021e e0a2      	LDI  R26,LOW(2)
00021f e0b0      	LDI  R27,0
000220 d030      	RCALL _delay_ms
000221 81e9      	LDD  R30,Y+1
000222 7fe0      	ANDI R30,LOW(0xF0)
000223 2f0e      	MOV  R16,R30
000224 9502      	SWAP R16
000225 700f      	ANDI R16,0xF
000226 2fa0      	MOV  R26,R16
000227 dee2      	RCALL _SendDataBitsLCD
000228 dede      	RCALL _PulseEn
000229 81e9      	LDD  R30,Y+1
00022a 70ef      	ANDI R30,LOW(0xF)
00022b 2f0e      	MOV  R16,R30
00022c 2fa0      	MOV  R26,R16
00022d dedc      	RCALL _SendDataBitsLCD
00022e e0a2      	LDI  R26,LOW(2)
00022f e0b0      	LDI  R27,0
000230 d020      	RCALL _delay_ms
000231 ded5      	RCALL _PulseEn
000232 8108      	LDD  R16,Y+0
000233 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000234 81a9      	LDD  R26,Y+1
000235 81ba      	LDD  R27,Y+1+1
000236 e0f0      	LDI  R31,0
000237 0fea      	ADD  R30,R26
000238 1ffb      	ADC  R31,R27
000239 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x2:
00023a 91e0 0621 	LDS  R30,_i
00023c 93ea      	ST   -Y,R30
00023d 91a0 0622 	LDS  R26,_r
00023f ceff      	RJMP _MoveCursor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x3:
000240 91e0 0621 	LDS  R30,_i
000242 50e1      	SUBI R30,LOW(1)
000243 93e0 0621 	STS  _i,R30
000245 5fef      	SUBI R30,-LOW(1)
000246 93ea      	ST   -Y,R30
000247 91a0 0622 	LDS  R26,_r
000249 cef5      	RJMP _MoveCursor
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __INITLOCB:
                 __INITLOCW:
00024a 0fac      	ADD  R26,R28
00024b 1fbd      	ADC  R27,R29
                 __INITLOC0:
00024c 9005      	LPM  R0,Z+
00024d 920d      	ST   X+,R0
00024e 958a      	DEC  R24
00024f f7e1      	BRNE __INITLOC0
000250 9508      	RET
                 
                 _delay_ms:
000251 9610      	adiw r26,0
000252 f039      	breq __delay_ms1
                 __delay_ms0:
000253 95a8      	wdr
                +
000254 ea80     +LDI R24 , LOW ( 0xFA0 )
000255 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000256 9701     +SBIW R24 , 1
000257 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000258 9711      	sbiw r26,1
000259 f7c9      	brne __delay_ms0
                 __delay_ms1:
00025a 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega2560 register use summary:
r0 :   6 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  27 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  15 r25:   3 r26:  72 r27:  22 r28:   9 r29:   2 r30: 116 r31:  13 
x  :   6 y  :  44 z  :  10 
Registers used: 15 out of 35 (42.9%)

ATmega2560 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   4 
adiw  :   7 and   :   0 andi  :  11 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   3 cpi   :   8 cpse  :   0 dec   :   3 des   :   0 
eicall:   0 eijmp :   0 elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   0 jmp   :  58 
ld    :   9 ldd   :  15 ldi   :  79 lds   :  16 lpm   :  12 lsl   :   3 
lsr   :   0 mov   :   8 movw  :   5 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   4 out   :   8 pop   :   0 
push  :   0 rcall :  56 ret   :  11 reti  :   0 rjmp  :  22 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  13 sbic  :   1 sbis  :   1 
sbiw  :   7 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  26 std   :   0 sts   :  18 
sub   :   0 subi  :  12 swap  :   1 tst   :   0 wdr   :   1 
Instructions used: 38 out of 119 (31.9%)

ATmega2560 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004b6   1100    106   1206  262144   0.5%
[.dseg] 0x000200 0x000623      0     35     35    8192   0.4%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 5 warnings
