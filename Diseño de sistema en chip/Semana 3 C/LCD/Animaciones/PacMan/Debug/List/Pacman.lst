
AVRASM ver. 2.1.30  C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\PacMan\Debug\List\Pacman.asm Tue Apr 13 10:37:12 2021

C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\PacMan\Debug\List\Pacman.asm(1085): warning: Register r4 already defined by the .DEF directive
C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\PacMan\Debug\List\Pacman.asm(1086): warning: Register r3 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.43 Evaluation
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _cursor=R4
                 	.DEF _i=R3
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0060 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x3:
000034 0303
000035 0203
000036 0c02
000037 0800      	.DB  0x3,0x3,0x3,0x2,0x2,0xC,0x0,0x8
000038 0100
000039 0600      	.DB  0x0,0x1,0x0,0x6
                 _0x25:
00003a 1d0e
00003b 1c1e
00003c 1f1e
C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\PacMan\Debug\List\Pacman.asm(1129): warning: .cseg .db misalignment - padding zero byte
00003d 000e      	.DB  0xE,0x1D,0x1E,0x1C,0x1E,0x1F,0xE
                 _0x26:
00003e 1d0e
00003f 1e1f
000040 1f1f
C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\PacMan\Debug\List\Pacman.asm(1131): warning: .cseg .db misalignment - padding zero byte
000041 000e      	.DB  0xE,0x1D,0x1F,0x1E,0x1F,0x1F,0xE
                 _0x27:
000042 170e
000043 070f
000044 1f0f
C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\PacMan\Debug\List\Pacman.asm(1133): warning: .cseg .db misalignment - padding zero byte
000045 000e      	.DB  0xE,0x17,0xF,0x7,0xF,0x1F,0xE
                 _0x28:
000046 170e
000047 0f1f
000048 1f1f
C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\PacMan\Debug\List\Pacman.asm(1135): warning: .cseg .db misalignment - padding zero byte
000049 000e      	.DB  0xE,0x17,0x1F,0xF,0x1F,0x1F,0xE
                 _0x0:
00004a 6548
00004b 6c6c
00004c 006f
00004d 724d      	.DB  0x48,0x65,0x6C,0x6C,0x6F,0x0,0x4D,0x72
00004e 202e
00004f 6150
000050 4d63
000051 6e61      	.DB  0x2E,0x20,0x50,0x61,0x63,0x4D,0x61,0x6E
C:\Users\nerij\OneDrive\Escritorio\Diseño de sistema en chip\Semana 3\LCD\PacMan\Debug\List\Pacman.asm(1139): warning: .cseg .db misalignment - padding zero byte
000052 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000053 0007      	.DW  0x07
000054 0300      	.DW  _PacMan1
000055 0074      	.DW  _0x25*2
                 
000056 0007      	.DW  0x07
000057 0308      	.DW  _PacMan2
000058 007c      	.DW  _0x26*2
                 
000059 0007      	.DW  0x07
00005a 0310      	.DW  _PacMan3
00005b 0084      	.DW  _0x27*2
                 
00005c 0007      	.DW  0x07
00005d 0318      	.DW  _PacMan4
00005e 008c      	.DW  _0x28*2
                 
                 _0xFFFFFFFF:
00005f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000060 94f8      	CLI
000061 27ee      	CLR  R30
000062 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000063 e0f1      	LDI  R31,1
000064 bff5      	OUT  MCUCR,R31
000065 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000066 e08d      	LDI  R24,(14-2)+1
000067 e0a2      	LDI  R26,2
000068 27bb      	CLR  R27
                 __CLEAR_REG:
000069 93ed      	ST   X+,R30
00006a 958a      	DEC  R24
00006b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006d e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006e e0a0      	LDI  R26,LOW(__SRAM_START)
00006f e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000070 93ed      	ST   X+,R30
000071 9701      	SBIW R24,1
000072 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000073 eae6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000074 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000075 9185      	LPM  R24,Z+
000076 9195      	LPM  R25,Z+
000077 9700      	SBIW R24,0
000078 f061      	BREQ __GLOBAL_INI_END
000079 91a5      	LPM  R26,Z+
00007a 91b5      	LPM  R27,Z+
00007b 9005      	LPM  R0,Z+
00007c 9015      	LPM  R1,Z+
00007d 01bf      	MOVW R22,R30
00007e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007f 9005      	LPM  R0,Z+
000080 920d      	ST   X+,R0
000081 9701      	SBIW R24,1
000082 f7e1      	BRNE __GLOBAL_INI_LOOP
000083 01fb      	MOVW R30,R22
000084 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000085 e0e0      	LDI  R30,__GPIOR0_INIT
000086 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000087 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000088 bfed      	OUT  SPL,R30
000089 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008b e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008c e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008d 940c 0149 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                     .equ __lcd_port=0x0B
                     .equ __lcd_EN=3
                     .equ __lcd_RS=2
                     .equ __lcd_D4=4
                     .equ __lcd_D5=5
                     .equ __lcd_D6=6
                     .equ __lcd_D7=7
                 ; 0000 000F    #endasm
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.CSEG
                 _SetupLCD:
                 ; .FSTART _SetupLCD
00008f 972c      	SBIW R28,12
000090 e08c      	LDI  R24,12
                +
000091 e060     +LDI R22 , LOW ( 0 )
000092 e070     +LDI R23 , HIGH ( 0 )
                 	__GETWRN 22,23,0
000093 e6e8      	LDI  R30,LOW(_0x3*2)
000094 e0f0      	LDI  R31,HIGH(_0x3*2)
000095 d102      	RCALL __INITLOCB
000096 931a      	ST   -Y,R17
                 ;	TableSetup -> Y+1
                 ;	i -> R17
                 ; 0000 0013     SBI __lcd_port-1,__lcd_EN
000097 9a53          SBI __lcd_port-1,__lcd_EN
000098 9a52          SBI __lcd_port-1,__lcd_RS
000099 9a54          SBI __lcd_port-1,__lcd_D4
00009a 9a55          SBI __lcd_port-1,__lcd_D5
00009b 9a56          SBI __lcd_port-1,__lcd_D6
00009c 9a57          SBI __lcd_port-1,__lcd_D7
00009d e3a2      	LDI  R26,LOW(50)
00009e e0b0      	LDI  R27,0
00009f d104      	RCALL _delay_ms
0000a0 e010      	LDI  R17,LOW(0)
                 _0x5:
0000a1 301c      	CPI  R17,12
0000a2 f470      	BRSH _0x6
0000a3 e0a2      	LDI  R26,LOW(2)
0000a4 e0b0      	LDI  R27,0
0000a5 d0fe      	RCALL _delay_ms
0000a6 2fe1      	MOV  R30,R17
0000a7 e0f0      	LDI  R31,0
0000a8 01de      	MOVW R26,R28
0000a9 9611      	ADIW R26,1
0000aa 0fae      	ADD  R26,R30
0000ab 1fbf      	ADC  R27,R31
0000ac 91ac      	LD   R26,X
0000ad d00d      	RCALL _SendDataBitsLCD
0000ae d009      	RCALL _PulseEn
0000af 5f1f      	SUBI R17,-1
0000b0 cff0      	RJMP _0x5
                 _0x6:
0000b1 e0ec      	LDI  R30,LOW(12)
0000b2 2e4e      	MOV  R4,R30
0000b3 2da4      	MOV  R26,R4
0000b4 d01e      	RCALL _WriteComandLCD
0000b5 8118      	LDD  R17,Y+0
0000b6 962d      	ADIW R28,13
0000b7 9508      	RET
                 ; .FEND
                 _PulseEn:
                 ; .FSTART _PulseEn
0000b8 9a5b          SBI __lcd_port,__lcd_EN  // EN=1;
0000b9 985b          CBI __lcd_port,__lcd_EN // EN=0;
0000ba 9508      	RET
                 ; .FEND
                 _SendDataBitsLCD:
                 ; .FSTART _SendDataBitsLCD
0000bb 931a      	ST   -Y,R17
0000bc 2f1a      	MOV  R17,R26
                 ;	dato -> R17
0000bd ff13      	SBRS R17,3
0000be c002      	RJMP _0x7
0000bf 9a5f      	SBI __lcd_port,__lcd_D7
0000c0 c001      	RJMP _0x8
                 _0x7:
0000c1 985f      	CBI __lcd_port,__lcd_D7
                 _0x8:
0000c2 ff12      	SBRS R17,2
0000c3 c002      	RJMP _0x9
0000c4 9a5e      	SBI __lcd_port,__lcd_D6
0000c5 c001      	RJMP _0xA
                 _0x9:
0000c6 985e      	CBI __lcd_port,__lcd_D6
                 _0xA:
0000c7 ff11      	SBRS R17,1
0000c8 c002      	RJMP _0xB
0000c9 9a5d      	SBI __lcd_port,__lcd_D5
0000ca c001      	RJMP _0xC
                 _0xB:
0000cb 985d      	CBI __lcd_port,__lcd_D5
                 _0xC:
0000cc ff10      	SBRS R17,0
0000cd c002      	RJMP _0xD
0000ce 9a5c      	SBI __lcd_port,__lcd_D4
0000cf c001      	RJMP _0xE
                 _0xD:
0000d0 985c      	CBI __lcd_port,__lcd_D4
                 _0xE:
0000d1 9119      	LD   R17,Y+
0000d2 9508      	RET
                 ; .FEND
                 _WriteComandLCD:
                 ; .FSTART _WriteComandLCD
0000d3 931a      	ST   -Y,R17
0000d4 930a      	ST   -Y,R16
0000d5 2f0a      	MOV  R16,R26
                 ;	Comando -> R16
                 ;	tempComando -> R17
0000d6 985a      	CBI __lcd_port,__lcd_RS
0000d7 c004      	RJMP _0x2000001
                 ; .FEND
                 _CharLCD:
                 ; .FSTART _CharLCD
0000d8 931a      	ST   -Y,R17
0000d9 930a      	ST   -Y,R16
0000da 2f0a      	MOV  R16,R26
                 ;	dato -> R16
                 ;	tempdato -> R17
0000db 9a5a      	SBI __lcd_port,__lcd_RS
                 _0x2000001:
0000dc e0a2      	LDI  R26,LOW(2)
0000dd e0b0      	LDI  R27,0
0000de d0c5      	RCALL _delay_ms
0000df 2fe0      	MOV  R30,R16
0000e0 7fe0      	ANDI R30,LOW(0xF0)
0000e1 2f1e      	MOV  R17,R30
0000e2 9512      	SWAP R17
0000e3 701f      	ANDI R17,0xF
0000e4 2fa1      	MOV  R26,R17
0000e5 dfd5      	RCALL _SendDataBitsLCD
0000e6 dfd1      	RCALL _PulseEn
0000e7 2fe0      	MOV  R30,R16
0000e8 70ef      	ANDI R30,LOW(0xF)
0000e9 2f1e      	MOV  R17,R30
0000ea 2fa1      	MOV  R26,R17
0000eb dfcf      	RCALL _SendDataBitsLCD
0000ec e0a2      	LDI  R26,LOW(2)
0000ed e0b0      	LDI  R27,0
0000ee d0b5      	RCALL _delay_ms
0000ef dfc8      	RCALL _PulseEn
0000f0 9109      	LD   R16,Y+
0000f1 9119      	LD   R17,Y+
0000f2 9508      	RET
                 ; .FEND
                 _StringLCD:
                 ; .FSTART _StringLCD
0000f3 d09a      	RCALL __SAVELOCR4
0000f4 019d      	MOVW R18,R26
                 ;	Mensaje -> R18,R19
                 ;	i -> R17
0000f5 e010      	LDI  R17,LOW(0)
                 _0x10:
0000f6 2fe1      	MOV  R30,R17
0000f7 5f1f      	SUBI R17,-1
0000f8 e0f0      	LDI  R31,0
0000f9 0fe2      	ADD  R30,R18
0000fa 1ff3      	ADC  R31,R19
0000fb 91a4      	LPM  R26,Z
0000fc dfdb      	RCALL _CharLCD
0000fd 2fe1      	MOV  R30,R17
0000fe e0f0      	LDI  R31,0
0000ff 0fe2      	ADD  R30,R18
000100 1ff3      	ADC  R31,R19
000101 91e4      	LPM  R30,Z
000102 30e0      	CPI  R30,0
000103 f791      	BRNE _0x10
000104 d08e      	RCALL __LOADLOCR4
000105 9624      	ADIW R28,4
000106 9508      	RET
                 ; .FEND
                 ;	Mensaje -> R20,R21
                 ;	tiempo -> R18,R19
                 ;	i -> R17
                 ;	Mensaje -> R18,R19
                 ;	i -> R17
                 _MoveCursor:
                 ; .FSTART _MoveCursor
000107 931a      	ST   -Y,R17
000108 930a      	ST   -Y,R16
000109 2f1a      	MOV  R17,R26
00010a 810a      	LDD  R16,Y+2
                 ;	x -> R16
                 ;	y -> R17
00010b 2fe1      	MOV  R30,R17
00010c e0f0      	LDI  R31,0
00010d 9730      	SBIW R30,0
00010e f419      	BRNE _0x1B
00010f 2fa0      	MOV  R26,R16
000110 58a0      	SUBI R26,-LOW(128)
000111 c014      	RJMP _0x30
                 _0x1B:
000112 30e1      	CPI  R30,LOW(0x1)
000113 e0a0      	LDI  R26,HIGH(0x1)
000114 07fa      	CPC  R31,R26
000115 f419      	BRNE _0x1C
000116 2fa0      	MOV  R26,R16
000117 54a0      	SUBI R26,-LOW(192)
000118 c00d      	RJMP _0x30
                 _0x1C:
000119 30e2      	CPI  R30,LOW(0x2)
00011a e0a0      	LDI  R26,HIGH(0x2)
00011b 07fa      	CPC  R31,R26
00011c f419      	BRNE _0x1D
00011d 2fa0      	MOV  R26,R16
00011e 56ac      	SUBI R26,-LOW(148)
00011f c006      	RJMP _0x30
                 _0x1D:
000120 30e3      	CPI  R30,LOW(0x3)
000121 e0a0      	LDI  R26,HIGH(0x3)
000122 07fa      	CPC  R31,R26
000123 f419      	BRNE _0x1A
000124 2fa0      	MOV  R26,R16
000125 52ac      	SUBI R26,-LOW(212)
                 _0x30:
000126 dfac      	RCALL _WriteComandLCD
                 _0x1A:
000127 8119      	LDD  R17,Y+1
000128 8108      	LDD  R16,Y+0
000129 9623      	ADIW R28,3
00012a 9508      	RET
                 ; .FEND
                 _CreateChar:
                 ; .FSTART _CreateChar
00012b d062      	RCALL __SAVELOCR4
00012c 019d      	MOVW R18,R26
00012d 810c      	LDD  R16,Y+4
                 ;	NoCaracter -> R16
                 ;	datos -> R18,R19
                 ;	i -> R17
00012e 2fe0      	MOV  R30,R16
00012f 0fee      	LSL  R30
000130 0fee      	LSL  R30
000131 0fee      	LSL  R30
000132 5ce0      	SUBI R30,-LOW(64)
000133 2fae      	MOV  R26,R30
000134 df9e      	RCALL _WriteComandLCD
000135 e010      	LDI  R17,LOW(0)
                 _0x20:
000136 3018      	CPI  R17,8
000137 f440      	BRSH _0x21
000138 01d9      	MOVW R26,R18
000139 27ee      	CLR  R30
00013a 0fa1      	ADD  R26,R17
00013b 1fbe      	ADC  R27,R30
00013c 91ac      	LD   R26,X
00013d df9a      	RCALL _CharLCD
00013e 5f1f      	SUBI R17,-1
00013f cff6      	RJMP _0x20
                 _0x21:
000140 e8a0      	LDI  R26,LOW(128)
000141 df91      	RCALL _WriteComandLCD
000142 d050      	RCALL __LOADLOCR4
000143 9625      	ADIW R28,5
000144 9508      	RET
                 ; .FEND
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 001A {
                 ; 0000 001B ADMUX=adc_input | ADC_VREF_TYPE;
                 ;	adc_input -> R17
                 ; 0000 001C // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 001D delay_us(10);
                 ; 0000 001E // Start the AD conversion
                 ; 0000 001F ADCSRA|=(1<<ADSC);
                 ; 0000 0020 // Wait for the AD conversion to complete
                 ; 0000 0021 while ((ADCSRA & (1<<ADIF))==0);
                 ; 0000 0022 ADCSRA|=(1<<ADIF);
                 ; 0000 0023 return ADCW;
                 ; 0000 0024 }
                 ;void DelayPacMan()
                 ; 0000 0028 {
                 _DelayPacMan:
                 ; .FSTART _DelayPacMan
                 ; 0000 0029 delay_ms(200);
000145 eca8      	LDI  R26,LOW(200)
000146 e0b0      	LDI  R27,0
000147 d05c      	RCALL _delay_ms
                 ; 0000 002A }
000148 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 ;void main(void)
                 ; 0000 0034 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0035 // ADC initialization
                 ; 0000 0036 // ADC Clock frequency: 125.000 kHz
                 ; 0000 0037 // ADC Voltage Reference: AVCC pin
                 ; 0000 0038 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0039 // Digital input buffers on ADC0: Off, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 003A // ADC4: On, ADC5: On
                 ; 0000 003B DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
000149 e0e1      	LDI  R30,LOW(1)
00014a 93e0 007e 	STS  126,R30
                 ; 0000 003C ADMUX=ADC_VREF_TYPE;
00014c e4e0      	LDI  R30,LOW(64)
00014d 93e0 007c 	STS  124,R30
                 ; 0000 003D ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
00014f e8e3      	LDI  R30,LOW(131)
000150 93e0 007a 	STS  122,R30
                 ; 0000 003E ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000152 e0e0      	LDI  R30,LOW(0)
000153 93e0 007b 	STS  123,R30
                 ; 0000 003F SetupLCD();
000155 df39      	RCALL _SetupLCD
                 ; 0000 0040 CreateChar(0,PacMan1);
000156 e0e0      	LDI  R30,LOW(0)
000157 93ea      	ST   -Y,R30
000158 e0a0      	LDI  R26,LOW(_PacMan1)
000159 e0b3      	LDI  R27,HIGH(_PacMan1)
00015a dfd0      	RCALL _CreateChar
                 ; 0000 0041 CreateChar(1,PacMan2);
00015b e0e1      	LDI  R30,LOW(1)
00015c 93ea      	ST   -Y,R30
00015d e0a8      	LDI  R26,LOW(_PacMan2)
00015e e0b3      	LDI  R27,HIGH(_PacMan2)
00015f dfcb      	RCALL _CreateChar
                 ; 0000 0042 CreateChar(2,PacMan3);
000160 e0e2      	LDI  R30,LOW(2)
000161 93ea      	ST   -Y,R30
000162 e1a0      	LDI  R26,LOW(_PacMan3)
000163 e0b3      	LDI  R27,HIGH(_PacMan3)
000164 dfc6      	RCALL _CreateChar
                 ; 0000 0043 CreateChar(3,PacMan4);
000165 e0e3      	LDI  R30,LOW(3)
000166 93ea      	ST   -Y,R30
000167 e1a8      	LDI  R26,LOW(_PacMan4)
000168 e0b3      	LDI  R27,HIGH(_PacMan4)
000169 dfc1      	RCALL _CreateChar
                 ; 0000 0044 
                 ; 0000 0045 while (1)
                 _0x29:
                 ; 0000 0046 {
                 ; 0000 0047 MoveCursor(5,0);
00016a e0e5      	LDI  R30,LOW(5)
00016b 93ea      	ST   -Y,R30
00016c e0a0      	LDI  R26,LOW(0)
00016d df99      	RCALL _MoveCursor
                 ; 0000 0048 StringLCD("Hello");
                +
00016e e9a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
00016f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000170 df82      	RCALL _StringLCD
                 ; 0000 0049 MoveCursor(3,1);
000171 e0e3      	LDI  R30,LOW(3)
000172 93ea      	ST   -Y,R30
000173 e0a1      	LDI  R26,LOW(1)
000174 df92      	RCALL _MoveCursor
                 ; 0000 004A StringLCD("Mr. PacMan");
                +
000175 e9aa     +LDI R26 , LOW ( 2 * _0x0 + ( 6 ) )
000176 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW2FN _0x0,6
000177 df7b      	RCALL _StringLCD
                 ; 0000 004B 
                 ; 0000 004C for (i=0;i<16;i++)
000178 2433      	CLR  R3
                 _0x2D:
000179 e1e0      	LDI  R30,LOW(16)
00017a 163e      	CP   R3,R30
00017b f45c      	BRGE _0x2E
                 ; 0000 004D {
                 ; 0000 004E MoveCursor(i, 0);
00017c 923a      	ST   -Y,R3
00017d e0a0      	LDI  R26,LOW(0)
00017e df88      	RCALL _MoveCursor
                 ; 0000 004F CharLCD(0);
00017f e0a0      	LDI  R26,LOW(0)
000180 d008      	RCALL SUBOPT_0x0
                 ; 0000 0050 DelayPacMan();
                 ; 0000 0051 MoveCursor(i, 0);
                 ; 0000 0052 CharLCD(1);
000181 e0a1      	LDI  R26,LOW(1)
000182 d006      	RCALL SUBOPT_0x0
                 ; 0000 0053 DelayPacMan();
                 ; 0000 0054 MoveCursor(i, 0);
                 ; 0000 0055 CharLCD(' ');
000183 e2a0      	LDI  R26,LOW(32)
000184 df53      	RCALL _CharLCD
                 ; 0000 0056 }
000185 9433      	INC  R3
000186 cff2      	RJMP _0x2D
                 _0x2E:
                 ; 0000 0057 }
000187 cfe2      	RJMP _0x29
                 ; 0000 0058 }
                 _0x2F:
000188 cfff      	RJMP _0x2F
                 ; .FEND
                 
                 	.DSEG
                 _PacMan1:
000300           	.BYTE 0x8
                 _PacMan2:
000308           	.BYTE 0x8
                 _PacMan3:
000310           	.BYTE 0x8
                 _PacMan4:
000318           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000189 df4e      	RCALL _CharLCD
00018a dfba      	RCALL _DelayPacMan
00018b 923a      	ST   -Y,R3
00018c e0a0      	LDI  R26,LOW(0)
00018d cf79      	RJMP _MoveCursor
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
00018e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00018f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000190 931a      	ST   -Y,R17
000191 930a      	ST   -Y,R16
000192 9508      	RET
                 
                 __LOADLOCR4:
000193 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000194 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000195 8119      	LDD  R17,Y+1
000196 8108      	LD   R16,Y
000197 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000198 93af      	PUSH R26
000199 93bf      	PUSH R27
00019a 01db      	MOVW R26,R22
00019b 0fac      	ADD  R26,R28
00019c 1fbd      	ADC  R27,R29
                 __INITLOC0:
00019d 9005      	LPM  R0,Z+
00019e 920d      	ST   X+,R0
00019f 958a      	DEC  R24
0001a0 f7e1      	BRNE __INITLOC0
0001a1 91bf      	POP  R27
0001a2 91af      	POP  R26
0001a3 9508      	RET
                 
                 _delay_ms:
0001a4 9610      	adiw r26,0
0001a5 f039      	breq __delay_ms1
                 __delay_ms0:
0001a6 95a8      	wdr
                +
0001a7 ef8a     +LDI R24 , LOW ( 0xFA )
0001a8 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0001a9 9701     +SBIW R24 , 1
0001aa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0001ab 9711      	sbiw r26,1
0001ac f7c9      	brne __delay_ms0
                 __delay_ms1:
0001ad 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   6 r1 :   1 r2 :   0 r3 :   5 r4 :   2 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  18 r17:  36 r18:   7 r19:   4 r20:   0 r21:   0 r22:   4 r23:   1 
r24:  11 r25:   3 r26:  60 r27:  19 r28:   8 r29:   2 r30:  67 r31:  14 
x  :   6 y  :  32 z  :  10 
Registers used: 21 out of 35 (60.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   5 
adiw  :   6 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  11 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   3 cpi   :   6 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   1 jmp   :  27 ld    :   6 ldd   :   8 ldi   :  73 
lds   :   0 lpm   :  12 lsl   :   3 lsr   :   0 mov   :  22 movw  :   8 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :   6 pop   :   2 push  :   2 rcall :  37 ret   :  12 
reti  :   0 rjmp  :  19 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :  12 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  24 std   :   0 sts   :   4 sub   :   0 subi  :   8 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 38 out of 116 (32.8%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00035c    772     88    860   32768   2.6%
[.dseg] 0x000100 0x000320      0     32     32    2048   1.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
