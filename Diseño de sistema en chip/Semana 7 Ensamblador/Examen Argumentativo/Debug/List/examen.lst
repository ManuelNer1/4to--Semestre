
AVRASM ver. 2.1.30  C:\Users\ManuelNeri\Desktop\Examen Argumentativo\Debug\List\examen.asm Mon May 17 13:26:43 2021

C:\Users\ManuelNeri\Desktop\Examen Argumentativo\Debug\List\examen.asm(1090): warning: Register r3 already defined by the .DEF directive
C:\Users\ManuelNeri\Desktop\Examen Argumentativo\Debug\List\examen.asm(1091): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Val=R3
                 	.DEF _Val_msb=R4
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000034 2710
000035 03e8
000036 0064
000037 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000038 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000039 1000
00003a 0100
00003b 0010
00003c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
00003d 60fc
00003e f3db
00003f b766
000040 e1be      	.DB  0xFC,0x60,0xDB,0xF3,0x66,0xB7,0xBE,0xE1
000041 f6fe
000042 3fee
000043 7b9c
000044 8e9e      	.DB  0xFE,0xF6,0xEE,0x3F,0x9C,0x7B,0x9E,0x8E
                 _0x0:
000045 6f4a
000046 6573
000047 4d20
000048 6e61      	.DB  0x4A,0x6F,0x73,0x65,0x20,0x4D,0x61,0x6E
000049 6575
00004a 206c
00004b 654e
00004c 6972      	.DB  0x75,0x65,0x6C,0x20,0x4E,0x65,0x72,0x69
00004d 5620
00004e 6c69
00004f 656c
000050 6164      	.DB  0x20,0x56,0x69,0x6C,0x6C,0x65,0x64,0x61
000051 4120
000052 3130
000053 3037
000054 3436      	.DB  0x20,0x41,0x30,0x31,0x37,0x30,0x36,0x34
000055 3035
000056 000d      	.DB  0x35,0x30,0xD,0x0
                 
                 __GLOBAL_INI_TBL:
000057 0010      	.DW  0x10
000058 0300      	.DW  _SieteSeg
000059 007a      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00005a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005b 94f8      	CLI
00005c 27ee      	CLR  R30
00005d bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005e e0f1      	LDI  R31,1
00005f bff5      	OUT  MCUCR,R31
000060 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000061 e08d      	LDI  R24,(14-2)+1
000062 e0a2      	LDI  R26,2
000063 27bb      	CLR  R27
                 __CLEAR_REG:
000064 93ed      	ST   X+,R30
000065 958a      	DEC  R24
000066 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000067 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000068 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000069 e0a0      	LDI  R26,LOW(__SRAM_START)
00006a e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006b 93ed      	ST   X+,R30
00006c 9701      	SBIW R24,1
00006d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006e eaee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000070 9185      	LPM  R24,Z+
000071 9195      	LPM  R25,Z+
000072 9700      	SBIW R24,0
000073 f061      	BREQ __GLOBAL_INI_END
000074 91a5      	LPM  R26,Z+
000075 91b5      	LPM  R27,Z+
000076 9005      	LPM  R0,Z+
000077 9015      	LPM  R1,Z+
000078 01bf      	MOVW R22,R30
000079 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007a 9005      	LPM  R0,Z+
00007b 920d      	ST   X+,R0
00007c 9701      	SBIW R24,1
00007d f7e1      	BRNE __GLOBAL_INI_LOOP
00007e 01fb      	MOVW R30,R22
00007f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000080 e0e0      	LDI  R30,__GPIOR0_INIT
000081 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000082 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000083 bfed      	OUT  SPL,R30
000084 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000085 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000086 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000087 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000088 940c 00a5 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/*
                 ; * examen.c
                 ; *
                 ; * Created: 17/05/2021 10:49:32 a. m.
                 ; * Author: ManuelNeri
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;// Declare your global variables here
                 ;int Val;
                 ;unsigned char SieteSeg[16]={0xFC, 0x60, 0xDB, 0xF3,
                 ;                            0x66, 0xB7, 0xBE, 0XE1,
                 ;                            0xFE, 0xF6, 0xEE, 0x3F,
                 ;                            0x9C, 0x7B, 0x9E, 0x8E};
                 
                 	.DSEG
                 ;
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0019 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 001A ADMUX=adc_input | ADC_VREF_TYPE;
00008a 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00008b 81e8      	LD   R30,Y
00008c 64e0      	ORI  R30,0x40
00008d 93e0 007c 	STS  124,R30
                 ; 0000 001B // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 001C delay_us(10);
                +
00008f e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000090 958a     +DEC R24
000091 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 001D // Start the AD conversion
                 ; 0000 001E ADCSRA|=(1<<ADSC);
000092 91e0 007a 	LDS  R30,122
000094 64e0      	ORI  R30,0x40
000095 93e0 007a 	STS  122,R30
                 ; 0000 001F // Wait for the AD conversion to complete
                 ; 0000 0020 while ((ADCSRA & (1<<ADIF))==0);
                 _0x4:
000097 91e0 007a 	LDS  R30,122
000099 71e0      	ANDI R30,LOW(0x10)
00009a f3e1      	BREQ _0x4
                 ; 0000 0021 ADCSRA|=(1<<ADIF);
00009b 91e0 007a 	LDS  R30,122
00009d 61e0      	ORI  R30,0x10
00009e 93e0 007a 	STS  122,R30
                 ; 0000 0022 return ADCW;
0000a0 91e0 0078 	LDS  R30,120
0000a2 91f0 0079 	LDS  R31,120+1
0000a4 c07e      	RJMP _0x2060001
                 ; 0000 0023 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0026 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0027 
                 ; 0000 0028 // ADC initialization
                 ; 0000 0029 // ADC Clock frequency: 125.000 kHz
                 ; 0000 002A // ADC Voltage Reference: AVCC pin
                 ; 0000 002B // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 002C // Digital input buffers on ADC0: On, ADC1: Off, ADC2: On, ADC3: On
                 ; 0000 002D // ADC4: On, ADC5: On
                 ; 0000 002E DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (1<<ADC1D) | (0<<ADC0D);
0000a5 e0e2      	LDI  R30,LOW(2)
0000a6 93e0 007e 	STS  126,R30
                 ; 0000 002F ADMUX=ADC_VREF_TYPE;
0000a8 e4e0      	LDI  R30,LOW(64)
0000a9 93e0 007c 	STS  124,R30
                 ; 0000 0030 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
0000ab e8e6      	LDI  R30,LOW(134)
0000ac 93e0 007a 	STS  122,R30
                 ; 0000 0031 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000ae e0e0      	LDI  R30,LOW(0)
0000af 93e0 007b 	STS  123,R30
                 ; 0000 0032 
                 ; 0000 0033 // USART initialization
                 ; 0000 0034 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0035 // USART Receiver: On
                 ; 0000 0036 // USART Transmitter: On
                 ; 0000 0037 // USART0 Mode: Asynchronous
                 ; 0000 0038 // USART Baud Rate: 1200
                 ; 0000 0039 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
0000b1 93e0 00c0 	STS  192,R30
                 ; 0000 003A UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0000b3 e1e8      	LDI  R30,LOW(24)
0000b4 93e0 00c1 	STS  193,R30
                 ; 0000 003B UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
0000b6 e0e6      	LDI  R30,LOW(6)
0000b7 93e0 00c2 	STS  194,R30
                 ; 0000 003C UBRR0H=0x01;
0000b9 e0e1      	LDI  R30,LOW(1)
0000ba 93e0 00c5 	STS  197,R30
                 ; 0000 003D UBRR0L=0xA0;
0000bc eae0      	LDI  R30,LOW(160)
0000bd 93e0 00c4 	STS  196,R30
                 ; 0000 003E 
                 ; 0000 003F printf("Jose Manuel Neri Villeda A01706450\r");
                +
0000bf e8ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000c0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000c1 93fa      	ST   -Y,R31
0000c2 93ea      	ST   -Y,R30
0000c3 e080      	LDI  R24,0
0000c4 d1a1      	RCALL _printf
0000c5 9622      	ADIW R28,2
                 ; 0000 0040 
                 ; 0000 0041 
                 ; 0000 0042 DDRD.6 = 1;
0000c6 9a56      	SBI  0xA,6
                 ; 0000 0043 TCCR0A = 0x42;
0000c7 e4e2      	LDI  R30,LOW(66)
0000c8 bde4      	OUT  0x24,R30
                 ; 0000 0044 TCCR0B = 0x03;
0000c9 e0e3      	LDI  R30,LOW(3)
0000ca bde5      	OUT  0x25,R30
                 ; 0000 0045 OCR0A = 1458;
0000cb ebe2      	LDI  R30,LOW(178)
0000cc bde7      	OUT  0x27,R30
                 ; 0000 0046 
                 ; 0000 0047 DDRC.5 = 1;
0000cd 9a3d      	SBI  0x7,5
                 ; 0000 0048 TCCR1A=0;
0000ce e0e0      	LDI  R30,LOW(0)
0000cf 93e0 0080 	STS  128,R30
                 ; 0000 0049 TCCR1B= 0x0B;
0000d1 e0eb      	LDI  R30,LOW(11)
0000d2 93e0 0081 	STS  129,R30
                 ; 0000 004A OCR1AH= 12499/256;
0000d4 e3e0      	LDI  R30,LOW(48)
0000d5 93e0 0089 	STS  137,R30
                 ; 0000 004B OCR1AL= 12499%256;
0000d7 ede3      	LDI  R30,LOW(211)
0000d8 93e0 0088 	STS  136,R30
                 ; 0000 004C TIMSK1=0x02;
0000da e0e2      	LDI  R30,LOW(2)
0000db 93e0 006f 	STS  111,R30
                 ; 0000 004D #asm("SEI")
0000dd 9478      	SEI
                 ; 0000 004E PORTC.5=~PORTC.5;
0000de 9b45      	SBIS 0x8,5
0000df c002      	RJMP _0xB
0000e0 9845      	CBI  0x8,5
0000e1 c001      	RJMP _0xC
                 _0xB:
0000e2 9a45      	SBI  0x8,5
                 _0xC:
                 ; 0000 004F 
                 ; 0000 0050 while (1)
                 _0xD:
                 ; 0000 0051     {
                 ; 0000 0052       //PARTE 2
                 ; 0000 0053       DDRB = 0xFE;
0000e3 efee      	LDI  R30,LOW(254)
0000e4 b9e4      	OUT  0x4,R30
                 ; 0000 0054       Val = read_adc(1);
0000e5 e0a1      	LDI  R26,LOW(1)
0000e6 dfa3      	RCALL _read_adc
                +
0000e7 2e3e     +MOV R3 , R30
0000e8 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
                 ; 0000 0055       if (Val < 0.5)
0000e9 940e 02a4 	CALL SUBOPT_0x0
0000eb f418      	BRSH _0x10
                 ; 0000 0056         PORTB = SieteSeg[0];
0000ec 91e0 0300 	LDS  R30,_SieteSeg
0000ee b9e5      	OUT  0x5,R30
                 ; 0000 0057       if ((Val >= 0.5)||(Val < 1.5))
                 _0x10:
0000ef 940e 02a4 	CALL SUBOPT_0x0
0000f1 f418      	BRSH _0x12
0000f2 940e 02b3 	CALL SUBOPT_0x1
0000f4 f418      	BRSH _0x11
                 _0x12:
                 ; 0000 0058         PORTB = SieteSeg[1];
                +
0000f5 91e0 0301+LDS R30 , _SieteSeg + ( 1 )
                 	__GETB1MN _SieteSeg,1
0000f7 b9e5      	OUT  0x5,R30
                 ; 0000 0059       if ((Val >= 1.5)||(Val < 2.5))
                 _0x11:
0000f8 940e 02b3 	CALL SUBOPT_0x1
0000fa f418      	BRSH _0x15
0000fb 940e 02c2 	CALL SUBOPT_0x2
0000fd f418      	BRSH _0x14
                 _0x15:
                 ; 0000 005A         PORTB = SieteSeg[2];
                +
0000fe 91e0 0302+LDS R30 , _SieteSeg + ( 2 )
                 	__GETB1MN _SieteSeg,2
000100 b9e5      	OUT  0x5,R30
                 ; 0000 005B       if ((Val >= 2.5)||(Val < 3.5))
                 _0x14:
000101 940e 02c2 	CALL SUBOPT_0x2
000103 f418      	BRSH _0x18
000104 940e 02d1 	CALL SUBOPT_0x3
000106 f418      	BRSH _0x17
                 _0x18:
                 ; 0000 005C         PORTB = SieteSeg[3];
                +
000107 91e0 0303+LDS R30 , _SieteSeg + ( 3 )
                 	__GETB1MN _SieteSeg,3
000109 b9e5      	OUT  0x5,R30
                 ; 0000 005D       if ((Val >= 3.5)||(Val < 4.5))
                 _0x17:
00010a 940e 02d1 	CALL SUBOPT_0x3
00010c f418      	BRSH _0x1B
00010d 940e 02e0 	CALL SUBOPT_0x4
00010f f418      	BRSH _0x1A
                 _0x1B:
                 ; 0000 005E         PORTB = SieteSeg[4];
                +
000110 91e0 0304+LDS R30 , _SieteSeg + ( 4 )
                 	__GETB1MN _SieteSeg,4
000112 b9e5      	OUT  0x5,R30
                 ; 0000 005F       if (Val >= 4.5)
                 _0x1A:
000113 940e 02e0 	CALL SUBOPT_0x4
000115 f018      	BRLO _0x1D
                 ; 0000 0060         PORTB = SieteSeg[5];
                +
000116 91e0 0305+LDS R30 , _SieteSeg + ( 5 )
                 	__GETB1MN _SieteSeg,5
000118 b9e5      	OUT  0x5,R30
                 ; 0000 0061 
                 ; 0000 0062 
                 ; 0000 0063 
                 ; 0000 0064     }
                 _0x1D:
000119 cfc9      	RJMP _0xD
                 ; 0000 0065 }
                 _0x1E:
00011a cfff      	RJMP _0x1E
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
00011b 93aa      	ST   -Y,R26
                 _0x2000006:
00011c 91e0 00c0 	LDS  R30,192
00011e 72e0      	ANDI R30,LOW(0x20)
00011f f3e1      	BREQ _0x2000006
000120 81e8      	LD   R30,Y
000121 93e0 00c6 	STS  198,R30
                 _0x2060001:
000123 9621      	ADIW R28,1
000124 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
000125 93ba      	ST   -Y,R27
000126 93aa      	ST   -Y,R26
000127 81aa      	LDD  R26,Y+2
000128 dff2      	RCALL _putchar
000129 81a8      	LD   R26,Y
00012a 81b9      	LDD  R27,Y+1
00012b 91ed      	LD   R30,X+
00012c 91fd      	LD   R31,X+
00012d 9631      	ADIW R30,1
00012e 93fe      	ST   -X,R31
00012f 93ee      	ST   -X,R30
000130 9623      	ADIW R28,3
000131 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000132 93ba      	ST   -Y,R27
000133 93aa      	ST   -Y,R26
000134 9726      	SBIW R28,6
000135 940e 0393 	CALL __SAVELOCR6
000137 e010      	LDI  R17,0
000138 85ac      	LDD  R26,Y+12
000139 85bd      	LDD  R27,Y+12+1
00013a e0e0      	LDI  R30,LOW(0)
00013b e0f0      	LDI  R31,HIGH(0)
00013c 93ed      	ST   X+,R30
00013d 93fc      	ST   X,R31
                 _0x200001C:
00013e 89ea      	LDD  R30,Y+18
00013f 89fb      	LDD  R31,Y+18+1
000140 9631      	ADIW R30,1
000141 8bea      	STD  Y+18,R30
000142 8bfb      	STD  Y+18+1,R31
000143 9731      	SBIW R30,1
000144 91e4      	LPM  R30,Z
000145 2f2e      	MOV  R18,R30
000146 30e0      	CPI  R30,0
000147 f409      	BRNE PC+2
000148 c115      	RJMP _0x200001E
000149 2fe1      	MOV  R30,R17
00014a 30e0      	CPI  R30,0
00014b f439      	BRNE _0x2000022
00014c 3225      	CPI  R18,37
00014d f411      	BRNE _0x2000023
00014e e011      	LDI  R17,LOW(1)
00014f c002      	RJMP _0x2000024
                 _0x2000023:
000150 940e 02ef 	CALL SUBOPT_0x5
                 _0x2000024:
000152 c10a      	RJMP _0x2000021
                 _0x2000022:
000153 30e1      	CPI  R30,LOW(0x1)
000154 f4a9      	BRNE _0x2000025
000155 3225      	CPI  R18,37
000156 f419      	BRNE _0x2000026
000157 940e 02ef 	CALL SUBOPT_0x5
000159 c102      	RJMP _0x20000D2
                 _0x2000026:
00015a e012      	LDI  R17,LOW(2)
00015b e040      	LDI  R20,LOW(0)
00015c e000      	LDI  R16,LOW(0)
00015d 322d      	CPI  R18,45
00015e f411      	BRNE _0x2000027
00015f e001      	LDI  R16,LOW(1)
000160 c0fc      	RJMP _0x2000021
                 _0x2000027:
000161 322b      	CPI  R18,43
000162 f411      	BRNE _0x2000028
000163 e24b      	LDI  R20,LOW(43)
000164 c0f8      	RJMP _0x2000021
                 _0x2000028:
000165 3220      	CPI  R18,32
000166 f411      	BRNE _0x2000029
000167 e240      	LDI  R20,LOW(32)
000168 c0f4      	RJMP _0x2000021
                 _0x2000029:
000169 c002      	RJMP _0x200002A
                 _0x2000025:
00016a 30e2      	CPI  R30,LOW(0x2)
00016b f439      	BRNE _0x200002B
                 _0x200002A:
00016c e050      	LDI  R21,LOW(0)
00016d e013      	LDI  R17,LOW(3)
00016e 3320      	CPI  R18,48
00016f f411      	BRNE _0x200002C
000170 6800      	ORI  R16,LOW(128)
000171 c0eb      	RJMP _0x2000021
                 _0x200002C:
000172 c003      	RJMP _0x200002D
                 _0x200002B:
000173 30e3      	CPI  R30,LOW(0x3)
000174 f009      	BREQ PC+2
000175 c0e7      	RJMP _0x2000021
                 _0x200002D:
000176 3320      	CPI  R18,48
000177 f010      	BRLO _0x2000030
000178 332a      	CPI  R18,58
000179 f008      	BRLO _0x2000031
                 _0x2000030:
00017a c007      	RJMP _0x200002F
                 _0x2000031:
00017b e0aa      	LDI  R26,LOW(10)
00017c 9f5a      	MUL  R21,R26
00017d 2d50      	MOV  R21,R0
00017e 2fe2      	MOV  R30,R18
00017f 53e0      	SUBI R30,LOW(48)
000180 0f5e      	ADD  R21,R30
000181 c0db      	RJMP _0x2000021
                 _0x200002F:
000182 2fe2      	MOV  R30,R18
000183 36e3      	CPI  R30,LOW(0x63)
000184 f449      	BRNE _0x2000035
000185 940e 02f6 	CALL SUBOPT_0x6
000187 89e8      	LDD  R30,Y+16
000188 89f9      	LDD  R31,Y+16+1
000189 81a4      	LDD  R26,Z+4
00018a 93aa      	ST   -Y,R26
00018b 940e 02fc 	CALL SUBOPT_0x7
00018d c0ce      	RJMP _0x2000036
                 _0x2000035:
00018e 37e3      	CPI  R30,LOW(0x73)
00018f f441      	BRNE _0x2000038
000190 940e 02f6 	CALL SUBOPT_0x6
000192 940e 0302 	CALL SUBOPT_0x8
000194 940e 028b 	CALL _strlen
000196 2f1e      	MOV  R17,R30
000197 c00a      	RJMP _0x2000039
                 _0x2000038:
000198 37e0      	CPI  R30,LOW(0x70)
000199 f461      	BRNE _0x200003B
00019a 940e 02f6 	CALL SUBOPT_0x6
00019c 940e 0302 	CALL SUBOPT_0x8
00019e 940e 0297 	CALL _strlenf
0001a0 2f1e      	MOV  R17,R30
0001a1 6008      	ORI  R16,LOW(8)
                 _0x2000039:
0001a2 6002      	ORI  R16,LOW(2)
0001a3 770f      	ANDI R16,LOW(127)
0001a4 e030      	LDI  R19,LOW(0)
0001a5 c034      	RJMP _0x200003C
                 _0x200003B:
0001a6 36e4      	CPI  R30,LOW(0x64)
0001a7 f011      	BREQ _0x200003F
0001a8 36e9      	CPI  R30,LOW(0x69)
0001a9 f411      	BRNE _0x2000040
                 _0x200003F:
0001aa 6004      	ORI  R16,LOW(4)
0001ab c002      	RJMP _0x2000041
                 _0x2000040:
0001ac 37e5      	CPI  R30,LOW(0x75)
0001ad f431      	BRNE _0x2000042
                 _0x2000041:
0001ae e6e8      	LDI  R30,LOW(_tbl10_G100*2)
0001af e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001b0 83ee      	STD  Y+6,R30
0001b1 83ff      	STD  Y+6+1,R31
0001b2 e015      	LDI  R17,LOW(5)
0001b3 c00c      	RJMP _0x2000043
                 _0x2000042:
0001b4 35e8      	CPI  R30,LOW(0x58)
0001b5 f411      	BRNE _0x2000045
0001b6 6008      	ORI  R16,LOW(8)
0001b7 c003      	RJMP _0x2000046
                 _0x2000045:
0001b8 37e8      	CPI  R30,LOW(0x78)
0001b9 f009      	BREQ PC+2
0001ba c0a1      	RJMP _0x2000077
                 _0x2000046:
0001bb e7e2      	LDI  R30,LOW(_tbl16_G100*2)
0001bc e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001bd 83ee      	STD  Y+6,R30
0001be 83ff      	STD  Y+6+1,R31
0001bf e014      	LDI  R17,LOW(4)
                 _0x2000043:
0001c0 ff02      	SBRS R16,2
0001c1 c014      	RJMP _0x2000048
0001c2 940e 02f6 	CALL SUBOPT_0x6
0001c4 940e 030c 	CALL SUBOPT_0x9
0001c6 85ab      	LDD  R26,Y+11
0001c7 23aa      	TST  R26
0001c8 f43a      	BRPL _0x2000049
0001c9 85ea      	LDD  R30,Y+10
0001ca 85fb      	LDD  R31,Y+10+1
0001cb 940e 037a 	CALL __ANEGW1
0001cd 87ea      	STD  Y+10,R30
0001ce 87fb      	STD  Y+10+1,R31
0001cf e24d      	LDI  R20,LOW(45)
                 _0x2000049:
0001d0 3040      	CPI  R20,0
0001d1 f011      	BREQ _0x200004A
0001d2 5f1f      	SUBI R17,-LOW(1)
0001d3 c001      	RJMP _0x200004B
                 _0x200004A:
0001d4 7f0b      	ANDI R16,LOW(251)
                 _0x200004B:
0001d5 c004      	RJMP _0x200004C
                 _0x2000048:
0001d6 940e 02f6 	CALL SUBOPT_0x6
0001d8 940e 030c 	CALL SUBOPT_0x9
                 _0x200004C:
                 _0x200003C:
0001da fd00      	SBRC R16,0
0001db c011      	RJMP _0x200004D
                 _0x200004E:
0001dc 1715      	CP   R17,R21
0001dd f478      	BRSH _0x2000050
0001de ff07      	SBRS R16,7
0001df c008      	RJMP _0x2000051
0001e0 ff02      	SBRS R16,2
0001e1 c004      	RJMP _0x2000052
0001e2 7f0b      	ANDI R16,LOW(251)
0001e3 2f24      	MOV  R18,R20
0001e4 5011      	SUBI R17,LOW(1)
0001e5 c001      	RJMP _0x2000053
                 _0x2000052:
0001e6 e320      	LDI  R18,LOW(48)
                 _0x2000053:
0001e7 c001      	RJMP _0x2000054
                 _0x2000051:
0001e8 e220      	LDI  R18,LOW(32)
                 _0x2000054:
0001e9 940e 02ef 	CALL SUBOPT_0x5
0001eb 5051      	SUBI R21,LOW(1)
0001ec cfef      	RJMP _0x200004E
                 _0x2000050:
                 _0x200004D:
0001ed 2f31      	MOV  R19,R17
0001ee ff01      	SBRS R16,1
0001ef c017      	RJMP _0x2000055
                 _0x2000056:
0001f0 3030      	CPI  R19,0
0001f1 f0a1      	BREQ _0x2000058
0001f2 ff03      	SBRS R16,3
0001f3 c006      	RJMP _0x2000059
0001f4 81ee      	LDD  R30,Y+6
0001f5 81ff      	LDD  R31,Y+6+1
0001f6 9125      	LPM  R18,Z+
0001f7 83ee      	STD  Y+6,R30
0001f8 83ff      	STD  Y+6+1,R31
0001f9 c005      	RJMP _0x200005A
                 _0x2000059:
0001fa 81ae      	LDD  R26,Y+6
0001fb 81bf      	LDD  R27,Y+6+1
0001fc 912d      	LD   R18,X+
0001fd 83ae      	STD  Y+6,R26
0001fe 83bf      	STD  Y+6+1,R27
                 _0x200005A:
0001ff 940e 02ef 	CALL SUBOPT_0x5
000201 3050      	CPI  R21,0
000202 f009      	BREQ _0x200005B
000203 5051      	SUBI R21,LOW(1)
                 _0x200005B:
000204 5031      	SUBI R19,LOW(1)
000205 cfea      	RJMP _0x2000056
                 _0x2000058:
000206 c04b      	RJMP _0x200005C
                 _0x2000055:
                 _0x200005E:
000207 e320      	LDI  R18,LOW(48)
000208 81ee      	LDD  R30,Y+6
000209 81ff      	LDD  R31,Y+6+1
00020a 940e 038f 	CALL __GETW1PF
00020c 87e8      	STD  Y+8,R30
00020d 87f9      	STD  Y+8+1,R31
00020e 81ee      	LDD  R30,Y+6
00020f 81ff      	LDD  R31,Y+6+1
000210 9632      	ADIW R30,2
000211 83ee      	STD  Y+6,R30
000212 83ff      	STD  Y+6+1,R31
                 _0x2000060:
000213 85e8      	LDD  R30,Y+8
000214 85f9      	LDD  R31,Y+8+1
000215 85aa      	LDD  R26,Y+10
000216 85bb      	LDD  R27,Y+10+1
000217 17ae      	CP   R26,R30
000218 07bf      	CPC  R27,R31
000219 f050      	BRLO _0x2000062
00021a 5f2f      	SUBI R18,-LOW(1)
00021b 85a8      	LDD  R26,Y+8
00021c 85b9      	LDD  R27,Y+8+1
00021d 85ea      	LDD  R30,Y+10
00021e 85fb      	LDD  R31,Y+10+1
00021f 1bea      	SUB  R30,R26
000220 0bfb      	SBC  R31,R27
000221 87ea      	STD  Y+10,R30
000222 87fb      	STD  Y+10+1,R31
000223 cfef      	RJMP _0x2000060
                 _0x2000062:
000224 332a      	CPI  R18,58
000225 f028      	BRLO _0x2000063
000226 ff03      	SBRS R16,3
000227 c002      	RJMP _0x2000064
000228 5f29      	SUBI R18,-LOW(7)
000229 c001      	RJMP _0x2000065
                 _0x2000064:
00022a 5d29      	SUBI R18,-LOW(39)
                 _0x2000065:
                 _0x2000063:
00022b fd04      	SBRC R16,4
00022c c01a      	RJMP _0x2000067
00022d 3321      	CPI  R18,49
00022e f420      	BRSH _0x2000069
00022f 85a8      	LDD  R26,Y+8
000230 85b9      	LDD  R27,Y+8+1
000231 9711      	SBIW R26,1
000232 f409      	BRNE _0x2000068
                 _0x2000069:
000233 c009      	RJMP _0x20000D3
                 _0x2000068:
000234 1753      	CP   R21,R19
000235 f010      	BRLO _0x200006D
000236 ff00      	SBRS R16,0
000237 c001      	RJMP _0x200006E
                 _0x200006D:
000238 c013      	RJMP _0x200006C
                 _0x200006E:
000239 e220      	LDI  R18,LOW(32)
00023a ff07      	SBRS R16,7
00023b c00b      	RJMP _0x200006F
00023c e320      	LDI  R18,LOW(48)
                 _0x20000D3:
00023d 6100      	ORI  R16,LOW(16)
00023e ff02      	SBRS R16,2
00023f c007      	RJMP _0x2000070
000240 7f0b      	ANDI R16,LOW(251)
000241 934a      	ST   -Y,R20
000242 940e 02fc 	CALL SUBOPT_0x7
000244 3050      	CPI  R21,0
000245 f009      	BREQ _0x2000071
000246 5051      	SUBI R21,LOW(1)
                 _0x2000071:
                 _0x2000070:
                 _0x200006F:
                 _0x2000067:
000247 940e 02ef 	CALL SUBOPT_0x5
000249 3050      	CPI  R21,0
00024a f009      	BREQ _0x2000072
00024b 5051      	SUBI R21,LOW(1)
                 _0x2000072:
                 _0x200006C:
00024c 5031      	SUBI R19,LOW(1)
00024d 85a8      	LDD  R26,Y+8
00024e 85b9      	LDD  R27,Y+8+1
00024f 9712      	SBIW R26,2
000250 f008      	BRLO _0x200005F
000251 cfb5      	RJMP _0x200005E
                 _0x200005F:
                 _0x200005C:
000252 ff00      	SBRS R16,0
000253 c008      	RJMP _0x2000073
                 _0x2000074:
000254 3050      	CPI  R21,0
000255 f031      	BREQ _0x2000076
000256 5051      	SUBI R21,LOW(1)
000257 e2e0      	LDI  R30,LOW(32)
000258 93ea      	ST   -Y,R30
000259 940e 02fc 	CALL SUBOPT_0x7
00025b cff8      	RJMP _0x2000074
                 _0x2000076:
                 _0x2000073:
                 _0x2000077:
                 _0x2000036:
                 _0x20000D2:
00025c e010      	LDI  R17,LOW(0)
                 _0x2000021:
00025d cee0      	RJMP _0x200001C
                 _0x200001E:
00025e 85ac      	LDD  R26,Y+12
00025f 85bd      	LDD  R27,Y+12+1
000260 940e 038b 	CALL __GETW1P
000262 940e 039a 	CALL __LOADLOCR6
000264 9664      	ADIW R28,20
000265 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000266 92ff      	PUSH R15
000267 2ef8      	MOV  R15,R24
000268 9726      	SBIW R28,6
000269 931a      	ST   -Y,R17
00026a 930a      	ST   -Y,R16
00026b 01de      	MOVW R26,R28
00026c 9614      	ADIW R26,4
00026d 940e 0376 	CALL __ADDW2R15
00026f 018d      	MOVW R16,R26
000270 e0e0      	LDI  R30,LOW(0)
000271 83ec      	STD  Y+4,R30
000272 83ed      	STD  Y+4+1,R30
000273 83ee      	STD  Y+6,R30
000274 83ef      	STD  Y+6+1,R30
000275 01de      	MOVW R26,R28
000276 9618      	ADIW R26,8
000277 940e 0376 	CALL __ADDW2R15
000279 940e 038b 	CALL __GETW1P
00027b 93fa      	ST   -Y,R31
00027c 93ea      	ST   -Y,R30
00027d 931a      	ST   -Y,R17
00027e 930a      	ST   -Y,R16
00027f e2e5      	LDI  R30,LOW(_put_usart_G100)
000280 e0f1      	LDI  R31,HIGH(_put_usart_G100)
000281 93fa      	ST   -Y,R31
000282 93ea      	ST   -Y,R30
000283 01de      	MOVW R26,R28
000284 9618      	ADIW R26,8
000285 deac      	RCALL __print_G100
000286 8119      	LDD  R17,Y+1
000287 8108      	LDD  R16,Y+0
000288 9628      	ADIW R28,8
000289 90ff      	POP  R15
00028a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00028b 93ba      	ST   -Y,R27
00028c 93aa      	ST   -Y,R26
00028d 91a9          ld   r26,y+
00028e 91b9          ld   r27,y+
00028f 27ee          clr  r30
000290 27ff          clr  r31
                 strlen0:
000291 916d          ld   r22,x+
000292 2366          tst  r22
000293 f011          breq strlen1
000294 9631          adiw r30,1
000295 cffb          rjmp strlen0
                 strlen1:
000296 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000297 93ba      	ST   -Y,R27
000298 93aa      	ST   -Y,R26
000299 27aa          clr  r26
00029a 27bb          clr  r27
00029b 91e9          ld   r30,y+
00029c 91f9          ld   r31,y+
                 strlenf0:
00029d 9005      	lpm  r0,z+
00029e 2000          tst  r0
00029f f011          breq strlenf1
0002a0 9611          adiw r26,1
0002a1 cffb          rjmp strlenf0
                 strlenf1:
0002a2 01fd          movw r30,r26
0002a3 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _SieteSeg:
000300           	.BYTE 0x10
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
                +
0002a4 2de3     +MOV R30 , R3
0002a5 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
0002a6 940e 0386 	CALL __CWD1
0002a8 940e 0328 	CALL __CDF1
0002aa 01df      	MOVW R26,R30
0002ab 01cb      	MOVW R24,R22
                +
0002ac e0e0     +LDI R30 , LOW ( 0x3F000000 )
0002ad e0f0     +LDI R31 , HIGH ( 0x3F000000 )
0002ae e060     +LDI R22 , BYTE3 ( 0x3F000000 )
0002af e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
0002b0 940e 0356 	CALL __CMPF12
0002b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
                +
0002b3 2de3     +MOV R30 , R3
0002b4 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
0002b5 940e 0386 	CALL __CWD1
0002b7 940e 0328 	CALL __CDF1
0002b9 01df      	MOVW R26,R30
0002ba 01cb      	MOVW R24,R22
                +
0002bb e0e0     +LDI R30 , LOW ( 0x3FC00000 )
0002bc e0f0     +LDI R31 , HIGH ( 0x3FC00000 )
0002bd ec60     +LDI R22 , BYTE3 ( 0x3FC00000 )
0002be e37f     +LDI R23 , BYTE4 ( 0x3FC00000 )
                 	__GETD1N 0x3FC00000
0002bf 940e 0356 	CALL __CMPF12
0002c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
                +
0002c2 2de3     +MOV R30 , R3
0002c3 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
0002c4 940e 0386 	CALL __CWD1
0002c6 940e 0328 	CALL __CDF1
0002c8 01df      	MOVW R26,R30
0002c9 01cb      	MOVW R24,R22
                +
0002ca e0e0     +LDI R30 , LOW ( 0x40200000 )
0002cb e0f0     +LDI R31 , HIGH ( 0x40200000 )
0002cc e260     +LDI R22 , BYTE3 ( 0x40200000 )
0002cd e470     +LDI R23 , BYTE4 ( 0x40200000 )
                 	__GETD1N 0x40200000
0002ce 940e 0356 	CALL __CMPF12
0002d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
                +
0002d1 2de3     +MOV R30 , R3
0002d2 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
0002d3 940e 0386 	CALL __CWD1
0002d5 940e 0328 	CALL __CDF1
0002d7 01df      	MOVW R26,R30
0002d8 01cb      	MOVW R24,R22
                +
0002d9 e0e0     +LDI R30 , LOW ( 0x40600000 )
0002da e0f0     +LDI R31 , HIGH ( 0x40600000 )
0002db e660     +LDI R22 , BYTE3 ( 0x40600000 )
0002dc e470     +LDI R23 , BYTE4 ( 0x40600000 )
                 	__GETD1N 0x40600000
0002dd 940e 0356 	CALL __CMPF12
0002df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
                +
0002e0 2de3     +MOV R30 , R3
0002e1 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
0002e2 940e 0386 	CALL __CWD1
0002e4 940e 0328 	CALL __CDF1
0002e6 01df      	MOVW R26,R30
0002e7 01cb      	MOVW R24,R22
                +
0002e8 e0e0     +LDI R30 , LOW ( 0x40900000 )
0002e9 e0f0     +LDI R31 , HIGH ( 0x40900000 )
0002ea e960     +LDI R22 , BYTE3 ( 0x40900000 )
0002eb e470     +LDI R23 , BYTE4 ( 0x40900000 )
                 	__GETD1N 0x40900000
0002ec 940e 0356 	CALL __CMPF12
0002ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
0002ef 932a      	ST   -Y,R18
0002f0 85ad      	LDD  R26,Y+13
0002f1 85be      	LDD  R27,Y+13+1
0002f2 85ef      	LDD  R30,Y+15
0002f3 89f8      	LDD  R31,Y+15+1
0002f4 9509      	ICALL
0002f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
0002f6 89e8      	LDD  R30,Y+16
0002f7 89f9      	LDD  R31,Y+16+1
0002f8 9734      	SBIW R30,4
0002f9 8be8      	STD  Y+16,R30
0002fa 8bf9      	STD  Y+16+1,R31
0002fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0002fc 85ad      	LDD  R26,Y+13
0002fd 85be      	LDD  R27,Y+13+1
0002fe 85ef      	LDD  R30,Y+15
0002ff 89f8      	LDD  R31,Y+15+1
000300 9509      	ICALL
000301 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
000302 89a8      	LDD  R26,Y+16
000303 89b9      	LDD  R27,Y+16+1
000304 9614      	ADIW R26,4
000305 940e 038b 	CALL __GETW1P
000307 83ee      	STD  Y+6,R30
000308 83ff      	STD  Y+6+1,R31
000309 81ae      	LDD  R26,Y+6
00030a 81bf      	LDD  R27,Y+6+1
00030b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
00030c 89a8      	LDD  R26,Y+16
00030d 89b9      	LDD  R27,Y+16+1
00030e 9614      	ADIW R26,4
00030f 940e 038b 	CALL __GETW1P
000311 87ea      	STD  Y+10,R30
000312 87fb      	STD  Y+10+1,R31
000313 9508      	RET
                 
                 
                 	.CSEG
                 __REPACK:
000314 e850      	LDI  R21,0x80
000315 2757      	EOR  R21,R23
000316 f411      	BRNE __REPACK0
000317 935f      	PUSH R21
000318 c02b      	RJMP __ZERORES
                 __REPACK0:
000319 3f5f      	CPI  R21,0xFF
00031a f031      	BREQ __REPACK1
00031b 0f66      	LSL  R22
00031c 0c00      	LSL  R0
00031d 9557      	ROR  R21
00031e 9567      	ROR  R22
00031f 2f75      	MOV  R23,R21
000320 9508      	RET
                 __REPACK1:
000321 935f      	PUSH R21
000322 2000      	TST  R0
000323 f00a      	BRMI __REPACK2
000324 c02b      	RJMP __MAXRES
                 __REPACK2:
000325 c024      	RJMP __MINRES
                 
                 __CDF1U:
000326 9468      	SET
000327 c001      	RJMP __CDF1U0
                 __CDF1:
000328 94e8      	CLT
                 __CDF1U0:
000329 9730      	SBIW R30,0
00032a 4060      	SBCI R22,0
00032b 4070      	SBCI R23,0
00032c f0b1      	BREQ __CDF10
00032d 2400      	CLR  R0
00032e f026      	BRTS __CDF11
00032f 2377      	TST  R23
000330 f412      	BRPL __CDF11
000331 9400      	COM  R0
000332 d04b      	RCALL __ANEGD1
                 __CDF11:
000333 2e17      	MOV  R1,R23
000334 e17e      	LDI  R23,30
000335 2011      	TST  R1
                 __CDF12:
000336 f032      	BRMI __CDF13
000337 957a      	DEC  R23
000338 0fee      	LSL  R30
000339 1fff      	ROL  R31
00033a 1f66      	ROL  R22
00033b 1c11      	ROL  R1
00033c cff9      	RJMP __CDF12
                 __CDF13:
00033d 2fef      	MOV  R30,R31
00033e 2ff6      	MOV  R31,R22
00033f 2d61      	MOV  R22,R1
000340 935f      	PUSH R21
000341 dfd2      	RCALL __REPACK
000342 915f      	POP  R21
                 __CDF10:
000343 9508      	RET
                 
                 __ZERORES:
000344 27ee      	CLR  R30
000345 27ff      	CLR  R31
000346 2766      	CLR  R22
000347 2777      	CLR  R23
000348 915f      	POP  R21
000349 9508      	RET
                 
                 __MINRES:
00034a efef      	SER  R30
00034b efff      	SER  R31
00034c e76f      	LDI  R22,0x7F
00034d ef7f      	SER  R23
00034e 915f      	POP  R21
00034f 9508      	RET
                 
                 __MAXRES:
000350 efef      	SER  R30
000351 efff      	SER  R31
000352 e76f      	LDI  R22,0x7F
000353 e77f      	LDI  R23,0x7F
000354 915f      	POP  R21
000355 9508      	RET
                 
                 __CMPF12:
000356 2399      	TST  R25
000357 f09a      	BRMI __CMPF120
000358 2377      	TST  R23
000359 f042      	BRMI __CMPF121
00035a 1797      	CP   R25,R23
00035b f048      	BRLO __CMPF122
00035c f429      	BRNE __CMPF121
00035d 17ae      	CP   R26,R30
00035e 07bf      	CPC  R27,R31
00035f 0786      	CPC  R24,R22
000360 f020      	BRLO __CMPF122
000361 f031      	BREQ __CMPF123
                 __CMPF121:
000362 9498      	CLZ
000363 9488      	CLC
000364 9508      	RET
                 __CMPF122:
000365 9498      	CLZ
000366 9408      	SEC
000367 9508      	RET
                 __CMPF123:
000368 9418      	SEZ
000369 9488      	CLC
00036a 9508      	RET
                 __CMPF120:
00036b 2377      	TST  R23
00036c f7c2      	BRPL __CMPF122
00036d 1797      	CP   R25,R23
00036e f398      	BRLO __CMPF121
00036f f7a9      	BRNE __CMPF122
000370 17ea      	CP   R30,R26
000371 07fb      	CPC  R31,R27
000372 0768      	CPC  R22,R24
000373 f388      	BRLO __CMPF122
000374 f399      	BREQ __CMPF123
000375 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000376 2400      	CLR  R0
000377 0daf      	ADD  R26,R15
000378 1db0      	ADC  R27,R0
000379 9508      	RET
                 
                 __ANEGW1:
00037a 95f1      	NEG  R31
00037b 95e1      	NEG  R30
00037c 40f0      	SBCI R31,0
00037d 9508      	RET
                 
                 __ANEGD1:
00037e 95f0      	COM  R31
00037f 9560      	COM  R22
000380 9570      	COM  R23
000381 95e1      	NEG  R30
000382 4fff      	SBCI R31,-1
000383 4f6f      	SBCI R22,-1
000384 4f7f      	SBCI R23,-1
000385 9508      	RET
                 
                 __CWD1:
000386 2f6f      	MOV  R22,R31
000387 0f66      	ADD  R22,R22
000388 0b66      	SBC  R22,R22
000389 2f76      	MOV  R23,R22
00038a 9508      	RET
                 
                 __GETW1P:
00038b 91ed      	LD   R30,X+
00038c 91fc      	LD   R31,X
00038d 9711      	SBIW R26,1
00038e 9508      	RET
                 
                 __GETW1PF:
00038f 9005      	LPM  R0,Z+
000390 91f4      	LPM  R31,Z
000391 2de0      	MOV  R30,R0
000392 9508      	RET
                 
                 __SAVELOCR6:
000393 935a      	ST   -Y,R21
                 __SAVELOCR5:
000394 934a      	ST   -Y,R20
                 __SAVELOCR4:
000395 933a      	ST   -Y,R19
                 __SAVELOCR3:
000396 932a      	ST   -Y,R18
                 __SAVELOCR2:
000397 931a      	ST   -Y,R17
000398 930a      	ST   -Y,R16
000399 9508      	RET
                 
                 __LOADLOCR6:
00039a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00039b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00039c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00039d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00039e 8119      	LDD  R17,Y+1
00039f 8108      	LD   R16,Y
0003a0 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  15 r1 :   5 r2 :   0 r3 :   6 r4 :   6 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  30 r17:  19 r18:  27 r19:   8 r20:   9 r21:  29 r22:  33 r23:  22 
r24:  18 r25:   5 r26:  57 r27:  28 r28:  11 r29:   1 r30: 179 r31:  67 
x  :  13 y  : 122 z  :  13 
Registers used: 24 out of 35 (68.6%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  15 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   0 brmi  :   4 brne  :  24 brpl  :   3 brsh  :  11 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  54 
cbi   :   1 cbr   :   0 clc   :   2 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   1 clv   :   0 clz   :   2 com   :   4 
cp    :   7 cpc   :   5 cpi   :  30 cpse  :   0 dec   :   3 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  27 ld    :  14 ldd   :  57 ldi   :  92 
lds   :  12 lpm   :  14 lsl   :   3 lsr   :   0 mov   :  30 movw  :  18 
mul   :   1 muls  :   0 mulsu :   0 neg   :   3 nop   :   0 or    :   0 
ori   :   9 out   :  16 pop   :   5 push  :   4 rcall :   6 ret   :  32 
reti  :   0 rjmp  :  61 rol   :   3 ror   :   2 sbc   :   2 sbci  :   6 
sbi   :   3 sbic  :   0 sbis  :   1 sbiw  :  11 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   5 
ses   :   0 set   :   1 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  37 std   :  28 sts   :  18 sub   :   1 subi  :  13 swap  :   0 
tst   :   9 wdr   :   0 
Instructions used: 63 out of 116 (54.3%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000742   1780     78   1858   32768   5.7%
[.dseg] 0x000100 0x000310      0     16     16    2048   0.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
