;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void main(void)
; 0000 000B {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 000C CLKPR = 0x80;     //Habilita cambio de frecuencia
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 000D CLKPR = 0;        //Micro a 8MHz
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000E 
; 0000 000F PORTD.0 = 1;      //Pull-up en PD0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0010 DDRD.6 = 1;       //Salida en PD6 (OC0A)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0011 TCCR0A = 0x42;    //CTC
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0012 TCCR0B = 0x04;    //CK/256
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0013 OCR0A = 103;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0014 
; 0000 0015 
; 0000 0016 DDRB.1 = 1;       //Salida en PB1(OC1A)
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0017 TCCR1A = 0x40;    //CTC
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0018 TCCR1B = 0x09;    //CK
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0019 OCR1AH = 15999>>8;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001A OCR1AL = 15999&0xFF;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 001B 
; 0000 001C DDRB.3 = 1;       //Salida en PB3(OC2A)
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 001D TCCR2A = 0x42;    //CTC
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 001E TCCR2B = 0x04;    //CK/64
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001F OCR2A = 178;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0020 while (1)
;PCODE: $0000002E VOL: 0
; 0000 0021 {
; 0000 0022 // Please write your application code here
; 0000 0023 
; 0000 0024 }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0025 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
